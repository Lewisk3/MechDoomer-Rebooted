class MechProjectile : FastProjectile
{
	Quat rotation;
	Quat desiredRotation;

	DrivableMech mech;
	vector3 spawnPos;
	double speedKPH;
	double curDist, minRange, maxRange;
	double firePitch; // Initial pitch offset when fired.
	double trueDamage;
	double homingTics; // Time spent actively homing.
	bool hasHoming;
	Actor homingTarget;
	Sound impactSnd;
	bool stopHoming;
	bool fullVolumeImpact;
	bool died; // Needed because projectiles are fucking jank sometimes in this engine.
	int ripCount, ripMax;
	Array<Actor> rippedActors;
	
	Property Ranges : minRange, maxRange;
	Property FirePitch : firePitch;
	Property Dmg : trueDamage;
	Property Homing : hasHoming;
	Property ImpactSound : impactSnd;
	Property GlobalImpactSound : fullVolumeImpact;
	Property SpeedKPH : speedKPH;
	Property RipperCount : ripMax;
	
	Default
	{
		Scale 3.0;
		Speed 10;
		Projectile;
		+INTERPOLATEANGLES;
	}
	
	override void Tick()
	{
		// Recalculate A/P/R from rotation quat.
		let curAngles = DrivablesMath.GetEuler(rotation);
		angle = curAngles.x;
		pitch = curAngles.y;
		roll = curAngles.z;
		
		super.Tick();
		
		// Interpolate rotations
		rotation = Quat.SLerp(rotation, desiredRotation, 0.25);
		
		// Determine geometric collision.
		if( died || vel ~== (0,0,0) ) return;
		
		FLineTraceData lt;
		LineTrace(angle, radius + vel.Length(), pitch, data:lt);
		
		let hitType = lt.HitType;
		if(hitType == TRACE_HitWall || hitType == TRACE_HitFloor || hitType == TRACE_HitCeiling) 
			PreGeometryHit(lt.HitLine, lt.HitSector); 
	}
	
	virtual void PreGeometryHit(Line ln, Sector sec)
	{
		if(impactSnd) // Play Impact sound effect.
			playImpactSound();
						
		died = true;
	}
	
	virtual double getBaseSpeed()
	{
		if(speedKPH) return GetSpeedFromKPH(speedKPH);
		return default.Speed;
	}
	
	static double GetSpeedFromKPH(double KPH)
	{
		double kmPerSecond = KPH / 3600.0;
		double cmPerTick = (kmPerSecond / TICRATE) * 100000.0;
		
		return cmPerTick / DrivableMech.GetUTOCM();
	}
	
	virtual void playImpactSound(bool randomizedPitch = true)
	{
		double randomPitch = randomizedPitch ? 1.0 - frandom(-0.2, 0.6) : 0;
	
		if(died) return;
		if(fullVolumeImpact)
			S_StartSound(impactSnd, CHAN_AUTO, CHANF_OVERLAP, attenuation:ATTN_NONE, pitch:randomPitch);
		else
			A_StartSound(impactSnd, CHAN_AUTO, CHANF_OVERLAP, pitch:randomPitch);
	}
	
	void ModifyRotation(double a, double p, double r, bool set = false, bool interp = true)
	{
		let rotOffs = Quat.FromAngles(a, p, r);
		
		if(set) 
			desiredRotation = rotOffs;
		else
			desiredRotation *= rotOffs;
			
		if(!interp) rotation = desiredRotation;
	}
	
	override void PostBeginPlay()
	{	
		super.postBeginPlay();
		spawnPos = pos;
		pitch -= firePitch;
		if(speedKPH > 0) A_SetSpeed(GetSpeedFromKPH(speedKPH)); 
		rotation = Quat.FromAngles(angle, pitch, roll);
		desiredRotation = rotation;
		UpdateVelocity();
		
		// Get parent mech
		let hardpointParent = MechHardpoint(target);
		if(hardpointParent) mech = hardpointParent.mech;
	}
	
	// Only called on non-mech targets.
	// NOTE: All play-scope data accessed from this function must not be written to.
	virtual clearscope double GetDamageModifier(Actor victim) const
	{
		// Always null-check victim if you overwrite this!
		// Damage descriptions are generated with victim set to NULL.
	
		return MechHardpoint.DMGSCALE * DMG_DELT_MONSTER;
	}
	
	virtual void UpdateVelocity()
	{
		vel = rotation * (Speed, 0, 0);		
	}
	
	override int SpecialMissileHit(Actor victim)
	{	
		if(died || !victim.bSHOOTABLE || victim.bCORPSE || !victim.bSOLID) return 1;
		
		let hardpoint = MechHardpoint(target);
		let hitHardpoint = MechHardpoint(victim);
		let hitMechBox = MechHitbox(victim);

		bool hitMechPart = hitHardpoint && hardpoint && hitHardpoint.mech == hardpoint.mech;
		hitMechPart |= hitMechBox && hardpoint && MechHardpoint(hitMechBox.parent).mech == hardpoint.mech;
		
		DrivableMech hitMech = NULL;
		if(hitMechBox || hitHardpoint) 
			hitMech = hitMechBox ? MechHardpoint(hitMechBox.parent).mech : hitHardpoint.mech;
		
		if( victim == target || victim == master || hitMechPart )
			return 1; // Ignore actor.
			
		// Don't rip through mechs
		if(hitHardpoint || hitMechBox) ripMax = 0;
		
		if(impactSnd) // Play Impact sound effect.
			playImpactSound();

		// Hit a non-vehicle
		double damageMod = 1.0;
		if( !(victim is "DrivableObjectPart") ) damageMod = GetDamageModifier(victim);
		
		if(!ripMax || rippedActors.Find(victim) == rippedActors.Size())
		{
			victim.DamageMobJ(self, master ? master : target, ceil(trueDamage * damageMod), DamageType, DMG_THRUSTLESS, angle);
			// console.printf("Damaging for: %f damage", ceil(trueDamage * damageMod));
			OnHit(victim, hitMech); 
			if(ripMax && ripCount < ripMax)
			{
				rippedActors.Push(victim);
				ripCount++;
				OnRip(victim);
				return 1; // Ignore actor, don't explode, but still deal damage.
			}
		}
		
		return -1;
	}
	
	virtual void OnRip(Actor victim) {}
	virtual void OnHit(Actor victim, DrivableMech mechVictim) {}
	
	virtual Actor SpawnEffect(class<Actor> trail, vector3 spawnPos)
	{
		let trail = Spawn(trail, spawnPos);
		if(trail) trail.A_SetScale(trail.default.Scale.X * scale.X);
		
		return trail;
	}
	
	virtual void HandleRanges()
	{
		curDist = (pos - spawnPos).Length();
		curDist = DrivableMech.unitsToKM(curDist) * 1000.0;
		
		if( !homingTarget && firePitch && curDist < minRange )
		{
			ModifyRotation(angle, -firePitch * (1.0 - (curDist/minRange)), roll, set:true);
			UpdateVelocity();
		}
	}
	
	virtual void HandleHoming(vector2 spread = (0,0), double strength = 0.6)
	{
		if(!homingTarget || stopHoming) return;
		
		vector3 spreadPos = Quat.FromAngles(angle, pitch, roll) * ( spread.x, spread.y, (homingTarget.height) + ((spread.x + spread.y)*0.5) );
		vector3 targetPos = level.vec3offset(homingTarget.pos, spreadPos);
		double targetDist = DrivablesMath.Distance3D(pos, targetPos);
		double mDist = DrivableMech.unitsToKM(targetDist)*1000.0;
		
		if(firePitch > 1) 
		{
			curDist = (pos - spawnPos).Length();
			curDist = DrivableMech.unitsToKM(curDist) * 1000.0;
			firePitch = default.firePitch * min(0.5, (1.0 - (curDist/minRange))); 
			ModifyRotation(angle, -firePitch, roll, set:true);
		}
		
		if(mDist < minRange)
		{
			firePitch = 0;
			strength = 1.0;
		}
		
		vector3 desiredAngles = DrivablesMath.GetEuler(desiredRotation);
		vector3 homAngles = level.SphericalCoords(
			pos, targetPos, (desiredAngles.x, desiredAngles.y)
		);
		
		vector3 toAngles = homAngles * strength;	
		
		double unitDist = mDist / max(90,minRange);
		if(unitDist < 1.0) 
		{
			double defSpeed = GetSpeedFromKPH(speedKPH);
			Speed = defSpeed * clamp(unitDist, 0.75, 1.0);
			
			vector3 desiredDir = desiredRotation * (1,0,0);
			double slowDown = max(0.1, vel.Unit() dot desiredDir);
			Speed *= (slowDown*slowDown);
			if(!default.firePitch) homingTics++;
		}
		
		ModifyRotation(-toAngles.x, firePitch > 0 ? 0 : -toAngles.y, 0, set:false);
		UpdateVelocity();
		if( (default.firePitch > 0 && unitDist <= 0.1) || homingTics >= (TICRATE*2)) vel.z -= 5;
	}
}