class MechAutocannon : MechProjectile
{
	bool overlay;
	double overlayHeat;
	Actor velSource; // Follows this actor's velocity.

	Default
	{
		MechProjectile.ImpactSound "Generic/Impact";
	}

	override void Tick()
	{
		super.Tick();
		
		if(level.isFrozen()) return;
		
		if(velSource)
			vel = velSource.vel;
		
		if(overlay)
		{
			A_SetRenderStyle(min(0.9, overlayHeat), STYLE_Shaded);
			overlayHeat *= 0.9;			
			return;
		}
		
		HandleRanges();
	}
		
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		if(overlay) return; // Do not produce an infinite recursion loop.
		let projheat = MechAutocannon(Spawn(getClass(), pos));
		if(projheat) 
		{
			// Transfer values, setup afterimage.
			projheat.trueDamage = 0;
			projheat.overlay = true;
			projheat.overlayHeat = 1.0;
			projheat.velSource = self;
			projheat.vel = vel;
			projheat.angle = angle;
			projheat.pitch = pitch;
			projheat.roll = roll;
			projheat.master = master;
			projheat.target = target;
			
			projheat.SetShade(0xFFFA3a05); 
			projheat.A_SetScale(scale.X*1.1);
		}
	}
	
	override void HandleRanges()
	{
		super.HandleRanges();
		
		if(curDist < 45)
		{
			for(int i = 0; i < 2; i++)
			{
				vector3 posOffs = ( vel * (0.5 + (0.35*i)) );
				let trail = SpawnEffect("AutocannonSmoke", pos - posOffs);
				trail.A_SetScale(0.033 * scale.X);
			}
		}
		else if( curDist < maxRange*1.75 && (Speed - (default.Speed*0.5)) > 0.1 )
		{
			Speed = DrivablesMath.Lerp(Speed, default.Speed * 0.5, 0.25);
			UpdateVelocity();
		}
		
		if(curDist > maxRange)
		{
			// Linear damage drop-off to 0 at maxRange * 2;
			double dmgMod = 1.0 - ( (curDist-maxRange) / maxRange );
			trueDamage = default.trueDamage * dmgmod;
			
			if(curDist > maxRange*1.75 && (Speed - (default.Speed*0.25)) > 0.1)
			{
				Speed = DrivablesMath.Lerp(Speed, default.Speed * 0.25, 0.08);
				UpdateVelocity();
			}
		}
		
		// Friction causes loss of lift.
		if(curDist > maxRange*2.0)
		{
			vel.z -= 0.25;
			if(pitch < 90) pitch += 1;
		}
	}
	
	virtual void DoDebris()
	{
		if(overlay || !bMISSILE) return; // Overlays do not have debris.

		Array<Actor> debris;
		EffectsHelper.SpawnFX("AutocannonDebris", random[DebrisAmt](10,20), pos, (angle+180, -pitch, roll), 3, (5,5,5), (45,30,0), 3, debris);
		for(int i = 0; i < debris.Size(); i++)
			if(debris[i]) debris[i].A_SetScale(debris[i].Scale.X * Scale.X);
	}
	
	States
	{	
		Crash:
		Death:
		XDeath:
			TNT1 A 1 DoDebris();
		stop;
	}
}

class AutocannonDebris : EffectsActor
{
	vector3 angleVel;
	
	Default
	{
		RenderStyle "Translucent";
		Scale 0.25;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		angleVel = (
			frandom[DebrisMovement](-1.,1.),
			frandom[DebrisMovement](-1.,1.),
			frandom[DebrisMovement](-1.,1.)
		) * 3;
		
		A_SetScale(Scale.X * frandom[DebrisLooks](0.75,1.25));
		
	}

	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		A_SetAngle(angle + angleVel.x, SPF_INTERPOLATE);
		A_SetPitch(pitch + angleVel.y, SPF_INTERPOLATE);
		A_SetRoll(roll + angleVel.z, SPF_INTERPOLATE);
		
		// Gravity
		vel.z -= 0.1;
		
		// Floor check
		if(pos.z <= floorz) 
		{
			vel.z = 0;
			vel.xy *= 0.90; // Friction.
			angleVel *= 0.75;
			
			alpha -= 0.01;
		}
		
		if(alpha <= 0.01) 
		{
			Destroy();
			return;
		}
		SetOrigin(level.vec3offset(pos, vel), true);
	}

	States
	{
		Spawn:
			MODL A -1;
		stop;
	}
}

class AutocannonSmoke : MissileSmokeTrail
{
	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		// Gravity
		vel.z += 0.01;
		A_SetScale(Scale.X * 1.1);
		alpha -= 0.02;
		SetOrigin(level.vec3offset(pos, vel), true);
	}
}

class Autocannon2 : MechAutocannon
{
	Default
	{
		Radius 4;
		Height 4;
		MechProjectile.Dmg 2 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 900;
		Scale 1.0;
		Speed 80;
	}
	
	States
	{
		Spawn:
			MODL A -1;
		loop;
	}
}

class Autocannon5 : Autocannon2
{
	Default
	{
		Radius 6;
		Height 6;
		MechProjectile.Dmg 5 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 720;
		Scale 1.25;
		Speed 60;
	}
}
class Autocannon10 : Autocannon2
{
	Default
	{
		Radius 8;
		Height 8;
		MechProjectile.Dmg 10 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 540;
		Scale 1.5;
		Speed 50;
	}
	
	States
	{	
		Crash:
		Death:
		XDeath:
			TNT1 A 0 
			{
				DoDebris();
				bBRIGHT = true;
				A_SetScale(scale.X * 0.1);
			}
			MTRL ABCDEFGHIJKLMNOPQR 1;
			MTRL S 1 A_FadeOut();
		wait;
	}
}
class Autocannon20 : Autocannon10
{
	Default
	{
		Radius 12;
		Height 12;
		MechProjectile.Dmg 20 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 360;
		Scale 2.0;
		Speed 40;
	}
}

// PPC
class PPC : MechProjectile
{
	Default
	{
		Speed 30;
		RenderStyle "Add";
		Scale 0.25;
		MechProjectile.Ranges 90, 1000;
	}

	override void Tick()
	{
		super.Tick();
		
		if(level.isFrozen()) return;
		
		HandleRanges();
	}

	override void HandleRanges()
	{
		super.HandleRanges();
		
		if(curDist > maxRange*2.0)
		{
			Destroy();
			return;
		}
	}
	
	States
	{	
		Spawn:
			PPCF A 2
			{
				for(int i = 0; i < 12; i++)
				{
					vector3 posmod = vel.Unit() * (5 * i);
					let trail = Spawn("PPCTrail", level.vec3offset(pos, -posmod));
					if(trail) trail.A_SetScale(trail.default.Scale.X * Scale.X);
				}
			}
		loop;
		
		Crash:
		Death:
		XDeath:
			TNT1 A 1
			{
				// PPC explosion
			}
		stop;
	}
}

class PPCTrail : EffectsActor
{
	Default
	{
		RenderStyle "Add";
		Alpha 1.0;
		+BRIGHT;
	}

	States
	{
		Spawn:	
			PPCB A 1 
			{
				A_FadeOut(0.07);
				A_SetScale(Scale.X * 0.94);
			}
		wait;
	}
}