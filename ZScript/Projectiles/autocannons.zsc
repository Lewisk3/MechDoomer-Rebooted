class MechAutocannon : MechProjectile
{
	bool overlay;
	bool generateOverlay;
	bool doSmoke;
	double overlayHeat;
	Actor velSource; // Follows this actor's velocity.
	Property CreateOverlay : generateOverlay;
	Property SmokeTrail : doSmoke;

	Default
	{
		MechProjectile.ImpactSound "Generic/Impact";
		MechAutocannon.CreateOverlay true;
		MechAutocannon.SmokeTrail true;
	}

	override void Tick()
	{
		super.Tick();
		
		if(level.isFrozen()) return;
		
		if(velSource)
			vel = velSource.vel;
		
		if(overlay)
		{
			A_SetRenderStyle(min(0.9, overlayHeat), STYLE_AddShaded);
			overlayHeat *= 0.97;			
			return;
		}
		
		HandleRanges();
	}
		
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		let muzzleFlash = SpawnEffect("AutocannonMuzzleFlash", pos);
		
		// Scale muzzle flash depending on damage.
		if(muzzleFlash) 
		{
			muzzleFlash.A_SetScale(muzzleFlash.Scale.X * min(1, max(0.25,trueDamage / 20.0)));
			if(mech) muzzleFlash.vel = mech.vel;
		}
		
		if(overlay || !generateOverlay) return; // Do not produce an infinite recursion loop.
		let projheat = MechAutocannon(Spawn(getClass(), pos));
		if(projheat) 
		{
			// Transfer values, setup afterimage.
			projheat.trueDamage = 0;
			projheat.overlay = true;
			projheat.overlayHeat = 1.0;
			projheat.velSource = self;
			projheat.vel = vel;
			projheat.angle = angle;
			projheat.pitch = pitch;
			projheat.roll = roll;
			projheat.master = master;
			projheat.target = target;
			projheat.bBRIGHT = true;
			
			projheat.SetShade(0xFFFA3a05); 
			projheat.A_SetScale(scale.X*1.1);
		}
	}
	
	override void HandleRanges()
	{
		super.HandleRanges();
		
		double launchSpeed = getBaseSpeed();
		if(curDist < 120 && doSmoke)
		{
			for(int i = 0; i < 2; i++)
			{
				vector3 posOffs = ( vel * (0.5 + (0.35*i)) );
				let trail = SpawnEffect("AutocannonSmoke", pos - posOffs);
				trail.A_SetScale(0.033 * scale.X);
			}
		}
		else if( curDist < maxRange*1.75 && (Speed - (launchSpeed*0.5)) > 0.1 )
		{
			Speed = DrivablesMath.Lerp(Speed, launchSpeed * 0.5, 0.25);
			UpdateVelocity();
		}
		
		if(curDist > maxRange)
		{
			// Linear damage drop-off to 0 at maxRange * 2;
			double dmgMod = 1.0 - ( (curDist-maxRange) / maxRange );
			trueDamage = default.trueDamage * dmgmod;
			
			if(curDist > maxRange*1.75 && (Speed - (launchSpeed*0.25)) > 0.1)
			{
				Speed = DrivablesMath.Lerp(Speed, launchSpeed * 0.25, 0.08);
				UpdateVelocity();
			}
		}
		
		// Friction causes loss of lift.
		if(curDist > maxRange*2.0)
		{
			vel.z -= 0.25;
			if(pitch < 90) pitch += 1;
		}
	}
	
	virtual void DoDebris()
	{
		if(overlay || died) return; // Overlays do not have debris.

		Array<Actor> debris;
		EffectsHelper.SpawnFX("AutocannonDebris", random[DebrisAmt](10,20), pos, (angle+180, -pitch, roll), 3, (5,5,5), (45,30,0), 3, spawnedActors:debris);
		EffectsHelper.SpawnFX("MissileEmber", 20, pos, (angle+180, -pitch, roll), 3, (5,5,6), (45,30,0), 3);
		for(int i = 0; i < debris.Size(); i++)
		{
			if(debris[i]) AutocannonDebris(debris[i]).debrisScale = scale.X;
		}
		
		died = true;
	}
	
	States
	{	
		Crash:
		Death:
		XDeath:
			TNT1 A 1 DoDebris();
		stop;
	}
}

class AutocannonDebris : EffectsActor
{
	vector3 angleVel;
	double debrisScale;
	
	Default
	{
		RenderStyle "Translucent";
		Scale 0.25;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		angleVel = (
			frandom[DebrisMovement](-1.,1.),
			frandom[DebrisMovement](-1.,1.),
			frandom[DebrisMovement](-1.,1.)
		) * 3;
		
		A_SetScale(default.Scale.X * frandom[DebrisLooks](0.75,1.25) * debrisScale);
	}

	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		A_SetAngle(angle + angleVel.x, SPF_INTERPOLATE);
		A_SetPitch(pitch + angleVel.y, SPF_INTERPOLATE);
		A_SetRoll(roll + angleVel.z, SPF_INTERPOLATE);
		
		// Gravity
		vel.z -= 0.1;
		
		// Floor check
		if(pos.z <= floorz) 
		{
			vel.z = 0;
			vel.xy *= 0.90; // Friction.
			angleVel *= 0.75;
			
			alpha -= 0.01;
		}
		
		if(alpha <= 0.01) 
		{
			Destroy();
			return;
		}
		SetOrigin(level.vec3offset(pos, vel), true);
	}

	States
	{
		Spawn:
			MODL A -1;
		stop;
	}
}

class AutocannonSmoke : MissileSmokeTrail
{
	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		// Gravity
		vel.z += 0.01;
		A_SetScale(Scale.X * 1.1);
		alpha -= 0.02;
		SetOrigin(level.vec3offset(pos, vel), true);
	}
}

class Autocannon2 : MechAutocannon
{
	Default
	{
		Radius 4;
		Height 4;
		MechProjectile.Dmg 2 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 900;
		Scale 1.0;
		MechProjectile.SpeedKPH 1800;
	}
	
	States
	{
		Spawn:
			MODL A -1;
		loop;
	}
}

class Autocannon5 : Autocannon2
{
	Default
	{
		Radius 6;
		Height 6;
		MechProjectile.Dmg 5 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 720;
		Scale 1.25;
		MechProjectile.SpeedKPH 1500;
	}
}
class Autocannon10 : Autocannon2
{
	Default
	{
		Radius 8;
		Height 8;
		MechProjectile.Dmg 10 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 540;
		Scale 1.5;
		MechProjectile.SpeedKPH 1300;
	}
	
	States
	{	
		Crash:
		Death:
		XDeath:
			TNT1 A 1 
			{
				if(!overlay)
				{
					DoDebris();
					SpawnEffect("AutocannonExplosion", pos);
				}
			}
		stop;
	}
}
class Autocannon20 : Autocannon10
{
	Default
	{
		Radius 12;
		Height 12;
		MechProjectile.Dmg 20 / MechHardpoint.DMGSCALE;
		MechProjectile.Ranges 0, 360;
		Scale 2.0;
		MechProjectile.SpeedKPH 1100;
	}
}

// Explosion
class AutocannonExplosion : EffectsActor
{
	Default
	{
		RenderStyle "Add";
		+ROLLSPRITE;
	}
	
	override void PostBeginPlay()
	{
		super.postBeginPlay();
		A_SetRoll(frandom(0,360));
	}

	States
	{	
		Spawn:
			TNT1 A 0; // Why does NoDelay NEVER behave as intended for me!?!?!?
			TNT1 A 0
			{
				bBRIGHT = true;
				A_SetScale(scale.X * 0.3);
			}
			TNT1 A 0 A_JumpIf(true, "Explosion"); // Needed so that the Explosion state sequence can be overwritten.
			
		Explosion:
			MTRL ABCDEFGHIJKLMNOPQR 1;
			MTRL S 1 A_FadeOut(0.35);
		wait;
	}
}

class AutocannonMuzzleFlash : AutocannonExplosion
{
	Default
	{
		Scale 1.5;
	}
	
	override void Tick()
	{
		super.Tick();
		SetOrigin(level.vec3offset(pos, vel), true);
	}

	States
	{
		Explosion:
			FX58 ABCDEFGHIJKLMNOP 1;
			FX58 Q 1 A_FadeOut(0.35);
		wait;
	}
}

// Machine gun
class MGBullet : MechAutocannon
{
	Default
	{	
		Radius 1;
		Height 1;
		Scale 0.2;
		MechProjectile.Dmg 0.06 / MechHardpoint.DMGSCALE; // Roughly 1 damage a second.
		MechProjectile.Ranges 0, 100;
		MechProjectile.SpeedKPH 1200;
		MechProjectile.ImpactSound "MGun/Impact";
		MechAutocannon.CreateOverlay false;
		MechAutocannon.SmokeTrail false;
	}
		
	override void PostBeginPlay()
	{
		super.postBeginPlay();
		let flash = SpawnEffect("MGMuzzleFlash", pos);
		if(flash && mech) 
		{
			flash.angle = angle;
			flash.pitch = pitch;
			flash.vel = mech.vel;
		}
		
		double unitRange = DrivableMech.MetersToUnits(maxRange);
		vector3 finalPos = level.vec3offset(pos, Quat.FromAngles(angle, pitch, 0) * (unitRange,0,0));
		let beam = RailgunBeam.Start(0xFF7F7F7F, pos, level.vec3offset(pos, finalPos), (angle,pitch), 0.15, 1.0); 
		if(beam && mech) beam.vel = mech.vel;
	}	
	
	override void HandleRanges()
	{
		super.HandleRanges();
		if(curDist >= maxRange) Destroy();
	}

	override void DoDebris()
	{
		if(died) return;
		SpawnEffect("AutocannonExplosion", pos);
		died = true;
	}

	States
	{
		Spawn:
			MODL A -1;
		stop;
	}
}

class MGMuzzleFlash : AutocannonMuzzleFlash
{ 
	Default
	{
		Scale 10.0;
	}

	override void PostBeginPlay()
	{
		super.postBeginPlay();
		A_SetAngle(angle + frandom[MGFX](-3,3));
		A_SetScale(Scale.X * frandom[MGFX](0.8,1.1));
	}
	
	States
	{
		Explosion:
			MODL A 2 BRIGHT;
		stop;
	}
}