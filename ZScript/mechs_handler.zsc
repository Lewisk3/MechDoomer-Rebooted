class MechInteraction_Handler : EventHandler
{
	Array<DrivableMech> mechlab_curmech;
	
	override void OnRegister()
	{
		super.OnRegister();
		mechlab_curmech.Resize(MAXPLAYERS);
	}

	// Setup MechItems for players
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo plrInfo = players[i];
			if(!plrInfo || !playerInGame[i]) continue;
			let plr = players[i].mo;
			I_MechItemStorage.Get(plr);
			
			let mechData = I_SaveMechData(plr.FindInventory("I_SaveMechData"));
			if(!mechData) plr.GiveInventory("I_SaveMechData", 1);
		}	
	}

	play void OpenMechlab(int PID, DrivableMech mech)
	{
		if(!mech) return;
		
		mechlab_curmech[PID] = mech;
		if(PID == consoleplayer) 
		{
			Menu.SetMenu("MechMenu_Mechlab");
			SendInterfaceEvent(PID, "mechlab.update");
		}
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		// Call vehicle travelling virtuals
		let it = ThinkerIterator.Create("DrivableObject");
		DrivableObject vehicle;
		while(vehicle = DrivableObject(it.Next())) 
			vehicle.PreTravelled();
	}
	
	override void InterfaceProcess(ConsoleEvent e)
	{	
		string cmd = e.Name;
		let plr = players[consoleplayer].mo;
		
		let mechlab = MechMenu_Mechlab(Menu.getCurrentMenu());
		if(mechlab) 
		{
			mechlab.processPlayEvent(consoleplayer, e.Name);
			
			if(cmd == 'mechlab.update')
			{
				mechlab.invSource = plr;
				mechlab.mech = mechlab_curmech[consoleplayer];
				mechlab.InitElements();
			}
		}
	}
			
	// Moar keys
	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo plr = players[e.Player];
		if(!plr || !plr.mo) return;
		
		let drvObj = I_DrivingObject.Get(plr.mo);
		string cmd = e.Name;
		
		if(drvObj && drvObj.source) 
		{
			bool btnState = cmd.IndexOf("+") != -1 ? true : false; 
			cmd.Remove(0,1);
			cmd = cmd.MakeLower();
			
			if(cmd ~== "mw_groupprev" ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPPREV, btnState);
			if(cmd ~== "mw_groupnext" ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPNEXT, btnState);
			if(cmd ~== "mw_weaponprev") drvObj.source.setExtBtn(DrivableMech.BT_WEAPPREV,  btnState);
			if(cmd ~== "mw_weaponnext") drvObj.source.setExtBtn(DrivableMech.BT_WEAPNEXT,  btnState);
			
			if(cmd ~== "mw_grouptoggle"   ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPSET,  btnState);
			if(cmd ~== "mw_groupchainfire") drvObj.source.setExtBtn(DrivableMech.BT_GROUPCHF,  btnState);
			
			if(cmd ~== "mw_armlock"   ) drvObj.source.setExtBtn(DrivableMech.BT_ARMLOCK,    btnState);
			if(cmd ~== "mw_torsolock" ) drvObj.source.setExtBtn(DrivableMech.BT_TORSOLOCK,  btnState);
			if(cmd ~== "mw_alignlegs" ) drvObj.source.setExtBtn(DrivableMech.BT_ALIGNLEGS,  btnState);
			if(cmd ~== "mw_aligntorso") drvObj.source.setExtBtn(DrivableMech.BT_ALIGNTORSO, btnState);
			if(cmd ~== "mw_stopmech"  ) drvObj.source.setExtBtn(DrivableMech.BT_STOPMECH,   btnState);
			if(cmd ~== "mw_peekinventory") drvObj.source.setExtBtn(DrivableMech.BT_PEEKINV, btnState);
			
			if(cmd ~== "mw_gettarget")  drvObj.source.setExtBtn(DrivableMech.BT_GETTARGET, btnState);
			if(cmd ~== "mw_powercycle") drvObj.source.setExtBtn(DrivableMech.BT_POWERCYCLE, btnState);
			if(cmd ~== "mw_overrideshutdown") drvObj.source.setExtBtn(DrivableMech.BT_OVRSHUTDWN, btnState);
			if(cmd ~== "mw_toggleweaponstate") drvObj.source.setExtBtn(DrivableMech.BT_WEAPONSTATE, btnState);
					
			if(cmd ~== "mw_openmechlab")
				OpenMechlab(e.Player, DrivableMech(drvObj.source));
		}
		
		if(cmd ~== "+mw_opendronemenu")
			Menu.SetMenu("DroneMenu", e.Player);
		
		MechMenu_Mechlab.processMechlabEvents(e, mechlab_curmech[e.Player]);
		
		// Cheats and Debug
		Array<string> args;
		cmd.Split(args, ".");
		cmd = args[0];
		
		if(cmd ~== "inv")
		{
			let inv = I_MechItemStorage.Get(plr.mo, give:false);
			let item = (class<MechItem>)(args[2]);
			if(!inv || !item) return;
			
			if(args[1] == "give")
			{
				inv.AddItem(MechItem.Init(item));
				console.printf("Received: %s.", item.getClassName());
			}
		}
	}
}