class MechInteraction_Handler : EventHandler
{
	Array<DrivableMech> mechlab_curmech;
	
	override void OnRegister()
	{
		super.OnRegister();
		mechlab_curmech.Resize(MAXPLAYERS);
	}
		
	// Setup MechItems for players
	override void WorldTick()
	{
		for(int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo plrInfo = players[i];
			if(!plrInfo || !playerInGame[i]) continue;
			let plr = players[i].mo;
			
			let mechData = I_SaveMechData(plr.FindInventory("I_SaveMechData"));
			if(!mechData) plr.GiveInventoryType("I_SaveMechData");
			
			// Give player a repair drone
			if(!plr.FindInventory("RepairDrone"))
				plr.GiveInventoryType("RepairDrone");
		}	
	}

	play void OpenMechlab(int PID, DrivableMech mech)
	{
		if(!mech) return;
		
		mechlab_curmech[PID] = mech;
		if(PID != consoleplayer) return;
		
		Menu.SetMenu("MechMenu_Mechlab");
		SendInterfaceEvent(PID, "mechlab.update");
	}
	
	play void OpenShop(int PID)
	{
		if(PID != consoleplayer) return;
		Menu.SetMenu("ShopMenu");
		SendInterfaceEvent(PID, "shop.update");
	}
	
	play void OpenMechbayMenu(int PID)
	{
		if(PID != consoleplayer) return;
		Menu.SetMenu("MechbayMenu");
		SendInterfaceEvent(PID, "mechbays.update");
	}
	
	play void OpenMechRepairMenu(int PID, DrivableMech mech)
	{
		if(!mech) return;
		
		mechlab_curmech[PID] = mech;
		if(PID != consoleplayer) return;
		
		Menu.SetMenu("MechRepairMenu");
		SendInterfaceEvent(PID, "repairmenu.update");
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		// Call vehicle travelling virtuals
		let it = ThinkerIterator.Create("DrivableObject");
		DrivableObject vehicle;
		while(vehicle = DrivableObject(it.Next())) 
			vehicle.PreTravelled();
	}
	
	override void InterfaceProcess(ConsoleEvent e)
	{	
		string cmd = e.Name;
		let plr = players[consoleplayer].mo;
		
		let mdrMenu = MechMenu(Menu.getCurrentMenu());
		if(mdrMenu) mdrMenu.processPlayEvent(consoleplayer, e.Name);		
	}
	
	// Item information canvases
	override void RenderOverlay(RenderEvent e)
	{
		double FOV = e.Camera.player ? e.Camera.player.FOV : e.Camera.CameraFOV;
		let vp = MWDrawer.GetRenderEventViewProj(e, FOV);
	
		let astIt = ThinkerIterator.Create("MunitionsStation");
		MunitionsStation st;		
		
		while(st = MunitionsStation(astIt.Next()))
		{
			// Project text information
			bool infront; vector2 textPos;
			[infront, textPos] = MWDrawer.GetActorHUDPos(vp, st, 45, 10, 20, rotatecoords:false, rotatewithactor:true);
			if(!infront) continue;
			
			double txtScale = 1.0 - (DrivablesMath.fmap(e.Camera.Distance3D(st), 64, 512, 0, 1.0));
			txtScale = clamp(txtScale, 0, 1.0);
			
			string munitionsText = String.Format("\c[Sapphire]MUNITIONS STATION\n\t\t\t\c[Orange]Capacity %d\%%", st.munitions);
			
			MWDrawer.DrawString("SmallFont", munitionsText, textPos, scale:(txtScale,txtScale), absolute:true);
		}
	
		/* Munition Station Canvas
		Canvas cv = TexMan.GetCanvas("AmmoStationCanvas");
		TextureID infoTex = TexMan.CheckForTexture("AmmoStationCanvas");
		
		let astIt = ThinkerIterator.Create("MunitionsStation");
		MunitionsStation st;
		while(st = MunitionsStation(astIt.Next()))
		{
			// Resolution
			int w, h;
			[w, h] = TexMan.GetSize(infoTex);
			
			string ammoStr = String.Format("Ammo: %d", st.munitions);
			
			cv.Dim(0xFF000000, 1.0, 0,0, w,h);
			cv.DrawText("SmallFont", Font.CR_WHITE, 20,20, ammoStr);
			//cv.Dim(0xFFFF0000, 1.0, (w * 0.5) - 20, (h * 0.5) - 20, 40,40); 
		}
		*/
	}
	
	// Moar keys
	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo plr = players[e.Player];
		if(!plr || !plr.mo) return;
		
		let drvObj = I_DrivingObject.Get(plr.mo);
		string cmd = e.Name;
		
		if(drvObj && drvObj.source) 
		{
			bool btnState = cmd.IndexOf("+") != -1 ? true : false; 
			cmd.Remove(0,1);
			cmd = cmd.MakeLower();
			
			if(cmd ~== "mw_groupprev" ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPPREV, btnState);
			if(cmd ~== "mw_groupnext" ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPNEXT, btnState);
			if(cmd ~== "mw_weaponprev") drvObj.source.setExtBtn(DrivableMech.BT_WEAPPREV,  btnState);
			if(cmd ~== "mw_weaponnext") drvObj.source.setExtBtn(DrivableMech.BT_WEAPNEXT,  btnState);
			
			if(cmd ~== "mw_grouptoggle"   ) drvObj.source.setExtBtn(DrivableMech.BT_GROUPSET,  btnState);
			if(cmd ~== "mw_groupchainfire") drvObj.source.setExtBtn(DrivableMech.BT_GROUPCHF,  btnState);
			
			if(cmd ~== "mw_armlock"   ) drvObj.source.setExtBtn(DrivableMech.BT_ARMLOCK,    btnState);
			if(cmd ~== "mw_torsolock" ) drvObj.source.setExtBtn(DrivableMech.BT_TORSOLOCK,  btnState);
			if(cmd ~== "mw_alignlegs" ) drvObj.source.setExtBtn(DrivableMech.BT_ALIGNLEGS,  btnState);
			if(cmd ~== "mw_aligntorso") drvObj.source.setExtBtn(DrivableMech.BT_ALIGNTORSO, btnState);
			if(cmd ~== "mw_stopmech"  ) drvObj.source.setExtBtn(DrivableMech.BT_STOPMECH,   btnState);
			if(cmd ~== "mw_peekinventory") drvObj.source.setExtBtn(DrivableMech.BT_PEEKINV, btnState);
			
			if(cmd ~== "mw_gettarget")  drvObj.source.setExtBtn(DrivableMech.BT_GETTARGET, btnState);
			if(cmd ~== "mw_powercycle") drvObj.source.setExtBtn(DrivableMech.BT_POWERCYCLE, btnState);
			if(cmd ~== "mw_overrideshutdown") drvObj.source.setExtBtn(DrivableMech.BT_OVRSHUTDWN, btnState);
			if(cmd ~== "mw_toggleweaponstate") drvObj.source.setExtBtn(DrivableMech.BT_WEAPONSTATE, btnState);
			if(cmd ~== "mw_itemmagnet") drvObj.source.setExtBtn(DrivableMech.BT_ITEMMAGNET, btnState);
			if(cmd ~== "mw_repairdrone") drvObj.source.setExtBtn(DrivableMech.BT_DRONEREPAIR, btnState);
					
			if(cmd ~== "mw_openmechlab")
				OpenMechlab(e.Player, DrivableMech(drvObj.source));
		}
		
		if(cmd ~== "mw_openshopmenu")
			OpenShop(e.Player);
			
		if(cmd ~== "mw_openmechbaymenu")
			OpenMechbayMenu(e.Player);
		
		/*
		if(cmd ~== "mw_debug_openmechrepair")
		{
			let mechData = I_SaveMechData(plr.mo.FindInventory("I_SaveMechData"));
			OpenMechRepairMenu(e.Player, mechData.getMechbayMech(1));
		}
		*/
					
		/*
		if(cmd ~== "+mw_opendronemenu")
			Menu.SetMenu("DroneMenu", e.Player);
		
		DroneMenu.processDroneMenuEvents(e, e.Args[0]); 
		*/
		
		MechMenu_Mechlab.processMechlabEvents(e, mechlab_curmech[e.Player]);
		ShopMenu.processShopMenuEvents(e);
		MechbayMenu.processMechbayMenuEvents(e);
		MechRepairMenu.processRepairMenuEvents(e);

		// Cheats and Debug
		Array<string> args;
		cmd.Split(args, ".");
		cmd = args[0];
		
		if(cmd ~== "inv")
		{
			let inv = I_MechItemStorage.Get(plr.mo, give:false);
			
			if(args[1] == "give")
			{
				let item = (class<MechItem>)(args[2]);
				if(!inv || !item) return;
			
				inv.AddItem(MechItem.Init(item));
				console.printf("Received: %s.", item.getClassName());
			}
			
			if(args[1] == "printmoney")
			{
				inv.cbills += args[2].ToInt();
				console.printf("Printed %s more cbills. (You should run for presidency next!)", args[2]);
			}
		}
	}
}