
class ShopItemsContainer : MenuElement
{
	enum ListingModes
	{
		LIST_WEAPONS = 0,
		LIST_UTILITIES = 1,
		LIST_ENGINES = 2,
		LIST_MECHS 	 = 3
	};
		
	int listingMode;
	int containerType;

	ShopMenu base;
	double alpha;
	string itemSearch;
	
	double scroll, scrollVel;
	double listHeight; // Maximum height of items stored in list.
	Array<MechItem> items;
	Array<class<DrivableMech> > mechs;
	ShopScrollBar scrollBar;
	
	override void Init()
	{	
		super.Init();
		
		alpha = 1.0;
		base = ShopMenu(parentMenu);
		listingMode = LIST_WEAPONS;
		
		vector2 scrollBarPos = pos + (size.x - 40, 0);
		scrollBar = ShopScrollBar(AddChild(base, "ShopScrollBar","ScrollBar", scrollBarPos));
		scrollBar.size.x = 40;
		
		AddChild(base, "ShopSearchBar", "SearchBar", pos + (10,-65), (450,32));
	}
	
	virtual void Setup(out Array<MechItem> items, out Array<class<DrivableMech> > mechs, int containerType)
	{
		if(items) self.items.Copy(items);
		if(mechs) self.mechs.Copy(mechs);
		self.containerType = containerType;
		populateChildren();
	}
	
	void populateChildren()
	{
		ClearChildren(base, "ShopItem");
		int itemY = 0;
		int itemIndex = 0;
		listHeight = 0;	
		
		Array<MechItem> sortedItems;
		Array<string> searchKeywords;
		string normalizedSearch = itemSearch.MakeLower();
		normalizedSearch.Split(searchKeywords, " ");
		
		// Sort items based on search relevancy
		if(searchKeywords.Size() > 0)
		{
			// Grade items
			Array<int> relevancy;
			relevancy.Resize(items.Size());
			
			for(int i = 0; i < items.Size(); i++)
			{
				let item = items[i];
				
				int matches = 0;
				foreach(keyword : searchKeywords)
				{
					string itemName = item.displayName.MakeLower();
					if(itemName.IndexOf(keyword) != -1) matches++;
				}
				relevancy[i] = matches >= searchKeywords.Size();
			}
	
			// Sort based on grade
			Array<MechItem> toSort;
			toSort.Copy(items);
			
			int curScore = searchKeywords.Size();
			while(curScore > 0)
			{
				for(int i = toSort.Size()-1; i >= 0; i--)
				{
					if(relevancy[i] == curScore)
						sortedItems.Push(toSort[i]);
				}
				curScore--;
			}
		}
		else sortedItems.Copy(items);
		
		// Populate based on items list.		
		int limit = 1000;
		if(items.Size() > 0 && listingMode != LIST_MECHS)
		{
			foreach(item : sortedItems)
			{
				bool skipItem = false;
				switch(listingMode)
				{
					case LIST_WEAPONS: 
						skipItem = !(item is "MechWeapon" || item is "MechAmmo"); 
					break;
					
					case LIST_UTILITIES: 
						skipItem = !(item is "MechUtility" || item is "AMS" || item is "MechRepairKit"); 
					break;
					
					case LIST_ENGINES:
						skipItem = !(item is "MechEngine");
					break;
				}
				
				// Find item if in cart.
				ShopItem inCartItem;
				foreach(cartItem : base.shopCart)
				{	
					if(cartItem.objItem == item)
					{
						inCartItem = cartItem;
						break;
					}
				}
								
				if(skipItem) continue;
				
				if(item.size > 0)
				{
					let cItem = ShopItem(AddChild(base, "ShopItem", "ShopContainerItem", pos + (30,20 + itemY)));
					cItem.objItem = item;
					cItem.count = item.amount;
					if(inCartItem) cItem.count -= inCartItem.count;
					cItem.Update(0);
					if(containerType == ShopMenu.SHOP_BUYING)
						cItem.infinite = true;
					
					itemY += cItem.size.y + 30;
					itemIndex++;
				}
				if(itemIndex > limit) break;
			}
			listHeight = -(itemY - size.y);
			if(listHeight > 0) listHeight = 0;
		}
	}
	
	void DoSearchFilter(string search)
	{
		itemSearch = search;
		populateChildren();
	}
	
	void ChangeListing(int mode)
	{
		listingMode = mode;
		populateChildren();
	}
	
	override void Draw(double dt)
	{
		int drawFlags = MWDrawer.SS_NOASPECTCORRECTION;
		
		MWDrawer.Fill(0x7F7F7F, pos.x - 4, pos.y - 4, size.x + 8, size.y + 8, alpha, drawFlags);
		MWDrawer.Fill(0x1F1F1F, pos.x, pos.y, size.x, size.y, alpha, drawFlags);
	
		vector2 tabPos = pos + (0,-170);
		double tabWidth = (size.x*0.9) / 4.0;
		
		MWDrawer.Fill(0x7F7F7F, tabPos.x-4, tabPos.y, size.x + 8, 170);
		MWDrawer.Fill(0x3F3F3F, tabPos.x-4, tabPos.y, size.x + 8, 64);
						
		// Simple and quick way of making these tabs functional.
		int tabHovered = -1;
		for(int i = 0; i < 4; i++)
		{
			vector2 checkPos = tabPos + ((tabWidth + 16) * i, 0);
			bool mouseCollision = AABBCollision(base.cursor.pos, base.cursor.size, checkPos, (tabWidth,64));
			if(mouseCollision)
			{
				tabHovered = i;
				if(base.cursor.leftPressed) ChangeListing(i);
			}
		}
			
		DrawTab("\c[White]Weapons", tabPos, tabHovered == 0, (tabWidth,64), listingMode == LIST_WEAPONS);
		tabPos.x += tabWidth + 16;
		DrawTab("\c[White]Utilities", tabPos, tabHovered == 1, (tabWidth,64), listingMode == LIST_UTILITIES);
		tabPos.x += tabWidth + 16;
		DrawTab("\c[White]Engines", tabPos, tabHovered == 2, (tabWidth,64), listingMode == LIST_ENGINES);
		tabPos.x += tabWidth + 16;
		DrawTab("\c[White]Mechs", tabPos, tabHovered == 3, (tabWidth,64), listingMode == LIST_MECHS);
		
		// Container banner
		vector2 bannerPos = pos + (0,-275);
		vector2 bannerSize = (size.x, 90);
		MWDrawer.Fill(0x4A4A4A, bannerPos.x, bannerPos.y, bannerSize.x + 8, bannerSize.y + 8);
		MWDrawer.Fill(0x1A1A1A, bannerPos.x, bannerPos.y, bannerSize.x, bannerSize.y);
		
		vector2 bannerTxtPos = bannerPos + (bannerSize.x * 0.5, (bannerSize.y * 0.5) - 10);
		MWDrawer.DrawString("bt_classic", "\c[Black]"..tag, bannerTxtPos + (4,4), MWDrawer.SS_TEXT_CENTER, scale:(1.5,1.5));
		MWDrawer.DrawString("bt_classic", "\c[White]"..tag, bannerTxtPos, MWDrawer.SS_TEXT_CENTER, scale:(1.5,1.5));
		
	}
	
	void DrawTab(String txt, vector2 tabPos, bool hovered, vector2 tabSize, bool active = false)
	{
		Color outlineColor = 0x3F3F3F;
		Color bgColor = 0x5F5F5F;
		if(hovered)
		{
			outlineColor = 0x7F7F7F;
			bgColor = 0xAFAFAF;
		}
		if(active) outlineColor = bgColor = 0x7F7F7F;
		
		MWDrawer.Fill(outlineColor, tabPos.x - 4, tabPos.y - 4, tabSize.x + 8, tabSize.y + 8);
		MWDrawer.Fill(bgColor, tabPos.x, tabPos.y, tabSize.x, tabSize.y);
	
		vector2 txtPos = tabPos + (tabSize.x * 0.5,tabSize.y * 0.5);
		txtPos.y -= MWDrawer.GetTextHeight("bt_classic", txt) * 0.5;
		MWDrawer.DrawString("bt_classic", txt, txtPos, MWDrawer.SS_TEXT_CENTER);
	}
	
	override void Update(double dT)
	{
		disabled = !(base.shopMode == ShopMenu.SHOP_NEUTRAL || base.shopMode == containerType);
		
		// Update Item scroll position.
		foreach(child : children)
		{
			let shopItm = ShopItem(child);
			if(!shopItm) continue;
			
			// Update scroll
			shopItm.posOffs.y = -scrollBar.curScroll;
		}
	
		scroll = -scrollBar.curScroll;
		scrollBar.itemListHeight = abs(listHeight);
		
		if(CheckCollision(base.cursor, false) && base.cursor.scrollDir != 0)
				scrollVel += (1 * base.cursor.scrollDir * dT);
				
		scrollVel *= 0.96;
		scrollBar.scrollTo += scrollVel;
		
		/* Debug
		if(base.cursor.rightPressed && CheckCollision(base.cursor, false)) 
		{
			listingMode = (listingMode + 1) % 4;
			ChangeListing(listingMode);
			console.printf("Listing mode %d", listingMode);
		}
		*/
	}
}

class ShopSearchBar : MenuElement
{	
	ShopMenu base;
	double alpha;
	bool active;
	double cursorAlphaTimer;
	string buffer;
	string defaultBuffer;
	MDRTextInput searchInput;
	ShopItemsContainer parentContainer;
	
	override void Init()
	{
		base = ShopMenu(parentMenu);
		parentContainer = ShopItemsContainer(parentElement);
		active = false;
		
		buffer = defaultBuffer;
		alpha = 1.0;
	}
	
	override void Draw(double dT)
	{
		string text = searchInput ? searchInput.getText() : buffer;
		if(!searchInput && buffer == "")
			text = "Search Here";
			
		Font searchFont = "hm_type";
		
		double valueWidth  = MWDrawer.GetTextWidth(searchFont, text);
		double valueHeight = MWDrawer.GetTextHeight(searchFont, text, scale:(0.15,0.15));

		MWDrawer.Fill(0x1A1A1A, pos.x, pos.y, size.x, size.y);		
		
		if(!searchInput && buffer == "")
		{
			cursorAlphaTimer += dT;
			double textAlpha = 0.5 + (cos(cursorAlphaTimer * 2)*0.5);
			valueHeight = MWDrawer.GetTextHeight("bt_classic", text);
			MWDrawer.DrawString("bt_classic", text, pos + (5, valueHeight * 0.5), translation:Font.CR_Gray, textAlpha, (1.0,1.0));
		}
		else
			MWDrawer.DrawString(searchFont, text, pos + (5, valueHeight * 0.5), translation:Font.CR_White, alpha, (1.0,1.0));
		
		// Cursor
		if(searchInput)
		{
			cursorAlphaTimer += dT;
			double cursorAlpha = (cos(cursorAlphaTimer * 10)*0.5);
		
			double CursorX = searchInput.getCursorPos(searchFont);// - (fnt.StringWidth(text) * 2.0);
			MWDrawer.DrawString(searchFont, "|", pos + (cursorX + 2, valueHeight * 0.5), translation:Font.CR_GRAY, min(alpha, cursorAlpha + 0.5), (1.0,1.0));
		}
	}
	
	void OpenTextInput()
	{
		searchInput = MDRTextInput.Open(base, "", 50, false, buffer);
		searchInput.ActivateMenu();
		active = true;
	}
	
	void CloseTextInput()
	{	
		if(!searchInput) return;
		searchInput.Close();
		active = false;
	}
	
	override void Update(double dT)
	{
		if(!active && CheckCollision(base.cursor, false) && base.cursor.leftPressed)
			OpenTextInput();
	}
	
	override void processMenuEvent(int mkey, bool fromcontroller)
	{
		switch(mkey)
		{
			case Menu.MKEY_Abort:
				CloseTextInput();
			break;
			
			case Menu.MKEY_Input:
				if(searchInput) buffer = searchInput.GetText();
				if(parentContainer) parentContainer.DoSearchFilter(buffer);
				CloseTextInput();
			break;
		}
	}
}

class CartContainer : MenuElement
{
	ShopMenu base;
	double alpha;
	ShopScrollBar scrollBar;
	double scrollVel;

	override void Init()
	{	
		super.Init();
		
		alpha = 1.0;
		base = ShopMenu(parentMenu);
		
		vector2 scrollBarPos = pos + (size.x - 40, 0);
		scrollBar = ShopScrollBar(AddChild(base, "ShopScrollBar","ScrollBar", scrollBarPos));
		scrollBar.size.x = 40;
		
		AddChild(base, "ShopBuySellButton", "Buy/Sell Button", pos + (0,640), (205,48));
		AddChild(base, "ShopClearCartButton", "Clear Cart Button", pos + (225,640), (205,48));
	}
	
	override void Draw(double dT)
	{
		int drawFlags = MWDrawer.SS_NOASPECTCORRECTION;

		MWDrawer.Fill(0x7F7F7F, pos.x - 4, pos.y - 4, size.x + 8, size.y + 8, alpha, drawFlags);
		MWDrawer.Fill(0x1F1F1F, pos.x, pos.y, size.x, size.y, alpha, drawFlags);
		
		// Draw transaction box
		vector2 trBoxPos = (pos.x, pos.y + size.y + 20);
		
		MWDrawer.Fill(0x7F7F7F, pos.x - 4, (pos.y - 4) + size.y + 4, size.x + 8, 124);
		MWDrawer.Fill(0x101010, trBoxPos.x, trBoxPos.y, size.x, 100);
		
		MWDrawer.DrawString("bt_classic", "\c[Gray]Transaction Cost", trBoxPos + (size.x * 0.5,12), MWDrawer.SS_TEXT_CENTER);
		
		string sellingColor = "\c[Green] +";
		string buyingColor = "\c[Red] -";
		string colStr;
		
		Color leftColor = 0xFF000000;
		Color rightColor = 0xFF000000;
		
		switch (base.shopMode)
		{
			case ShopMenu.SHOP_BUYING:
				colStr = buyingColor;
				leftColor = 0;
				rightColor = 0xFF000000;
			break;
			case ShopMenu.SHOP_SELLING:
				colStr = sellingColor;
				rightColor = 0;
				leftColor = 0xFF000000;
			break;
		}
		
		double cost = getTransactionCBills();
		string price = String.Format("%s%s", colStr, MWDrawer.FormatNumber(abs(cost)));
		MWDrawer.DrawString("hm_thin", price, trBoxPos + (size.x * 0.5,35), MWDrawer.SS_TEXT_CENTER);
		
		double balance = base.PlayerItems.cbills + cost;
		string balString = String.Format("\c[Gray]%s\c[White]", MWDrawer.FormatNumber(balance));
		if(balance < 0) balString = String.Format("\c[Red]%s\c[White]", MWDrawer.FormatNumber(balance));
		MWDrawer.DrawString("hm_thin", "\c[White]= " .. balString, trBoxPos + (size.x * 0.5,65), MWDrawer.SS_TEXT_CENTER);
		
		// CBill Icons
		double priceWidth = MWDrawer.GetTextWidth("hm_thin", price);
		MWDrawer.DrawImage("Graphics/Shop/CBill_Icon.png", trBoxPos + ( 12 + (size.x * 0.5) + (priceWidth * 0.5), 45), scale:(0.8,0.8));
		
		// Direction arrow
		vector2 arrowPos = pos + (-50,size.y * 0.5);

		// Left
		MWDrawer.DrawImage("Graphics/Shop/ShopDirection.png", arrowPos, scale:(0.3,0.3), tint:leftColor);
		
		// Right
		MWDrawer.DrawImage("Graphics/Shop/ShopDirection.png", arrowPos + (0,30), scale:(-0.3,0.3), tint:rightColor);
		
		// Account box
		vector2 acBoxPos = (pos.x, pos.y - 120);
		
		MWDrawer.Fill(0x7F7F7F, acBoxPos.x - 4, acBoxPos.y - 4, size.x + 8, 120);
		MWDrawer.Fill(0x101010, acBoxPos.x, acBoxPos.y, size.x, 100);
		
		MWDrawer.DrawString("bt_classic", "\c[Gray]Account Balance", acBoxPos + (size.x * 0.5,12), MWDrawer.SS_TEXT_CENTER);
		String accBalanceStr = String.Format("\c[White]%s", MWDrawer.FormatNumber(base.PlayerItems.cbills)); 
		MWDrawer.DrawString("hm_thin", accBalanceStr, acBoxPos + (size.x * 0.5,50), MWDrawer.SS_TEXT_CENTER);
		double balanceWidth = MWDrawer.GetTextWidth("hm_thin", accBalanceStr);
		MWDrawer.DrawImage("Graphics/Shop/CBill_Icon.png", acBoxPos + ( 12 + (size.x * 0.5) + (balanceWidth * 0.5), 60), scale:(0.8,0.8));
	}
	
	bool checkValidTransaction()
	{
		double cost = getTransactionCBills();
		return (base.playerItems.cbills + cost) >= 0;
	}
	
	double getTransactionCBills()
	{
		double cost = 0;
		foreach(item : base.shopCart)
		{
			if(item.objItem) 
				cost += item.objItem.GetValue() * item.count;
		}
		
		switch (base.shopMode)
		{
			case ShopMenu.SHOP_BUYING:
				cost = -cost;
			break;
			case ShopMenu.SHOP_SELLING:
				cost *= 0.5;
			break;
		}
		
		return cost;
	}
	
	virtual void ClearCart()
	{
		for(int i = base.shopCart.Size()-1; i >= 0; i--)
		{
			let item = base.shopCart[i];
			if(item) RemoveFromCart(item, item.count);
		}
	}
	
	virtual void RemoveFromCart(ShopItem shopItm, double amt = 1)
	{		
		int cartItemIndex;
		ShopItem cartItem = NULL;
		foreach(item : base.shopCart)
		{
			cartItemIndex++;
			if(item.IsSameitem(shopItm))
			{
				cartItem = item;
				break;
			}
		}
		if(!cartItem) return;

		if(shopItm.objItem)
		{
			cartItem.count-=amt;

			// Restore count to old item
			foreach(menuItem : base.elements)
			{		
				// Skip the cart item element.
				if(menuItem == shopItm) continue;
				
				let sItem = ShopItem(menuItem);
				if(sItem && sItem.objItem == shopItm.objItem)
				{
					sItem.count+=amt;
					break;
				}
			}
			
			if(cartItem.count <= 0)
			{
				base.shopCart.Delete(cartItemIndex-1);
				RemoveChild(shopItm);
			}
		}
		else if(shopItm.clsMech)
		{
			// Add mech to cart.
		}
		
		if(base.shopCart.Size() <= 0)
			base.shopMode = ShopMenu.SHOP_NEUTRAL;
	}
	
	virtual void AddToCart(ShopItem shopItm)
	{
		// Grab item container
		let itemContainer = ShopItemsContainer(shopItm.parentElement);
		if(!itemContainer) return;
		
		if( !(base.shopMode == ShopMenu.SHOP_NEUTRAL || itemContainer.containerType == base.shopMode) )
			return; // Invalid item for current shopping mode.
		
		// Update shop mode to container type.
		base.shopMode = itemContainer.containerType;
		
		ShopItem cartItem = NULL;
		foreach(item : base.shopCart)
		{
			if(item.IsSameItem(shopItm))
			{
				cartItem = item;
				break;
			}
		}
		
		if(shopItm.objItem)
		{
			// Add child shopItem to container if not already present in the shopping cart.
			if(!cartItem)
			{
				let cartMenuItem = ShopItem(AddChild(base, "ShopItem", "CartItem", pos));
				cartMenuItem.objItem = shopItm.objItem;
				cartMenuItem.count = 1;
				cartMenuItem.Update(0);
				cartMenuItem.inCart = true;
								
				base.shopCart.push(cartMenuItem);
			}
			else cartItem.count++;
			shopItm.count--;
		}
		else if(shopItm.clsMech)
		{
			// Add mech to cart.
		}
	}
	
	override void Update(double dT)
	{
		// Get list height from shopping cart.
		// Update positions
		double listHeight = 0;
		int itemY = 0;
		foreach(item : base.shopCart)
		{
			item.posOffs = (10, 5 + itemY - scrollBar.curScroll);
			itemY += item.size.y + 30;
		}
		listHeight = -(itemY - size.y);
		if(listHeight > 0) listHeight = 0;
		scrollBar.itemListHeight = abs(listHeight);
		
		if(CheckCollision(base.cursor, false) && base.cursor.scrollDir != 0)
			scrollVel += (1 * base.cursor.scrollDir * dT);
				
		scrollVel *= 0.96;
		scrollBar.scrollTo += scrollVel;
		
		if(base.shopCart.Size() <= 0)
			base.shopMode = ShopMenu.SHOP_NEUTRAL;
	}
}

class ShopBuySellButton : MenuButton
{
	string btnText;
	ShopMenu base;
	CartContainer shoppingCart;
	
	override void Init()
	{
		base = ShopMenu(parentMenu);
		shoppingCart = CartContainer(parentElement);
	}

	override void Draw(double dT)
	{
		Color bgColor = 0x7F7F7F;
		Color fgColor = 0x9F9F9F;
		int txtColor = Font.CR_GRAY;
		
		if(disabled)
		{
			bgColor = 0x2F2F2F;
			fgColor = 0x7F7F7F;
			txtColor = Font.CR_BLACK;
		}
		else if(hovered)
		{
			bgColor = 0xAFAFAF;
			fgColor = 0xCFCFCF;
			txtColor = Font.CR_WHITE;
		}
	
		// Draw button background
		MWDrawer.Fill(bgColor, pos.x - 4, pos.y - 4, size.x + 8, size.y + 8);
		MWDrawer.Fill(fgColor, pos.x, pos.y, size.x, size.y);
		
		vector2 btnTextPos = pos + (size.x * 0.5, (size.y * 0.5) - (MWDrawer.GetTextHeight("bt_classic", tag) * 0.5));
		MWDrawer.DrawString("bt_classic", btnText, btnTextPos, MWDrawer.SS_TEXT_CENTER, translation:txtColor);
	}
	
	override void Update(double dT)
	{
		super.Update(dT);
		btnText = "???";
		switch(base.shopMode)
		{
			case base.SHOP_BUYING:
				btnText = "Buy Items";
			break;
			case base.SHOP_SELLING:
				btnText = "Sell Items";
			break;
			default:
				btnText = "Buy/Sell Items";
			break;
		}
		
		disabled = (!shoppingCart || !shoppingCart.checkValidTransaction()) || base.shopMode == base.SHOP_NEUTRAL;
	}
	
	override void OnPressed()
	{
		base.completeTransaction();
		pressed = false;
		
		GFXMenuItem.AddEffect(base.GFX, "GFX_CBills", base.cursor.pos, 25);
	}
}

class ShopClearCartButton : ShopBuySellButton
{
	override void Update(double dT)
	{
		super.Update(dT);
		
		btnText = "Clear Cart";		
		disabled = (!shoppingCart || base.shopCart.Size() <= 0) || base.shopMode == base.SHOP_NEUTRAL;
	}
	
	override void OnPressed()
	{
		shoppingCart.ClearCart();
		pressed = false;
	}
}

class ShopItem : MenuElement
{
	// These should be treated as a union, items can either be MechItems, or a mech class.
	MechItem objItem;
	class<DrivableMech> clsMech;
	int mechbayItem; // Used for selling mechs.
	ShopMenu base;
	bool dragging;
	vector2 posOffs;
	int count;
	bool infinite;
	bool inCart;
	bool selected;
	double dragAlpha;
	double dragTics;
	
	virtual bool IsSameItem(ShopItem other)
	{
		bool sameMech = clsMech && (clsMech == other.clsMech && mechbayItem == other.mechbayItem);
		return objItem == other.objItem || sameMech;
	}
	
	override void Init()
	{
		size = (256,128);
		base = ShopMenu(parentMenu);
	}
	
	override void Draw(double dT)
	{
		if(CheckCollision(base.cursor, false) && objItem)
			base.ShopBG.DrawItemDescription(objItem);
	
		if(!objItem) return;
		if(!disabled && !dragging && checkDraggable() && CheckCollision(base.cursor, false))
		{
			// On hover
			MWDrawer.SetClipRect(parentElement.pos.x, parentElement.pos.y, parentElement.size.x, parentElement.size.y);
			MWDrawer.Fill(0x184073, parentElement.pos.x, pos.y - 7, parentElement.size.x - 40, size.y + 15, selected ? 0.75 : 0.33);
			MWDrawer.ClearClipRect();
		}
		
		if(dragging)
		{
			dragTics += dT;
			if(dragTics >= 20) dragAlpha = DrivablesMath.Lerp(dragAlpha, 0.65, 0.1 * dT);
		}
		else
		{
			dragAlpha = 0;
			dragTics = 0;
		}
		
		DrawAt(pos, parentElement);
	}
	
	virtual void DrawAt(vector2 drawPos, MenuElement inContainer)
	{
		if(objItem)
		{	
			if(inContainer) MWDrawer.SetClipRect(inContainer.pos.x, inContainer.pos.y, inContainer.size.x, inContainer.size.y);
			double itemAlpha = dragging ? max(0.37, 1.0 - dragAlpha) : 1.0;
			
			MechItemSlot.DrawMechItem(objItem, initPos + posOffs, itemAlpha, 0.5, size, 34, disabled);  
			DrawCount(initPos + posOffs);
			MWDrawer.ClearClipRect();
			
			// Draw under cursor if being dragged.
			if(dragging) 
				MechItemSlot.DrawMechItem(objItem, drawPos, dragging ? dragAlpha : 1.0, 0.5, size, 34, disabled);  
		}
	}
	
	virtual void DrawCount(vector2 drawPos)
	{
		bool isPlayerItem = base.PlayerItems.items.Find(objItem) != base.PlayerItems.items.Size();
	
		// Draw Price
		Color priceTagColor = 0xFF127012;
		if(isPlayerItem) priceTagColor = 0xFFA7060A;
		double txtScale = 0.7;
		
		vector2 priceStringPos = (drawPos.x + size.x + 12, drawPos.y + size.y - 8);
		string value = MWDrawer.FormatNumber(isPlayerItem ? objItem.GetValue() * 0.5 : objItem.GetValue());
		double valLength = MWDrawer.GetTextWidth("hm_type", value, (txtScale,txtScale));
		double valHeight = MWDrawer.GetTextHeight("hm_type", value, scale:(txtScale,txtScale));
		vector2 cbillIconPos = priceStringPos + (7 + valLength, 5);
		
		MWDrawer.Fill(priceTagColor, priceStringPos.x - 5, priceStringPos.y - 5, valLength + 20, 20);
		
		MWDrawer.DrawString("hm_type", "\c[White]"..value, priceStringPos - (0,valHeight * 0.25), scale:(txtScale,txtScale));
		MWDrawer.DrawImage("Graphics/Shop/CBill_Icon.png", cbillIconPos, scale:(0.5,0.5));
		
		MWDrawer.DrawImage("Graphics/Shop/priceTag.png", priceStringPos + (-14,5), scale:(0.3,0.3), tint:priceTagColor);
	
		if(infinite) return; // Do not draw quantity for infinite items.
		vector2 countStringPos = (parentElement.pos.x + (parentElement.size.x - 60), drawPos.y);
		MWDrawer.DrawString("hm_type", String.Format("\c[Gray] %d", count), countStringPos, flags:MWDrawer.SS_TEXT_RIGHT, scale:(0.8,0.8));
	}
	
	override bool CheckDraggable()
	{
		// Items not visible on the list shouldn't be able to be dragged.
		vector2 posCheck = pos + (0, (size.y * 0.5) - 10);
		vector2 sizeCheck = (size.x, 10);
		bool validPos = AABBCollision(parentElement.pos, parentElement.size, posCheck, sizeCheck);
		
		return (!disabled && (dragging || validPos));
	}
	
	override void UpdateDragPos(MenuCursor cursor)
	{
		vector2 centerPos = (
			( (size.x * 0.5) - (cursor.size.x * 0.5) ),
			( (size.y * 0.5) + (cursor.size.y * 0.5) )
		);
	
		pos = cursor.pos - centerPos;
	}
	
	override void OnDrag(MenuCursor cursor)
	{
		dragging = true;
	}
	
	override void OnDrop(MenuCursor cursor)
	{		
		// Finish dragging 
		dragging = false;
	
		if(inCart && !CheckCollision(base.shoppingCartContainer, true))
		{
			base.shoppingCartContainer.RemoveFromCart(self);
			return;
		}
	
		if(CheckCollision(base.shoppingCartContainer, true))
		{
			base.shoppingCartContainer.AddToCart(self);
		}
	}
	
	bool unfuckLeftBtn;

	override void Update(double dT)
	{
		// Update size to item slot size.
		if(objItem) size.y = 34 * max(1,objItem.size) * 0.5;

		if(!dragging) pos = initPos + posOffs;
		disabled = parentElement.disabled || (!infinite && count <= 0);
		if(infinite) count = 1;
		
		if(!base.cursor) return;
		
		// Double click to add/remove from cart.
		bool hovered = CheckCollision(base.cursor, false);
		if(!hovered || count <= 0) selected = false;
		
		// Wish I could just use the leftPressed field, but for some GZDoom reason
		// it doesn't work only for shop container items, what. the. fuck.?
		bool clicked = false;
		if(base.cursor.leftDown && hovered)
		{
			unfuckLeftBtn = true;
			clicked = false;
		}
		else if(unfuckLeftBtn)
		{
			if(dragAlpha <= 0) clicked = true;
			unfuckLeftBtn = false;
		}
	
		if(hovered && clicked)
		{
			clicked = false;
			if(selected)
			{
				if(inCart) 
					base.shoppingCartContainer.RemoveFromCart(self);
				else
					base.shoppingCartContainer.AddToCart(self);
					
				selected = false;		
			} else selected = true;
		}
	}
}

class ShopScrollBar : MenuElement
{
	double curScroll;
	double itemListHeight;
	double scrollPerc;
	double scrollTo;
	
	override void Init()
	{
		size.y = parentElement.size.y;
	}

	override void Draw(double dT)
	{
		double scrollBarHeight = clamp( (size.y / max(1,itemListHeight + size.y)) * size.y, 16, size.y - 8);
		double scrollContainerHeight = size.y - scrollBarHeight - 8;
		vector2 scrollBarPos = (pos.x + 4, pos.y + (scrollContainerHeight * scrollPerc) + 4);
		vector2 scrollBarSize = (size.x * 0.8, scrollBarHeight);
		vector2 shadowPos = (2,2);
	
		// Background
		MWDrawer.Fill(0x7F7F7F, pos.x - shadowPos.x, pos.y - shadowPos.y, size.x + (shadowPos.x*2), size.y + (shadowPos.y*2));	
		MWDrawer.Fill(0x0F0F0F, pos.x, pos.y, size.x, size.y);	
		
		// Foreground
		MWDrawer.Fill(0xAFAFAF, scrollBarPos.x, scrollBarPos.y, scrollBarSize.x, scrollBarSize.y); 
		MWDrawer.Fill(0xFFFFFF, scrollBarPos.x + shadowPos.x, scrollBarPos.y + shadowPos.y, scrollBarSize.x - (shadowPos.x*2), scrollBarSize.y - (shadowPos.y*2)); 
	}
	
	override bool CheckDraggable()
	{
		return itemListHeight > 0;
	}
	
	override void UpdateDragPos(MenuCursor cursor)
	{
		if( cursor.pos.y < pos.y || cursor.pos.y > (pos.y + size.y) )
			return;
	
		double deltaY = cursor.pos.y - pos.y;
		double perc = clamp(deltaY / size.y, 0, 1.);
		
		scrollTo = perc * itemListHeight;
	}
	
	override void Update(double dT)
	{
		curScroll = clamp(curScroll, 0, itemListHeight);		
		scrollTo = clamp(scrollTo, 0, itemListHeight);		
		scrollPerc = curScroll / max(1,itemListHeight);
		
		if(abs(curScroll - scrollTo) > 1)
			curScroll = DrivablesMath.lerp(curScroll, scrollTo, 0.5 * dT);
	}
}

class ShopBackground : MenuElement
{
	vector2 descPos;
	
	override void Init()
	{
		descPos = (957, 1014);
	}

	override void Draw(double dT)
	{
		// MWDrawer.Fill(0x3F3F3F, pos.x, pos.y, size.x, size.y, 1.0);
		MWDrawer.DrawImage("Graphics/Shop/ShopBackground.png", pos + (size.x * 0.5, size.y * 0.5), scale:(1.03,1.02), texoffs:(1,1));
		
		// Background
		//MWDrawer.Fill(0x3F3F3F, pos.x, 230, size.x, size.y - 115);
		
		MWDrawer.DrawImage("Graphics/Shop/ShopDesc.png", descPos, scale:(3.97,3.90));
	}
	
	void DrawItemDescription(MechItem item)
	{
		Font descFont = "hm_thin";
		vector2 statsPos = pos + (20, 960);
		double valueOffs = 373;
		vector2 itemDescPos = pos + (valueOffs + 100, statsPos.y - 10);
		double statLineHeight = 20;
		double lineHeight = descFont.getHeight() + 7;
	
		// Draw stats
		Array<string> stats;
		Array<string> values;
		string itemDesc = item.getShopDescription();
		BrokenLines descLines = descFont.BreakLines(itemDesc, descFont.StringWidth("A") * 80);
		
		int strY = 0;
		for(int i = 0; i < descLines.Count(); i++)
		{
			let str = descLines.StringAt(i);
			
			// Font shadow
			MWDrawer.DrawString(descFont, str, itemDescPos + (2, stry + 2), scale:(1.0,1.0), tint:0xFF000000); 
			
			// Font foreground
			MWDrawer.DrawString(descFont, "\c[Green]"..str, itemDescPos + (0, stry), scale:(1.0,1.0));
			strY += lineHeight;
		}	
	
		strY = 0;
		item.GetShopProperties(stats, values);
		for(int i = 0; i < stats.Size(); i++)
		{
			MWDrawer.DrawString(descFont, "\c[Green]"..stats[i], statsPos + (0, strY), scale:(1.0,1.0));
			MWDrawer.DrawString(descFont, "\c[Green]"..values[i], statsPos + (valueOffs, strY), flags:MWDrawer.SS_TEXT_RIGHT, scale:(1.0,1.0));
			strY += statLineHeight;
		}
	}
}


// Shop Menu
class ShopMenu : MechMenu 
{
	enum ShoppingMode
	{
		SHOP_NEUTRAL = 0,
		SHOP_BUYING = 1,
		SHOP_SELLING = 2
	};

	Array<GFXMenuItem> GFX;

	PlayerPawn shopPlayer;
	int shopMode; // enum field for ShoppingMode.
	Array<ShopItem> shopCart;
	
	I_MechItemStorage playerItems;
	
	ShopItemsContainer playerItemContainer;
	ShopItemsContainer shopItemContainer;
	CartContainer shoppingCartContainer;
	ShopBackground ShopBG;

	MenuCursor cursor;
	
	override void InitElements() 
	{
		elements.Clear(); // Repopulate elements
		shopMode = SHOP_NEUTRAL;
		
		shopPlayer = players[consoleplayer].mo;
		// Get pointer to player items.
		playerItems = I_MechItemStorage(shopPlayer.FindInventory("I_MechItemStorage"));
		
		ShopBG = ShopBackground(AddElement("ShopBackground", "ShopField", (155,10), (1620,1055)));
		
		playerItemContainer = ShopItemsContainer(AddElement("ShopItemsContainer", "Current Inventory", (160,300), (520,650)));
		playerItemContainer.Setup(playerItems.items, NULL, SHOP_SELLING);
		
		shopItemContainer = ShopItemsContainer(AddElement("ShopItemsContainer", "Market Items", (1240,300), (520,650)));
		shopItemContainer.Setup(playerItems.shopItems, NULL, SHOP_BUYING);
		shopItemContainer.ChangeListing(ShopItemsContainer.LIST_ENGINES); 
		
		shoppingCartContainer = CartContainer(AddElement("CartContainer", "ShoppingCart", (770,250), (430,500)));
		
		// Cursor is added last, to keep always on-top.
		cursor = MenuCursor(AddElement("MenuCursor", "Cursor", (0,0), (10,10))); 
	}
	
	override void Drawer()
	{
		super.Drawer();
		GFXMenuItem.DrawItems(GFX, deltaTime);
		GFXMenuItem.UpdateItems(GFX, deltaTime);
	}
	
	void completeTransaction()
	{
		string type = "???";
		double cost = shoppingCartContainer.getTransactionCBills();
		// Format of event - buysell:cost[id:amt,id:amt...]
		if(shopMode == SHOP_NEUTRAL) return; 
		
		 // Freeze menu until transaction is completed in play-scope.
		pauseUpdates = true;
		
		Array<MechItem> itemBox;
		Array<Int> ids;
		Array<Int> amts;
		
		switch(shopMode)
		{
			case SHOP_BUYING:
				type = "buy";
				itemBox.Copy(playerItems.shopItems);
			break;
			case SHOP_SELLING:
				type = "sell";
				itemBox.Copy(playerItems.items);
			break;
		}
		
		// Gather IDs and amounts
		string itemStr = "";
		for(int i = 0; i < shopCart.Size(); i++)
		{
			let item = shopCart[i];
			if(item.objItem)
			{
				int itemID = itemBox.Find(item.objItem);
				itemStr.AppendFormat("%d:", itemID);
			}
			else if(item.clsMech)
			{
				// TODO: Mech transactions
			}
			itemStr.AppendFormat("%d", item.count);
			if(i < shopCart.Size()-1) itemStr.AppendFormat(",");
		}
		
		// Build transaction string
		string shopStr = String.Format("shop:%s:%d:[%s]", type, cost, itemStr);
		
		// Send transaction request
		EventHandler.SendNetworkEvent(shopStr);
	}
	
	play static void processShopMenuEvents(ConsoleEvent e)
	{
		// Menu events
		let plr = players[e.Player].mo;
		
		string menuCmd = e.Name;
		Array<String> menuArgs;
		menuCmd.Split(menuArgs, ":");
		
		if(menuArgs[0] == "shop")
		{
			string mode = menuArgs[1];
			double cost = menuArgs[2].ToDouble();
			let playerItems = I_MechItemStorage(plr.FindInventory("I_MechItemStorage"));
						
			// Handle cbills
			playerItems.cbills += cost;
			
			// Unpack items
			int listStart = menuCmd.IndexOf("[");
			int listEnd = menuCmd.IndexOf("]") - listStart;
			string shopItems = menuCmd.Mid(listStart + 1, listEnd - 1); 
			
			Array<string> itemsData;
			shopItems.Split(itemsData, ",");
			
			Array<int> itemIDs;
			Array<int> itemCounts;
			foreach(itemStr : itemsData)
			{
				int delim = itemStr.IndexOf(":");
				itemIDs.Push(itemStr.Mid(0,delim).ToInt());
				itemCounts.Push(itemStr.Mid(delim+1).ToInt());
			}
			
			// Handle items
			if(mode == "sell")
			{
				// Sold items list needs to be made first, because items
				// can be removed via depletion, offseting the indexes incorrectly.
				Array<MechItem> soldItems;
				foreach(itemID : itemIDs)
					soldItems.Push(playerItems.items[itemID]);
	
				for(int i = soldItems.Size()-1; i >= 0; i--)
					playerItems.depleteItem(soldItems[i], itemCounts[i]);
			}
			else if (mode == "buy")
			{
				for(int i = 0; i < itemIDs.Size(); i++)
				{
					int itemID = itemIDs[i];
					int itemCount = itemCounts[i];
					playerItems.AddItem(playerItems.shopItems[itemID].MakeCopy(), itemCount);
				}
			}
			
			// Finally, complete transaction
			EventHandler.SendInterfaceEvent(e.Player, "transaction.completed");
		}
	}
	
	override void processPlayEvent(int playerNumber, string event) 
	{
		Array<String> cmds;
		event.Split(cmds, ".");
		
		if(event == "transaction.completed")
		{
			shoppingCartContainer.ClearCart();
			playerItemContainer.populateChildren();
			shopItemContainer.populateChildren();
			shopMode = SHOP_NEUTRAL;
			
			// Reset item lists
			playerItemContainer.Setup(playerItems.items, NULL, SHOP_SELLING);
			shopItemContainer.Setup(playerItems.shopItems, NULL, SHOP_BUYING);
			
			pauseUpdates = false;
		}
	}
	
	override void OnElementEvent(MenuElement source, string eventType, int intArg, double doubleArg, Object objArg)
	{
		// MenuElements can call this function if they wish to relay behavior to their parent menu.
	}
}

// Some GFX
class GFXMenuItem : Object ui
{
	vector2 pos;
	double scale;
	double alpha;

	virtual void Init(vector2 pos)
	{
		self.pos = pos;
		alpha = 1.0;
		scale = 1.0;
	}
	
	virtual void Draw(double dT) {}
	virtual void Update(double dT) {}
	
	static void AddEffect(out Array<GFXMenuItem> list, class<GFXMenuItem> type, vector2 pos, double amt)
	{
		for(int i = 0; i < amt; i++)
		{
			let gfx = GFXMenuItem(new(type));
			gfx.Init(pos);
			list.Push(gfx);
		}
	}
	
	static void UpdateItems(out Array<GFXMenuItem> list, double dT)
	{
		if(!list.Size()) return;
		
		for(int i = list.Size()-1; i >= 0; i--)
		{	
			let gfxItem = list[i];
			if(gfxItem.alpha <= 0)
			{
				list.Delete(i);
				continue;
			}
			gfxItem.Update(dT);
		}
	}
	static void DrawItems(out Array<GFXMenuItem> list, double dT)
	{
		foreach(gfxItem : list) gfxItem.Draw(dT);
	}
}

class GFX_CBills : GFXMenuItem
{
	double physTimer;
	double maxScale;
	double rotation;
	double rotVel;
	vector2 vel;

	override void Init(vector2 pos)
	{
		self.pos = pos;
		alpha = 1.0;
		scale = 0.1;
		maxScale = frandom[MenuGFX](0.33, 1.0);
		
		vel = (
			 frandom[MenuGFX](-1.0,1.0),
			-frandom[MenuGFX](1.0,3.0)
		) * frandom[MenuGFX](0.1,6.0);
		rotation = frandom[MenuGFX](0,360);
		rotVel = frandom[MenuGFX](-6,6);
		
		self.pos += (vel.x * 10.0, vel.y);
	}
	
	override void Draw(double dT)
	{
		physTimer += dT;
	
		MWDrawer.DrawImage("Graphics/Shop/CBill_Icon.png", pos, alpha:self.alpha, scale:(scale,scale), rotation:rotation);
	
		if(physTimer >= 1.0)
		{
			vel.y += 0.3; // gravity
			pos += vel;
			rotation += rotVel;
			vel *= 0.96; // friction
			rotVel *= 0.99;
			physTimer = 0;
		}
		scale = DrivablesMath.Lerp(scale, maxScale, 0.1 * dT);
		alpha = DrivablesMath.Lerp(alpha, 0, 0.02 * dT);
		
		if(alpha <= 0.05) alpha = 0;
	}
}

