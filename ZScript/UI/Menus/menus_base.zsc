
class MenuElement : Object abstract ui
{
	string Tag; // Unique Element Tag
	bool disabled;
	MechMenu parentMenu;
	MenuElement parentElement;
	Array<MenuElement> children;
	vector2 pos;
	vector2 size;
	vector2 initPos;
	
	static MenuElement Create(class<MenuElement> type, string tag, MechMenu parent, vector2 pos, vector2 size = (1,1), MenuElement parentElement = NULL, bool skipInit = false)
	{
		let element = MenuElement(new(type));
		if(element)
		{
			element.pos = pos;
			element.initPos = pos;
			element.size = size;
			element.parentMenu = parent;
			element.Tag = tag;
			element.parentElement = parentElement;
			if(!skipInit) element.Init();
		}
		return element;
	}
	
	virtual MenuElement AddChild(MechMenu baseMenu, class<MenuElement> type, string tag, vector2 pos, vector2 size = (0,0))
	{
		let child = MenuElement.Create(type, tag, baseMenu, pos, size, self, skipInit:true);
		children.Push(child);
		baseMenu.elements.Push(child);
		child.Init();
		
		return child;
	}
	
	virtual void RemoveChild(MenuElement child)
	{
		int childIndex = children.Find(child);
		if(childIndex == children.Size()) return;
		children.Delete(childIndex);
				
		int childElementID = child.parentMenu.elements.Find(child);
		child.parentMenu.elements.Delete(childElementID);
		
		child.Destroy();
	}
	
	virtual MenuElement getChildByTag(string tag)
	{
		foreach(child : children)
			if(child.tag == tag) return child;
			
		return NULL;
	}
	
	virtual void getChildrenOfClass(Array<MenuElement> foundElements, class<MenuElement> cls, bool baseClass = false)
	{
		foreach(child : children)
			if( ((child is cls) && baseClass) || child.getClass() == cls)
				foundElements.Push(child);
	}
	
	virtual void ClearChildren(MechMenu baseMenu, class<MenuElement> type)
	{
		foreach(child : children)
		{
			if( !(child is type) ) continue;
	
			let childID = baseMenu.elements.Find(child);
			if(childID != baseMenu.elements.Size()) 
				baseMenu.elements.Delete(childID);
			child.Destroy();
		}
		
		// Filter "dead" children.
		for(int i = children.Size()-1; i >= 0; i--)
			if(!children[i]) children.Delete(i);
	}
	
	virtual void Init() {}
	virtual void Draw(double dT) {}
	virtual void Update(double dT) {}
	
	virtual void ResetPosition()
	{
		pos = initPos;
	}
	
	virtual bool checkDraggable()
	{
		return false;
	}
	
	// When true, on successful collision, blocks collision with elements under element.
	virtual bool IsBlocking(MenuElement other)
	{
		return false;
	}
	
	virtual void updateDragPos(MenuCursor cursor) {}
	virtual void OnDrag(MenuCursor cursor) {}
	virtual void OnDrop(MenuCursor cursor) {}

	virtual void ScaleColliderToGraphic(string graphic, vector2 graphicScale = (1,1))
	{	
		let tex = TexMan.CheckForTexture(graphic);
		vector2 bgRes;
		
		[bgRes.x, bgRes.y] = TexMan.GetSize(tex);
		bgRes.x *= graphicScale.x;
		bgRes.y *= graphicScale.y;
		
		vector2 bgScale = (
			bgRes.x / size.x,
			bgRes.y / size.y
		);
		
		size.x *= bgScale.x;
		size.y *= bgScale.y;
	}
	
	virtual vector2 ScaleGraphicToCollider(string graphic)
	{	
		let tex = TexMan.CheckForTexture(graphic);
		vector2 bgRes;
		
		[bgRes.x, bgRes.y] = TexMan.GetSize(tex);
		vector2 bgScale = (
			size.x / bgRes.x,
			size.y / bgRes.y
		);
		
		return bgScale;
	}
	
	static bool AABBCollision(vector2 pos1, vector2 size1, vector2 pos2, vector2 size2)
	{
		vector2 a0, a1, b0, b1;
		a0 =  pos1;
		b0 =  pos2;
		a1 = (pos1.x+size1.x, pos1.y+size1.y);
		b1 = (pos2.x+size2.x, pos2.y+size2.y);
		
		// Perform rectangular bounding box collision check
		return (a0.x < b1.x && a1.x > b0.x && a0.y < b1.y && a1.y > b0.y);
	}
	
	virtual void drawCollider()
	{
		MWDrawer.DrawRect(pos, size);
	}
	
	virtual bool canCollide(MenuElement other)
	{
		return size.x > 0 && size.y > 0;
	}
	virtual bool CheckCollision(MenuElement other, bool callOnCollide = true) 
	{
		if(!other) return false;
		bool collides = AABBCollision(pos, size, other.pos, other.size); 
		if(collides && callOnCollide) OnCollision(other);
		
		return collides;
	}
	
	virtual MenuElement getCollidingWithType(class<MenuElement> type, MechMenu fromMenu = NULL)
	{
		if(!fromMenu) fromMenu = parentMenu;
		if(!fromMenu) return NULL;
		
		for(int i = 0; i < fromMenu.elements.Size(); i++)
		{
			let element = fromMenu.elements[i];
			if( !(element is type) ) continue;
			
			if(CheckCollision(element, false))
				return element;
		}
		return NULL;
	}
	
	virtual void OnCollision(MenuElement other) {}
	virtual void processUIEvent(UIEvent ev, InputEvent inputEv) {}
	virtual void processMenuEvent(int kmey, bool fromcontroller) {}
}

class MenuCursor : MenuElement
{
	MenuElement draggingElement;
	vector2 mouseCoords;
	bool leftDown, rightDown;
	bool leftPressed, rightPressed;
	int scrollDir;
	double tmpScrollTimer;
	double tmpBtnTimer;

	override void processUIEvent(UIEvent ev, InputEvent inputEv)
	{
		if(ev) // Handle UIEvent events.
		{
			if(ev.type == UIEvent.Type_MouseMove)
				mouseCoords = (ev.MouseX, ev.MouseY);
				
			// Left button
			if(ev.type == UIEvent.Type_LButtonDown)
			{
				leftDown = true;
				leftPressed = false;
			}
			if(ev.type == UIEvent.Type_LButtonUp) 
			{
				if(leftDown) leftPressed = true;
				leftDown = false;
			}

			// Right button
			if(ev.type == UIEvent.Type_RButtonDown)
			{
				rightDown = true;
				rightPressed = false;
			}
			if(ev.type == UIEvent.Type_RButtonUp) 
			{
				if(rightDown) rightPressed = true;
				rightDown = false;
			}
			
			// Scroll
			if(ev.type == UIEvent.Type_WheelUp  ) 
			{
				scrollDir = -1;
				tmpScrollTimer = 0;
			}
			if(ev.type == UIEvent.Type_WheelDown) 
			{
				scrollDir =  1;
				tmpScrollTimer = 0;
			}
		}
	}
	
	override void Draw(double dT)
	{
		if(draggingElement) 
		{
			draggingElement.Draw(dT);
			draggingElement.updateDragPos(self);
		}
	}
	
	virtual bool DragObject(MenuElement obj)
	{
		if( draggingElement || !obj.checkDraggable() ) 
			return false;
		
		draggingElement = obj;
		obj.OnDrag(self);
		return true;
	}
	
	virtual bool DropObject()
	{
		if(!draggingElement) return false;
		draggingElement.OnDrop(self);
		draggingElement = NULL;
		return true;
	}
	
	override void OnCollision(MenuElement other)
	{
		if(leftDown) 
			DragObject(other);
		else
			DropObject();
	}
	
	override void Update(double dT)
	{
		// Convert mouse coords from absolute to relative.
		double xRel = Screen.GetWidth() / MWDrawer.getBaseWidth();
		double yRel = Screen.GetHeight() / MWDrawer.getBaseHeight();
		
		pos = (mouseCoords.x / xRel, mouseCoords.y / yRel);
		
		// Update temp-state buttons
		tmpBtnTimer    += dT;
		tmpScrollTimer += dT;
		if(tmpBtnTimer    >  5) leftPressed = rightPressed = false;
		if(tmpScrollTimer > 10) scrollDir = 0;
	}
}

class MenuButton : MenuElement
{
	bool btnDown;
	bool pressed;
	bool hovered;
	double heldTime;
	
	override void Update(double dT)
	{
		let cursor = MenuCursor(getCollidingWithType("MenuCursor"));
		hovered = !!cursor;
	
		if(disabled)
		{
			pressed = false;
			btnDown = true;
			heldTime = 0;
			return;
		}

		if(btnDown)
			heldTime += dT;
		else
			heldTime = 0;
			
		if(cursor && btnDown && !cursor.leftDown && !pressed) 
		{
			pressed = true;
			OnPressed();
		}
		btnDown = (cursor ? cursor.leftDown : false);
	}
	
	virtual void OnPressed() {}
}

class MenuSearchBar : MenuElement
{	
	double alpha;
	bool active;
	double cursorAlphaTimer;
	string buffer;
	MDRTextInput searchInput;
	string defaultText;
	Font searchFont;
	Font bufferFont;
	
	override void Init()
	{
		defaultText = "Search Here";
		searchFont = "hm_type";
		bufferFont = "bt_classic";
		
		active = false;
		alpha = 1.0;
	}
	
	override void Draw(double dT)
	{
		string text = searchInput ? searchInput.getText() : buffer;
		if(!searchInput && buffer == "")
			text = defaultText;
			
		double valueWidth  = MWDrawer.GetTextWidth(searchFont, text);
		double valueHeight = MWDrawer.GetTextHeight(searchFont, text, scale:(0.15,0.15));

		MWDrawer.Fill(0x1A1A1A, pos.x, pos.y, size.x, size.y);		
		
		if(!searchInput && buffer == "")
		{
			cursorAlphaTimer += dT;
			double textAlpha = 0.5 + (cos(cursorAlphaTimer * 2)*0.5);
			valueHeight = MWDrawer.GetTextHeight(bufferFont, text);
			MWDrawer.DrawString(bufferFont, text, pos + (5, valueHeight * 0.5), translation:Font.CR_Gray, textAlpha, (1.0,1.0));
		}
		else
			MWDrawer.DrawString(searchFont, text, pos + (5, valueHeight * 0.5), translation:Font.CR_White, alpha, (1.0,1.0));
		
		// Cursor
		if(searchInput)
		{
			cursorAlphaTimer += dT;
			double cursorAlpha = (cos(cursorAlphaTimer * 10)*0.5);
		
			double CursorX = searchInput.getCursorPos(searchFont);// - (fnt.StringWidth(text) * 2.0);
			MWDrawer.DrawString(searchFont, "|", pos + (cursorX + 2, valueHeight * 0.5), translation:Font.CR_GRAY, min(alpha, cursorAlpha + 0.5), (1.0,1.0));
		}
	}
	
	void OpenTextInput()
	{
		searchInput = MDRTextInput.Open(parentMenu, "", 50, false, buffer);
		searchInput.ActivateMenu();
		active = true;
	}
	
	void CloseTextInput()
	{	
		if(!searchInput) return;
		searchInput.Close();
		active = false;
	}
	
	override void Update(double dT)
	{
		let cursor = MenuCursor(getCollidingWithType("MenuCursor"));
		if(cursor && !active && cursor.leftPressed)
			OpenTextInput();
	}
	
	virtual void OnSubmit()
	{
		// What happens when the input text is submitted.
	}
	
	override void processMenuEvent(int mkey, bool fromcontroller)
	{
		switch(mkey)
		{
			case Menu.MKEY_Abort:
				CloseTextInput();
			break;
			
			case Menu.MKEY_Input:
				if(searchInput) buffer = searchInput.GetText();
				OnSubmit();
				CloseTextInput();
			break;
		}
	}
}

class MenuScrollBar : MenuElement
{
	// Usually written to.
	double itemListHeight;
	double scrollTo;

	// Usually read from.
	double curScroll;
	double scrollPerc;
	
	vector2 scrollBarPos;
	vector2 scrollBarSize;
	double mouseDragDelta;
	
	override void Init()
	{
		size.y = parentElement.size.y;
	}

	override void Draw(double dT)
	{
		double scrollBarHeight = clamp( (size.y / max(1,itemListHeight + size.y)) * size.y, 16, size.y - 8);
		double scrollContainerHeight = size.y - scrollBarHeight - 8;
		scrollBarPos = (pos.x + 4, pos.y + (scrollContainerHeight * scrollPerc) + 4);
		scrollBarSize = (size.x * 0.8, scrollBarHeight);
		
		DrawScrollbar(scrollBarPos, scrollBarSize, scrollBarHeight, scrollContainerHeight);
	}
	
	virtual void DrawScrollbar(vector2 barPos, vector2 barSize, double barHeight, double containerHeight)
	{
		// Scroll bar visuals are drawn here
	}
	
	override bool CheckDraggable()
	{
		return itemListHeight > 0;
	}
	
	override void UpdateDragPos(MenuCursor cursor)
	{
		if( cursor.pos.y < pos.y || cursor.pos.y > (pos.y + size.y) )
			return;
		
		bool draggingBar = AABBCollision(cursor.pos, cursor.size, scrollBarPos, scrollBarSize);
		
		if(draggingBar || abs(mouseDragDelta) > 0)
		{
			double scalar = itemListHeight / (size.y - scrollBarSize.y);
			double diff = mouseDragDelta ? cursor.pos.y - mouseDragDelta : 0;
			mouseDragDelta = cursor.pos.y;
			scrollTo += diff * scalar;
		}
		else
		{	
			double deltaY = cursor.pos.y - pos.y;
			double perc = clamp(deltaY / size.y, 0, 1.);
			scrollTo = perc * itemListHeight;
		}
	}
	
	override void OnDrop(MenuCursor cursor)
	{
		mouseDragDelta = 0;
	}
	
	virtual void UpdateListHeight(double listHeight)
	{
		itemListHeight = listHeight;
	}
	
	override void Update(double dT)
	{
		curScroll = clamp(curScroll, 0, itemListHeight);		
		scrollTo = clamp(scrollTo, 0, itemListHeight);		
		scrollPerc = curScroll / max(1,itemListHeight);
		
		if(abs(curScroll - scrollTo) > 1)
			curScroll = DrivablesMath.lerp(curScroll, scrollTo, 0.5 * dT);
	}
}

class MechMenu : GenericMenu 
{
	double prevMS;
	double deltaTime;
	Array<MenuElement> elements;
	bool pauseUpdates;
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
		menuactive = OnNoPause;
		DontDim = true;
		InitElements();
	}
	
	virtual void InitElements() {}
	
	virtual MenuElement AddElement(class<MenuElement> type, String tag, vector2 pos, vector2 size = (1,1))
	{
		let element = MenuElement.Create(type, tag, self, pos, size, skipInit:true);
		elements.Push(element);
		element.Init();
		
		return element;
	}
	
	virtual MenuElement getElementByTag(string tag)
	{
		for(int i = 0; i < elements.Size(); i++)
		{
			if(elements[i].tag == tag)
				return elements[i];
		}
		return NULL;
	}
	
	virtual void getElementsOfClass(Array<MenuElement> foundElements, class<MenuElement> cls, bool child = false)
	{
		for(int i = 0; i < elements.Size(); i++)
		{
			let element = elements[i];
			if( ((element is cls) && child) || element.getClass() == cls)
				foundElements.Push(element);
		}
	}
	
	virtual void updateDeltaTime(double fps = 60.0)
	{
		double curMS = MSTimeF();
		double diff = curMS - prevMS;
		deltaTime = diff / (1000 / fps);
		prevMS = curMS;
	}
	
	override void Drawer()
	{
		updateDeltaTime();

		// Draw Elements	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].Draw(deltaTime);	
		
		if(!pauseUpdates) UpdateElements(deltaTime, elements);
	}	
	
	ui static void UpdateElements(double deltaTime, out Array<MenuElement> elements)
	{
		// Update Elements	
		foreach(element : elements)
			if(element) element.Update(deltaTime);
			
		// Calculate element collisions (This is REALLY slow, sadly. However the result is pretty robust and clean code-wise collision logic)
		for(int i = elements.Size()-1; i >= 0; i--)
		{
			let srcElement = elements[i];
			if(!srcElement.canCollide(null)) continue;
			for(int k = 0; k < elements.Size(); k++)
			{
				let otherElement = elements[k];
				if(otherElement == srcElement || !otherElement.canCollide(srcElement)) continue;
				
				if(srcElement.CheckCollision(otherElement) && srcElement.IsBlocking(otherElement)) break;
			}
		}
	}
	
	ui virtual void processPlayEvent(int playerNumber, string event) 
	{
		 // Process interface events sent from play scope to UI	
	}
		
	virtual void OnElementEvent(MenuElement source, string eventType, int intArg, double doubleArg, Object objArg)
	{
		// MenuElements can call this function if they wish to relay behavior to their parent menu.
	}
	
	override bool OnUIEvent(UIEvent ev)
	{	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].processUIEvent(ev, null);
			
		return super.OnUIEvent(ev);
	}
	
	override bool OnInputEvent(InputEvent ev)
	{ 	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].processUIEvent(null, ev);
			
		return false;
	}
	
	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		super.MenuEvent(mkey, fromcontroller);
	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].processMenuEvent(mkey, fromcontroller);
		
		return false;
	}
}

// Debug drawing
extend class MWDrawer
{
	static void DrawRect(vector2 pos, vector2 size, Color col = 0xFFFF00FF)
	{
		// Top
		MWDrawer.DrawThickLine(pos.x, pos.y, pos.x + size.x, pos.y, 2.0, col);
		// Bottom
		MWDrawer.DrawThickLine(pos.x, pos.y + size.y, pos.x + size.x, pos.y + size.y, 2.0, col); 
		// Left
		MWDrawer.DrawThickLine(pos.x, pos.y, pos.x, pos.y + size.y, 2.0, col); 
		// Right
		MWDrawer.DrawThickLine(pos.x + size.x, pos.y, pos.x + size.x, pos.y + size.y, 2.0, col); 
	}
}