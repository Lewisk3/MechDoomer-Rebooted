
class MenuElement : Object abstract ui
{
	string Tag; // Unique Element Tag
	MechMenu parentMenu;
	vector2 pos;
	vector2 size;
	
	static MenuElement Create(class<MenuElement> type, string tag, MechMenu parent, vector2 pos, vector2 size = (1,1))
	{
		let element = MenuElement(new(type));
		if(element)
		{
			element.pos = pos;
			element.size = size;
			element.parentMenu = parent;
			element.Tag = tag;
			element.Init();
		}
		return element;
	}
	
	virtual void Init() {}
	virtual void Draw(double dT) {}
	virtual void Update(double dT) {}
	
	virtual bool checkDraggable()
	{
		return false;
	}
	
	virtual void updateDragPos(MenuCursor cursor) {}
	virtual void OnDrag(MenuCursor cursor) {}
	virtual void OnDrop(MenuCursor cursor) {}
	
	static bool AABBCollision(vector2 pos1, vector2 size1, vector2 pos2, vector2 size2)
	{
		vector2 a0, a1, b0, b1;
		a0 =  pos1;
		b0 =  pos2;
		a1 = (pos1.x+size1.x, pos1.y+size1.y);
		b1 = (pos2.x+size2.x, pos2.y+size2.y);
		
		// Perform rectangular bounding box collision check
		return (a0.x < b1.x && a1.x > b0.x && a0.y < b1.y && a1.y > b0.y);
	}
	
	virtual void drawCollider()
	{
		MWDrawer.DrawRect(pos, size);
	}
	
	virtual bool canCollide(MenuElement other)
	{
		return size.x > 0 && size.y > 0;
	}
	virtual bool CheckCollision(MenuElement other, bool callOnCollide = true) 
	{
		bool collides = AABBCollision(pos, size, other.pos, other.size); 
		if(collides && callOnCollide) OnCollision(other);
		
		return collides;
	}
	
	virtual MenuElement getCollidingWithType(class<MenuElement> type)
	{
		if(!parentMenu) return NULL;
		for(int i = 0; i < parentMenu.elements.Size(); i++)
		{
			let element = parentMenu.elements[i];
			if( !(element is type) ) continue;
			
			if(CheckCollision(element, false))
				return element;
		}
		return NULL;
	}
	
	virtual void OnCollision(MenuElement other) {}
	virtual void processUIEvent(UIEvent ev, InputEvent inputEv) {}
}

class MenuCursor : MenuElement
{
	MenuElement draggingElement;
	vector2 mouseCoords;
	bool leftDown, rightDown;
	bool leftPressed, rightPressed;
	int scrollDir;
	double tmpScrollTimer;
	double tmpBtnTimer;

	override void processUIEvent(UIEvent ev, InputEvent inputEv)
	{
		if(ev) // Handle UIEvent events.
		{
			if(ev.type == UIEvent.Type_MouseMove)
				mouseCoords = (ev.MouseX, ev.MouseY);
				
			// Left button
			if(ev.type == UIEvent.Type_LButtonDown)
			{
				leftDown = true;
				leftPressed = false;
			}
			if(ev.type == UIEvent.Type_LButtonUp) 
			{
				if(leftDown) leftPressed = true;
				leftDown = false;
			}

			// Right button
			if(ev.type == UIEvent.Type_RButtonDown)
			{
				rightDown = true;
				rightPressed = false;
			}
			if(ev.type == UIEvent.Type_RButtonUp) 
			{
				if(rightDown) rightPressed = true;
				rightDown = false;
			}
			
			// Scroll
			if(ev.type == UIEvent.Type_WheelUp  ) 
			{
				scrollDir = -1;
				tmpScrollTimer = 0;
			}
			if(ev.type == UIEvent.Type_WheelDown) 
			{
				scrollDir =  1;
				tmpScrollTimer = 0;
			}
		}
	}
	
	override void Draw(double dT)
	{
		if(draggingElement) 
		{
			draggingElement.updateDragPos(self);
			draggingElement.Draw(dT);
		}
	}
	
	virtual bool DragObject(MenuElement obj)
	{
		if( draggingElement || !obj.checkDraggable() ) 
			return false;
		
		draggingElement = obj;
		obj.OnDrag(self);
		return true;
	}
	
	virtual bool DropObject()
	{
		if(!draggingElement) return false;
		draggingElement.OnDrop(self);
		draggingElement = NULL;
		return true;
	}
	
	override void OnCollision(MenuElement other)
	{
		if(leftDown) 
			DragObject(other);
		else
			DropObject();
	}
	
	override void Update(double dT)
	{
		// Convert mouse coords from absolute to relative.
		double xRel = Screen.GetWidth() / MWDrawer.getBaseWidth();
		double yRel = Screen.GetHeight() / MWDrawer.getBaseHeight();
		
		pos = (mouseCoords.x / xRel, mouseCoords.y / yRel);
		
		// Update temp-state buttons
		tmpBtnTimer    += dT;
		tmpScrollTimer += dT;
		if(tmpBtnTimer    >  5) leftPressed = rightPressed = false;
		if(tmpScrollTimer > 10) scrollDir = 0;
	}
}

class MechMenu : GenericMenu 
{
	double prevMS;
	double deltaTime;
	Array<MenuElement> elements;

	override void Init(Menu parent)
	{
		Super.Init(parent);
		menuactive = OnNoPause;
		DontDim = true;
		InitElements();
	}
	
	virtual void InitElements() {}
	
	virtual MenuElement AddElement(class<MenuElement> type, String tag, vector2 pos, vector2 size = (1,1))
	{
		let element = MenuElement.Create(type, tag, self, pos, size);
		elements.Push(element);
		
		return element;
	}
	
	virtual MenuElement getElementByTag(string tag)
	{
		for(int i = 0; i < elements.Size(); i++)
		{
			if(elements[i].tag == tag)
				return elements[i];
		}
		return NULL;
	}
	
	virtual void getElementsOfClass(Array<MenuElement> foundElements, class<MenuElement> cls, bool child = false)
	{
		for(int i = 0; i < elements.Size(); i++)
		{
			let element = elements[i];
			if( ((element is cls) && child) || element.getClass() == cls)
				foundElements.Push(element);
		}
	}
	
	virtual void updateDeltaTime(double fps = 60.0)
	{
		double curMS = MSTimeF();
		double diff = curMS - prevMS;
		deltaTime = diff / (1000 / fps);
		prevMS = curMS;
	}
	
	override void Drawer()
	{
		updateDeltaTime();

		// Draw and Update Elements
		for(int i = 0; i < elements.Size(); i++)
		{
			elements[i].Draw(deltaTime);
			elements[i].Update(deltaTime);
		}
		
		// Calculate element collisions (This is REALLY slow, sadly. However the result is pretty robust and clean code-wise collision logic)
		for(int i = 0; i < elements.Size(); i++)
		{
			let srcElement = elements[i];
			if(!srcElement.canCollide(null)) continue;
			for(int k = 0; k < elements.Size(); k++)
			{
				let otherElement = elements[k];
				if(otherElement == srcElement || !otherElement.canCollide(srcElement)) continue;
				
				srcElement.CheckCollision(otherElement);
			}
		}	
	}	
	
	play virtual void processNetworkEvent(ConsoleEvent e)
	{
		// Used as a callback from NetworkProcess, primarily to keep
		// code functionality organized and more readable.
	}
	
	virtual void OnElementEvent(MenuElement source, string eventType, int intArg, double doubleArg, Object objArg)
	{
		// MenuElements can call this function if they wish to relay behavior to their parent menu.
	}
	
	override bool OnUIEvent(UIEvent ev)
	{	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].processUIEvent(ev, null);
			
		return super.OnUIEvent(ev);
	}
	
	override bool OnInputEvent(InputEvent ev)
	{ 	
		for(int i = 0; i < elements.Size(); i++)
			elements[i].processUIEvent(null, ev);
			
		return false;
	}
}

// Debug drawing
extend class MWDrawer
{
	static void DrawRect(vector2 pos, vector2 size, Color col = 0xFFFF00FF)
	{
		// Top
		MWDrawer.DrawThickLine(pos.x, pos.y, pos.x + size.x, pos.y, 2.0, col);
		// Bottom
		MWDrawer.DrawThickLine(pos.x, pos.y + size.y, pos.x + size.x, pos.y + size.y, 2.0, col); 
		// Left
		MWDrawer.DrawThickLine(pos.x, pos.y, pos.x, pos.y + size.y, 2.0, col); 
		// Right
		MWDrawer.DrawThickLine(pos.x + size.x, pos.y, pos.x + size.x, pos.y + size.y, 2.0, col); 
	}
}