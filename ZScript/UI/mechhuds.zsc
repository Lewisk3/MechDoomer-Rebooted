class MechHUD : VehicleHUD
{
	vector3 torsoAim, leftArmAim, rightArmAim;
	
	double chainBlink, powerupTics, weapPowerupTics, lockingRotation, curThrottle, curHeat;
	double interferenceDuration;
	int chainGroup; // For chainfire animation.
		
	void ToggleInterference(bool onoff, double timer, double amt = 0.45)
	{
		PPShader.SetEnabled("interferenceshader", onoff);
		if(onoff)
		{
			PPShader.SetUniform1f("interferenceshader", "timer", timer);
			PPShader.SetUniform1f("interferenceshader", "amount", 0.45);
			PPShader.SetUniform1f("interferenceshader", "pixelSize", double(300.0));
		}
	}
		
	override void Draw(RenderEvent e)
	{		
		let viewer = e.Camera;
		if(automapactive) return; // Do not draw over automap.
		
		// Commit crimes 
		/*
			TexMan.SetCameraToTexture(viewer, "HideHUD", FOV);
			vector2 camRes = (4096, 2160);
			vector2 camScale = (1920. / camRes.x, 1080. / camRes.y);
			MWDrawer.DrawImage("HideHUD", (0,0), MWDrawer.SS_SCREEN_CENTER | MWDrawer.SS_NOASPECTCORRECTION, 1.0, scale:camScale);
		*/
				
		// After the crimes and times have been paid, draw the rest of the HUD.
		if(!mech.shutdown)
		{
			double FOV = viewer.player ? viewer.player.FOV : viewer.CameraFOV;
			let viewproj = MWDrawer.GetRenderEventViewProj(e, FOV);
			let torsoAim_To    = mech.torso.lookingPos;
			let leftArmAim_To  = mech.leftArm.lookingPos;
			let rightArmAim_To = mech.rightArm.lookingPos;
			
			torsoAim = DrivablesMath.Lerp3D(torsoAim, torsoAim_To, 0.5 * deltatime);
			leftArmAim = DrivablesMath.Lerp3D(leftArmAim, leftArmAim_To, 0.5 * deltatime);
			rightArmAim = DrivablesMath.Lerp3D(rightArmAim, rightArmAim_To, 0.5 * deltatime);
			
			bool infront;
			vector2 torsoAimPos, leftArmAimPos, rightArmAimPos;
			double crosshairAlpha = 0.65;
			
			
			let mechTarget = DrivableMech(mech.curTarget);	
			if(powerupTics <= 0)
			{
				// Draw target selection
				let curTarget = mech.curTarget;
				if(curTarget)
				{
					double targRadius = curTarget.radius;
					double targHeight = curTarget.height;
					
					vector2 topLeft, topRight, bottomLeft, bottomRight, center;
			
					[infront, center] = MWDrawer.GetActorHUDPos(viewproj, curTarget, 0, 0, 0);
			
					[infront, topLeft]       = MWDrawer.GetActorHUDPos(viewproj, curTarget, -targRadius, 0, 0);
					if(!infront) topLeft     = (0, 0);
					
					[infront, topRight]      = MWDrawer.GetActorHUDPos(viewproj, curTarget,  targRadius, 0, 0);
					if(!infront) topRight    = (Screen.getWidth(), 0 );
					
					[infront, bottomLeft]    = MWDrawer.GetActorHUDPos(viewproj, curTarget,  -targRadius, 0, targHeight);
					if(!infront) bottomLeft  = (0, Screen.getHeight());
					
					[infront, bottomRight]   = MWDrawer.GetActorHUDPos(viewproj, curTarget,  targRadius, 0, targHeight);
					if(!infront) bottomRight = (Screen.getWidth(), Screen.getHeight());
					
					double thickness = 4;
					Color lineColor = 0xCCFF0000;
					Screen.DrawThickLine(topLeft.x, topLeft.y, topRight.x, topRight.y, thickness, lineColor);             // ---
					Screen.DrawThickLine(topLeft.x, topLeft.y, bottomLeft.x, bottomLeft.y, thickness, lineColor);          // |
					Screen.DrawThickLine(topRight.x, topRight.y, bottomRight.x, bottomRight.y, thickness, lineColor);     //   |
					Screen.DrawThickLine(bottomLeft.x, bottomLeft.y, bottomRight.x, bottomRight.y, thickness, lineColor); // ___
				}
			
				// Draw crosshair
				double aimDistMetersLeft  = GetAimDistance(mech.leftArm);
				double aimDistMetersRight = GetAimDistance(mech.rightArm);
				double aimDistMetersTorso = GetAimDistance(mech.torso);
				double distStringScale = (Screen.getWidth() / MWDrawer.getBaseWidth());
			
				vector2 aimScale = (0.3,0.3);
				[infront, torsoAimPos] = MWDrawer.ProjectToHUD(viewproj, torsoAim, (0,0,0));
				if(infront) MWDrawer.DrawImage("Graphics/HUD/TorsoRet.png", torsoAimPos, alpha:crosshairAlpha, scale:aimScale, absolute:true);
				
				[infront, leftArmAimPos] = MWDrawer.ProjectToHUD(viewproj, leftArmAim, (0,0,0));
				if(infront && mech.leftArm.healthPoints > 0)
				{
					Screen.DrawThickLine(torsoAimPos.x, torsoAimPos.y, leftArmAimPos.x, leftArmAimPos.y, 4, 0xFF0000DD, crosshairAlpha*0.5*255.);
					MWDrawer.DrawImage("Graphics/HUD/ArmRet.png", leftArmAimPos, alpha:crosshairAlpha, scale:aimScale*2.0, absolute:true);
					
					if(mech.curTarget)
					{
						MWDrawer.DrawString("ConsoleFont", 
							String.Format("%dm", aimDistMetersLeft), leftArmAimPos + ((-40,0) * distStringScale), 
							flags:MWDrawer.SS_TEXT_RIGHT, 
							translation:Font.CR_Red, 
							scale:(0.5,0.5), absolute:true
						); 
					}
				}
				
				[infront, rightArmAimPos] = MWDrawer.ProjectToHUD(viewproj, rightArmAim, (0,0,0));
				if(infront && mech.rightArm.healthPoints > 0) 
				{
					Screen.DrawThickLine(torsoAimPos.x, torsoAimPos.y, rightArmAimPos.x, rightArmAimPos.y, 4, 0xFF0000DD, crosshairAlpha*0.5*255.);
					MWDrawer.DrawImage("Graphics/HUD/ArmRet.png", rightArmAimPos, alpha:crosshairAlpha, scale:aimScale*2.0, absolute:true);
					
					if(mech.curTarget)
					{
						MWDrawer.DrawString("ConsoleFont", 
							String.Format("%dm", aimDistMetersRight), rightArmAimPos + ((40,0) * distStringScale), 
							flags:0, 
							translation:Font.CR_Red, 
							scale:(0.5,0.5), absolute:true
						); 
					}
				}
				
				MWDrawer.DrawImage("Graphics/HUD/ArmRet.png", (0,0), MWDrawer.SS_SCREEN_CENTER, alpha:crosshairAlpha, tint:0xAAFF0000);

				MWDrawer.DrawString("ConsoleFont", 
					String.Format("%dm", aimDistMetersTorso), (0,40), 
					flags:MWDrawer.SS_TEXT_CENTER|MWDrawer.SS_SCREEN_CENTER, 
					translation:mech.curTarget ? Font.CR_Red : Font.CR_DarkGreen, 
					scale:(0.6,0.6)
				); 
			}
				
			// Draw HUD elements.
			DrawWeapons();
			DrawBars();
			DrawRadar();
			DrawCompass();
			DrawPaperDoll(mech);
			DrawLockonRet(crosshairAlpha);
			
			if(mech.EMI >= 5)
				interferenceDuration = 80;
			
			// EMI Effect
			if(interferenceDuration > 0) interferenceDuration -= deltaTime;
			
			ToggleInterference(interferenceDuration > 0, e.fracTic, DrivablesMath.fmap(mech.EMI, 0, 100.0, 0.01, 0.6));
			
			// Draw target enemy paperdoll.
			
			// TODO check is mech is friendly.
			Color targetTint = 0xA07F7F7F;
			if(mech.curTarget) targetTint = 0xA0FF0000;
			
			DrawPaperDoll(mechTarget, (1600,100), drawScale:0.85, bgTint:targetTint, drawNoTarget:!!!mech.curTarget);
			
			if(mechTarget) 
			{
				// Draw targetted mech.
				DrawMechWeapons(mechTarget, (1505,70), drawScale:0.65);
			}
			else if(mech.curTarget)
			{
				// Draw targeted demon
				DrawEnemyTarget(mech.curTarget, (1600,100), drawScale:0.85);
			}
			
			if(powerupTics > 0)	powerupTics -= deltaTime;
		}
		else
		{
			powerupTics = weapPowerupTics = POWERANIM; // 2 seconds to powerup.
		}
		
		bool debugInv = mech.getExtBtn(DrivableMech.BT_PEEKINV, DriverBtns.BTS_DOWN);
		if(debugInv)
		{
			vector2 invPos = (250,400);
			
			string armorInfo = String.Format(
				"Armor: %s \n -> (Tons per: %.2f, Criticals: %d)", 
				mech.armorType ? mech.armorType.displayName : "None",
				mech.armorType ? mech.armorType.armorWeight : 0,
				mech.armorType ? mech.armorType.structureSlots : 0
			);
			
			MWDrawer.DrawString("ConsoleFont", String.Format("Weight: %.2f / %.2f", mech.weight, mech.maxWeight), invPos-(100,200)); 
			MWDrawer.DrawString("ConsoleFont", armorInfo, invPos-(100, 180)); 
			DrawDebugInv(invPos + (   0,   0), mech.leftArm,    "Left Arm");
			DrawDebugInv(invPos + ( 300,   0), mech.leftTorso,  "Left Torso");
			DrawDebugInv(invPos + ( 600,   0), mech.torso,      "Center Torso");
			DrawDebugInv(invPos + ( 600,-300), mech.head,       "Head");
			DrawDebugInv(invPos + ( 900,   0), mech.rightTorso, "Right Torso");
			DrawDebugInv(invPos + (1200,   0), mech.rightArm,   "Right Arm");
			DrawDebugInv(invPos + ( 300, 400), mech.leftLeg,    "Left Leg");
			DrawDebugInv(invPos + ( 900, 400), mech.rightLeg,   "Right Leg");
		}
	}
	
	virtual double GetAimDistance(MechHardpoint fromHardpoint)
	{
		Array<HardpointMount> mounts;
		fromHardpoint.getMountPoints(mounts);
		vector3 hardpointPos = fromHardpoint.pos;
		
		// If we've got mounts, get position from that point.
		if(mounts.Size() > 0)
			hardpointPos = mounts[0].getPos(absolute:true);
	
		vector3 aimPos = mech.curTarget ? mech.curTarget.pos : mech.aimingPos;
		double aimDist = (hardpointPos.xy - aimPos.xy).Length();
		return (aimDist * UTOCM) / 100.0;	
	}
	
	void DrawRadar()
	{
		vector2 radarPos = (960,900);
		double radius = 150;
		
		// Powerup animation
		if(powerupTics > 0) radius *= (1.0-(powerupTics/POWERANIM));
		
		double radarSpeed = 2;
		double phase = (uiTics*radarSpeed)%360;
		double scanRadius = (phase > 90 && phase < 270) ? radius : ((sin(uiTics*radarSpeed)*0.5) + 0.5) * radius;
		
		FillCircle( radarPos, radius, 0xEE01470c, 0.35 );
		DrawCircle( 0xCC144a04, radarPos, radius);
		
		// Minimap
		DrawMinimap(radarPos, scanRadius, 12);
		
		let torso = MechTorso(mech.torso);
		double zoom = 0.45;
		drawAngledLine(radarPos.x,radarPos.y, radius, 90,  (mech.cam.CameraFOV*zoom), 2, 0xAA2aa307); 
		drawAngledLine(radarPos.x,radarPos.y, radius, 90, -(mech.cam.CameraFOV*zoom), 2, 0xAA2aa307); 
		
		// Draw middle line
		drawAngledLine(radarPos.x,radarPos.y, radius,  90, 0, 3, 0xFF144a04); 
		
		// Draw leg angle difference.
		drawAngledLine(radarPos.x,radarPos.y, radius, DrivablesMath.AngleDiff(torso.angle, mech.angle) + 90, 0, 2, 0xEE635500); 
		
		DrawCircle( 0xAA1c6306, radarPos, scanRadius);
	}

	void DrawMinimap(vector2 pos, double radius, double zoom)
	{
		// -- CVars / Constants --
		double minimap_renderdist = 2048;
		Vector2 baseoffs = pos;
		Vector2 plrpos2D = (mech.cam.pos.x, mech.cam.pos.y);
		
		double angle = mech.torso.angle;
		Vector2 map_middle = (baseoffs.x,baseoffs.y);
		Color linecol = 0xFF139131;
		
		// Draw Minimap
		// Setup stencil clip
		Screen.EnableStencil(true);
		Screen.SetStencil(0, SOP_Increment, SF_ColorMaskOff);
		FillCircle(pos, radius);
		Screen.SetStencil(1, SOP_Keep, SF_AllOn);
		
		for (int i = 0; i < Level.Lines.Size(); i++)
		{
			Line ln = Level.Lines[i];
			
			// if( !(ln.flags & Line.ML_MAPPED) ) continue;
			
			Vector2 ln_pos = ln.v1.p;
			Vector2 ln_len = ln.v2.p;
			
			// Check render distance
			double dist_v1 = DrivablesMath.Distance2D(ln_pos, plrpos2D);
			double dist_v2 = DrivablesMath.Distance2D(ln_len, plrpos2D);
			if( dist_v1 > minimap_renderdist && dist_v2 > minimap_renderdist )
				continue;
			
			ln_pos = Actor.RotateVector(SwapVector(ln_pos-plrpos2D),angle+180);
			ln_len = Actor.RotateVector(SwapVector(ln_len-plrpos2D),angle+180);					
			ln_pos += baseoffs*zoom;
			ln_len += baseoffs*zoom;
			ln_pos /= zoom;
			ln_len /= zoom;
			
			// drawRadarLine(ln_pos.x,ln_pos.y,ln_len.x,ln_len.y,linecol, map_middle, 1.0, radius);
			MWDrawer.DrawThickLine(ln_pos.x, ln_pos.y, ln_len.x, ln_len.y, 1.5, linecol);
		}
		
		// Disable stencil
		Screen.EnableStencil(false);
		Screen.ClearStencil();
	}
	
	void DrawBars()
	{
		uint flags = MWDrawer.SS_NOASPECTCORRECTION;
		vector2 throttlePos, barSize;
		throttlePos = (700, 800);
		barSize = (30, 180);
		
		// Powerup animation
		if(powerupTics > 0) barSize.y *= (1.0-(powerupTics/POWERANIM));
		
		 // Outline
		DrawRect(0xCC00FF00, throttlePos, barSize);
		DrawRect(0, throttlePos + (2,2), barSize - (3,3)); 
		
		// Fill
		double accelHeight = abs(mech.accel) * (barSize.y - 3);
		Color thrColor = mech.accel > 0 ? 0xCC0000FF : 0xCCFF0000;
		DrawRect(thrColor, throttlePos + (2,barSize.y-2), (barSize.x-3, -accelHeight), flags:flags); 
		
		// Throttle bar
		curThrottle = DrivablesMath.Lerp(curThrottle, mech.throttle, 0.25 * deltaTime);
		double thrHeight = abs(curThrottle) * (barSize.y - 3);
		DrawRect(0xCCFFFF00, throttlePos + (2,barSize.y-2 - thrHeight), (barSize.x-3, 4), flags:flags);
		
		// Jump Jets
		let [jjfuel, jjThrottled] = MechJumpJet.getRemainingFuel(mech);
		if(jjfuel >= 0)
		{
			Color jjColor = 0xCC00C3FF;
			Color jjLowColor = 0xCCD400C3;
			if(jjThrottled) jjColor = jjLowColor;
			
			vector2 jjBarSize = barSize * 0.5;
			vector2 jjBarPos = (
				throttlePos.x,
				throttlePos.y + (barSize.y-2)
			) + (40, -jjBarSize.y);
				
			double jjFuelHeight = (1.0-(jjfuel/100.0)) * (jjBarSize.y - 3);
		
			DrawRect(0, jjBarPos - (2,2), jjBarSize + (3,3)); 			
			DrawRect(jjColor, jjBarPos + (0, jjFuelHeight), jjBarSize - (0, jjFuelHeight + 3), flags:flags);
		}
		
		
		vector2 txtScale = (0.75,0.75);
		vector2 kphPos = throttlePos + (-(barSize.x), barSize.y+10);
		vector2 txtPos = throttlePos + (10, -15);
		double KPH = MechEngine.mechSpeedToKPH(mech.vel.xy.length());
		MWDrawer.DrawString("ConsoleFont", String.Format("[%3d KPH]", round(KPH)), kphPos, flags:flags, scale:txtScale);
		MWDrawer.DrawString("ConsoleFont", "Throttle", txtPos, flags:flags | MWDrawer.SS_TEXT_CENTER, scale:txtScale);
		
		// Override shutdown overlay
		if(mech.overrideShutdown)
			MWDrawer.DrawImage("Graphics/HUD/shutdownOverlay.png", (0,400), MWDrawer.SS_SCREEN_TOP_CENTER, 0.5 + (cos(uiTics * 5) * 0.5), scale:(1.0,1.0));
		
		// Draw heat.
		vector2 heatPos = (1190, 800);

		 // Outline
		DrawRect(0xCC00FF00, heatPos, barSize);
		DrawRect(0, heatPos + (2,2), barSize - (3,3)); 
		
		// Fill
		Color heatColor = 0xCCFF0000;
		curHeat = DrivablesMath.Lerp(curHeat, min(mech.maxHeat, mech.curHeat), 0.25 * deltaTime);
		double heatHeight = (curHeat / mech.maxHeat) * (barSize.y - 3);
		DrawRect(heatColor, heatPos + (2,barSize.y-2), (barSize.x-3, -heatHeight), flags:flags); 
		
		// Heat bars
		double highHeat = barSize.y * 0.60;
		double criticalHeat = barSize.y * 0.85;
		DrawRect(0xCCFFFF00, heatPos + (2,barSize.y-2 - highHeat), (barSize.x-3, 4), flags:flags);
		DrawRect(0xCCFF0000, heatPos + (2,barSize.y-2 - criticalHeat), (barSize.x-3, 4), flags:flags);

		vector2 kelvinPos = heatPos + (-(barSize.x), barSize.y+10);
		txtPos = heatPos + (10, -15);
		
		MWDrawer.DrawString("ConsoleFont", GetHeatString('K'), kelvinPos, flags:flags, scale:txtScale);
		MWDrawer.DrawString("ConsoleFont", "Heat", txtPos, flags:flags | MWDrawer.SS_TEXT_CENTER, scale:txtScale);
		
	}
			
	void DrawWeapons()
	{
		uint flags = MWDrawer.SS_NOASPECTCORRECTION;
		Array<MechWeapon> weaps;
		mech.getAllWeapons(weaps, readDeadHardpoints:true);
		
		vector2 offs = (0,0);
		vector2 drawPos = (1600,840);
		double yoff = 27; //35;
		double xoff = 20;
		Color selColor = 0xAA0ba600;
		double infoScale = 0.75;
		vector2 weapBarScale = (-0.95,0.5);
		
		double weapCount = weaps.Size();
				
		// Powerup animation
		if(mech.powerupCycleTics > 0) return;
		
		if(weapPowerupTics > 0) 
		{
			double scaleMod = 1.0 - (weapPowerupTics / POWERANIM);
			weapCount = weaps.Size() - DrivablesMath.fmap(weapPowerupTics, 0, POWERANIM, 1, weaps.Size()); 
			weapBarScale *= scaleMod;
			yoff *= scaleMod;
			weapPowerupTics -= deltaTime;
		}
		
		if(!weapCount) return;
		
		double ymax = weapCount * yoff;
		
		if( drawPos.y + ymax >= (1000 - yoff) )
			drawPos.y -= ((drawPos.y + ymax) - 1000) + (yoff*2);
		
		Font weapFont = "ConsoleFont";
		double weapHeight = weapFont.getHeight() * infoScale;
		
		// Weapons Top 
		MWDrawer.DrawImage("Graphics/HUD/WeaponsTop.png", drawPos, flags, 1.0, scale:weapBarScale);
		// Reactor battery
		double batteryScale = 0.8;
		vector2 batteryPos = drawPos + (10,5);
		vector2 batterySize = (117, 26) * batteryScale;
		double batteryPerc = mech.engine ? mech.engine.energy : 0;
		double batteryHue = (batteryPerc * 100) / 360.0;
		Color batteryColor = MWDrawerColor.HSLtoRGB(batteryHue, 1.0, 0.5, 1.0);
		
		MWDrawer.DrawString("ConsoleFont", "POWER ", drawPos - (100,0), flags, 1.0, scale:(infoScale, infoScale));
		//DrawRect(0xFF00FFFF, batteryPos - (batterySize*0.5), batterySize);
		MWDrawer.SetClipRect(batteryPos.x - (batterySize.x * 0.5), batteryPos.y - (batterySize.y * 0.5), batterySize.x * batteryPerc, batterySize.y);
		MWDrawer.DrawImage("Graphics/HUD/ReactorBattery_Fill.png", batteryPos, flags, scale:(batteryScale,batteryScale), tint:batteryColor);
		MWDrawer.ClearClipRect();
		MWDrawer.DrawImage("Graphics/HUD/ReactorBattery_Outline.png", batteryPos, flags, scale:(batteryScale,batteryScale));
		
		drawPos.y += yoff;		
		
	
		chainBlink += deltaTime;
		if( chainBlink >= 20 )
		{
			chainGroup = (chainGroup + 1) % weapCount;
			chainBlink = 0;
		}
		
		int ArmMounted = -1;
		vector2 mountIconScale = (0.4,0.4);
		vector2 mountIconOffs = ( 
			(256 * weapBarScale.x) - (24*mountIconScale.x), 0
		);
		
		// Sort weapons
		Array<MechWeapon> sortedWeaps;
		
		for(int p = 0; p <= 1; p++)
		{
			foreach(wp : weaps)
			{
				if(!p && wp.isGroupable()) // Automatic weapon
					sortedWeaps.Push(wp);
				else if(p && !wp.isGroupable())
					sortedWeaps.Push(wp);
			}
		}
		
		for(int i = 0; i < weapCount; i++)
		{
			let weap = sortedWeaps[i];
			if(!weap) continue;
			
			bool onArm = weap.parent is "MechArm";
			bool onTorso = weap.parent is "MechTorso" || weap.parent is "MechSideTorso";
			bool destroyed = weap.checkDestroyed();
			
			if(onArm && ArmMounted == -1 )
			{
				MWDrawer.DrawImage("Graphics/HUD/weaponArmMounted.png", drawPos + mountIconOffs, flags, 1.0, scale:mountIconScale);
				ArmMounted = 1;
			}
			
			if(onTorso && ArmMounted != 0) 
			{
				if(ArmMounted == 1)
				{
					MWDrawer.DrawImage("Graphics/HUD/WeaponsMiddle.png", drawPos, flags, 1.0, scale:weapBarScale);
					drawPos.y += yoff;
				}
				
				MWDrawer.DrawImage("Graphics/HUD/weaponTorsoMounted.png", drawPos + mountIconOffs, flags, 1.0, scale:mountIconScale);
				ArmMounted = 0;
			}
			
			// Draw Middle
			MWDrawer.DrawImage("Graphics/HUD/WeaponsMiddle.png", drawPos, flags, 1.0, scale:weapBarScale);
			
			// Draw groups
			vector2 groupOffs = (-110,-10);
			for(int g = 0; g < 5; g++)
			{
				double alpha = 0.5;
				uint tint = Font.CR_Blue;
				uint gBit = (2**g);
				let wgroup = mech.weaponGroups[g];
				bool chainfire = wgroup.chainfire;
				MechWeapon selWeap = mech.getSelectedWeapon();
				
				if( !!(weap.group & gBit) ) 
				{
					alpha = 1.0;
					tint = Font.CR_WHITE;
					if( chainfire && chainGroup == i )
						tint = Font.CR_TEAL;
						
					if( weap.cooldown > (weap.fireTime*0.8) && wgroup.weapCycle > 0 )
					{
						tint = Font.CR_Red;
						chainGroup = i;
					}
				}
				
				if(destroyed) 
					tint = Font.CR_DarkRed;
				
				if(g == mech.selectedGroup && weap.isGroupable())
				{
					double selAlpha = (weap == selWeap) ? 0.5 : 0.25; 
					MWDrawer.Fill(selColor, drawPos.x+groupOffs.x-115, drawPos.y + offs.y + groupOffs.y, 18, 20, selAlpha, flags);
				}
				
				if(weap.isGroupable()) MWDrawer.DrawString("ConsoleFont", String.Format("%d",g+1), drawPos+offs+groupOffs-(115,0), flags, translation:tint, alpha:alpha);
				groupOffs.x += xoff;
			}
			
			// Draw weapon
			vector2 weapOffs = groupOffs + (-100, weapHeight * 0.5);
			Color tint = Font.CR_White;
			
			// Get ammunition count
			int weapAmmoCount = weap.countAmmo();
			string ammoCount = "INF";
			
			if(weapAmmoCount < int.max) 
				ammoCount = String.Format("\c[Gray]%d", weap.countAmmo());
			
			// Range
			let [minrange, optrange, maxrange] = weap.getRanges();
			
			let laserWeap = SmallLaser(weap);
			string weapRange = String.Format("%dm", maxrange > 0 ? maxrange : optrange);
			
			// Weapon name
			if(destroyed) 
				tint = Font.CR_DarkRed;
			
			string weapName = String.Format("%-13s", weap.DisplayName);
			weapName = weapName.MakeUpper();
		
			vector2 weapDrawPos = drawPos+offs+weapOffs;
			MWDrawer.DrawString(weapFont, weapName, weapDrawPos, flags, translation:tint, scale:(infoScale,infoScale));
			
			// Ammo
			if(ammoCount ~== "INF")
			{
				MWDrawer.DrawImage("Graphics/HUD/ammoInf.png", weapDrawPos + (314,8), scale:(infoScale, infoScale) * 0.3, tint:0xC0FFFFFF);
			}
			else 
			{
				MWDrawer.DrawString(
					weapFont, ammoCount, 
					weapDrawPos + (330,0), 
					flags | MWDrawer.SS_TEXT_RIGHT, 
					translation:tint, 
					scale:(infoScale,infoScale)
				);			
			}
			
			// Range
			MWDrawer.DrawString(weapFont, weapRange, weapDrawPos + (215,0), flags | MWDrawer.SS_TEXT_RIGHT, translation:tint, scale:(infoScale*0.65,infoScale));
			
			// Weapon cooldown
			vector2 cooldownPos = (weapDrawPos.x + 230, weapDrawPos.y + 3);
			double cooldownPerc = min(1, max(0.01,weap.cooldown) / max(0.01,double(weap.cooldownTime)));
			MWDrawer.Fill(0xFF7F7F7F, cooldownPos.x - 1, cooldownPos.y - 1, 52, 12, flags:flags);
			MWDrawer.Fill(0xFF000000, cooldownPos.x, cooldownPos.y, 50, 10, flags:flags);
			MWDrawer.Fill(0xFFFF0000, cooldownPos.x + 1, cooldownPos.y + 0.5, 48 * cooldownPerc, 8.5, flags:flags);
			
			// Next weapon
			drawPos.y += yoff;
		}
		
		// Draw bottom
		MWDrawer.DrawImage("Graphics/HUD/WeaponsBottom.png", drawPos, flags, 1.0, scale:weapBarScale);
	}
	
	void DrawMechWeapons(DrivableMech targetMech, vector2 pos, double drawScale = 1.0, uint fntColor = Font.CR_Gray)
	{
		uint drawFlags = MWDrawer.SS_NOASPECTCORRECTION;
		double spacing = 20 * drawScale;
		Array<MechWeapon> weaps;
		targetMech.getAllWeapons(weaps, readDeadHardpoints:true);
		
		foreach(weap : weaps)
		{
			// Get weapon ammunition
			int ammoCount = int.max;
			if(weap.ammoType) ammoCount = targetMech.countAllAmmo(weap.ammoType);
		
			uint txtColor = fntColor;
			if(weap.disabled) txtColor = Font.CR_Black;
			if(weap.checkDestroyed() || ammoCount <= 0) txtColor = Font.CR_Red;
			MWDrawer.DrawString("ConsoleFont", weap.displayName, pos, drawFlags | MWDrawer.SS_TEXT_RIGHT, txtColor, 1.0, scale:(drawScale, drawScale));
			pos.y += spacing;
		}
	}
	
	void DrawPaperDoll(DrivableMech targetMech, vector2 pos = (210,920), double drawScale = 1.0, Color bgTint = 0, bool drawNoTarget = false)
	{
		uint drawFlags = MWDrawer.SS_NOASPECTCORRECTION;
		vector2 dollPos = pos;
		vector2 rearDollPos = dollPos + (190,0);
		vector2 dollScale = (0.75,0.75) * drawScale;
		double dollAlpha = 1.0;
		
		if(powerupTics > 0) 
		{
			dollScale.x *= (1.0-(powerupTics/POWERANIM));
			dollAlpha *= (1.0-(powerupTics/POWERANIM));
		}
		
		MWDrawer.DrawImage("Graphics/HUD/box.png", dollPos + (105,20), drawFlags, dollAlpha, scale:dollScale * 1.15, tint:bgTint);
		if(!targetMech) 
		{
			if(drawNoTarget)
			{
				Font infoFont = "ConsoleFont";
				double infoScale = 1.5 * drawScale;
				MWDrawer.DrawString(
					"ConsoleFont",
					"NO TARGET FOUND", 
					dollPos + (105,20 - (infoFont.GetHeight() * infoScale)), 
					drawFlags | MWDrawer.SS_TEXT_CENTER, 
					Font.CR_Red,
					dollAlpha, 
					scale:(infoScale,infoScale)
				);
			}
			return; // If our target is empty, just draw the background image.
		}
		
		double ArmorHD, ArmorCT, ArmorLT, ArmorRT, ArmorLA, ArmorRA, ArmorLL, ArmorRL;
		double InternalHD, InternalCT, InternalLT, InternalRT, InternalLA, InternalRA, InternalLL, InternalRL;
		[ArmorHD, InternalHD] = targetMech.head.getVitals();
		[ArmorCT, InternalCT] = targetMech.torso.getVitals();
		[ArmorLT, InternalLT] = targetMech.leftTorso.getVitals();
		[ArmorRT, InternalRT] = targetMech.rightTorso.getVitals();
		[ArmorLA, InternalLA] = targetMech.leftArm.getVitals();
		[ArmorRA, InternalRA] = targetMech.rightArm.getVitals();
		[ArmorLL, InternalLL] = targetMech.leftLeg.getVitals();
		[ArmorRL, InternalRL] = targetMech.rightLeg.getVitals();
			
		// Background
		MWDrawer.DrawImage(targetMech.paperdoll_Background, dollPos, drawFlags, dollAlpha, scale:dollScale);
		
		// Rear Outline
		MWDrawer.DrawImage(targetMech.paperdoll_Background, rearDollPos, drawFlags, dollAlpha, scale:dollScale);
		
		// L and R
		vector2 lrScale = (1.2,1.2) * drawScale;
		vector2 frontBackScale = (0.75,0.75) * drawScale;
		vector2 leftPos  = ((-80,40) * drawScale);
		vector2 rightPos = ( (60,40) * drawScale);
		vector2 frontBackPos = (0,70) * drawScale;
		MWDrawer.DrawString("ConsoleFont", "L", dollPos + leftPos, drawFlags, scale:lrScale);
		MWDrawer.DrawString("ConsoleFont", "R", dollPos + rightPos, drawFlags, scale:lrScale);
		MWDrawer.DrawString("ConsoleFont", "Front", dollPos + frontBackPos, drawFlags | MWDrawer.SS_TEXT_CENTER, scale:frontBackScale);
		
		// Rear LR
		MWDrawer.DrawString("ConsoleFont", "L", rearDollPos + leftPos, drawFlags, scale:lrScale);
		MWDrawer.DrawString("ConsoleFont", "R", rearDollPos + rightPos, drawFlags, scale:lrScale);
		MWDrawer.DrawString("ConsoleFont", "Rear", rearDollPos + frontBackPos, drawFlags | MWDrawer.SS_TEXT_CENTER, scale:frontBackScale);
		
		// Chassis 
		MWDrawer.DrawString(
			"ConsoleFont", 
			String.Format("%s - %s", targetMech.mechChassisName, targetMech.mechVariantName),
			dollPos + ((90,95) * drawScale), drawFlags | MWDrawer.SS_TEXT_CENTER, scale:(1.0,1.0) * drawScale
		);
		
		// Draw paperdoll
		for(int i = 0; i < targetMech.parts.Size(); i++)
		{
			let hardpoint = MechHardpoint(targetMech.parts[i]);
			if(!hardpoint) continue;
			
			hardpoint.DrawPaperdoll(dollPos, dollAlpha, dollScale, drawFlags, deltatime);
			
			// Draw Rear Armor
			if(hardpoint.hasRearArmor)
			{
				hardpoint.DrawPaperdoll(rearDollPos, dollAlpha, dollScale, drawFlags, deltatime, rear:true);
			}
		}
	}
	
	void DrawEnemyTarget(Actor target, vector2 pos = (210,920), double drawScale = 1.0)
	{
		uint drawFlags = MWDrawer.SS_NOASPECTCORRECTION;
		uint textFlags = drawFlags | MWDrawer.SS_TEXT_CENTER;
		vector2 namePos = (120,95) * drawScale; 
		
		// Annoying sprite angle bullshit.
		vector3 posDiff = level.SphericalCoords(mech.pos, target.pos, (mech.head.angle - 90, 0));
		double rawAngle = (Actor.Normalize180(posDiff.x) + 180);
		int targetAngle = floor(rawAngle / 45.0);
		
		TextureID targetTex;
		targetTex = target.CurState.GetSpriteTexture(targetAngle);
		
		// Sprite sizes
		vector2 targetDrawSize = (128,128) * drawScale;
		vector2 spriteSize;
		[spriteSize.x, spriteSize.y] = TexMan.GetSize(targetTex);	
		double spriteAspect = spriteSize.x / spriteSize.y;
		
		vector2 spriteScale = (
			(targetDrawSize.x / spriteSize.x) * spriteAspect, 
			targetDrawSize.y / spriteSize.y
		);
		
		// Name and sprite
		string targetName = target.getTag();
		MWDrawer.DrawString("ConsoleFont", targetName, pos + namePos, textFlags);
		MWDrawer.DrawTexture(targetTex, pos + (90,10), drawFlags, 1.0, scale:spriteScale);
		
		// Healthbar
		vector2 barScale = (0.85,0.65) * drawScale;
		vector2 barSize = (252 * barScale.x, 32 * barScale.y);
		vector2 healthBarPos = pos + (100, -55);
		double healthPerc = target.health / double(target.getSpawnHealth());
		MWDrawer.DrawImage("Graphics/HUD/enemyHealthBar.png", healthBarPos + (0,1*drawScale), drawFlags, 1.0, scale:(0.86,0.90)*drawScale, tint:0xFF000000);
		MWDrawer.SetClipRect(healthBarPos.x - (barSize.x * 0.5), healthBarPos.y - (barSize.y * 0.5), barSize.x * healthPerc, barSize.y, visualize:false);
		MWDrawer.DrawImage("Graphics/HUD/enemyHealthBar.png", healthBarPos, drawFlags, 1.0, scale:barScale);
		MWDrawer.ClearClipRect();
		
		// Percent string
		MWDrawer.DrawString("ConsoleFont", String.Format("%d%%", healthPerc * 100.0), healthBarPos + (0,-8*drawScale), textFlags, Font.CR_White, scale:(1.0,1.0)*drawScale);
	}
	
	void DrawLockonRet(double crosshairAlpha)
	{
		if(mech.targetProgress <= 0.01) return;
		
		lockingRotation -= 3 * deltaTime;
		bool hasLock = mech.targetProgress >= 1.0;
		double scale = 0.35;
		
		if(!hasLock)
		{
			MWDrawer.DrawImage("Graphics/HUD/MissileRet.png", (0,0), MWDrawer.SS_SCREEN_CENTER, alpha:crosshairAlpha, scale:(scale,scale));
			MWDrawer.DrawImage("Graphics/HUD/MissileLocking.png", (0,0), MWDrawer.SS_SCREEN_CENTER, alpha:crosshairAlpha, scale:(scale,scale), rotation:lockingRotation);
		}
		else
		{
			MWDrawer.DrawImage("Graphics/HUD/MissileLocked.png", (0,0), MWDrawer.SS_SCREEN_CENTER, alpha:crosshairAlpha, scale:(scale,scale));	
		}
	}
	
	void DrawCompass()
	{	
		uint drawFlags = MWDrawer.SS_NOASPECTCORRECTION;
		vector2 compassPos = (960,200);
		double width = 200;
		double height = 32;
		double torsoAng = Actor.Normalize180(mech.torso.angle - 90);
		double ang = Actor.Normalize180(mech.angle - 90);
		double scale = 2.0;
		
		if(powerupTics > 0) width *= (1.0-(powerupTics/POWERANIM));
				
		width *= scale;
		height *= scale;
		
		double degreeSize = 2*scale;
		vector2 compassOffs = (ang*degreeSize, 0);
		
		double legsAngleDiff = DrivablesMath.AngleDiff(torsoAng, ang);
		double legCompassPos = sin(legsAngleDiff) * 100;
		
		vector2 torsoOffs = (legCompassPos*degreeSize, 0);
		
		// Draw alignment arrows.
		vector2 alignOne = compassPos + (8, -32);
		vector2 alignTwo = compassPos + (8, 32) - torsoOffs;
		MWDrawer.DrawImage("AR_ALIGN", alignOne, scale:(scale,scale));
		MWDrawer.DrawImage("AR_ALIGN", alignTwo, scale:(scale,-scale));
		
		// Draw alignment lines
		MWDrawer.drawThickLine(alignOne.x, alignOne.y + 16, alignOne.x, alignTwo.y - 16, 4, 0xAA2aa307);
		MWDrawer.drawThickLine(alignOne.x, alignTwo.y - 16, alignTwo.x, alignTwo.y - 16, 4, 0xAA2aa307);
		
		// Draw compass
		MWDrawer.SetClipRect(compassPos.x - width, compassPos.y - height, width*2, height*2);
		MWDrawer.DrawImage("Compass", (compassPos + (720,0)) - compassOffs, drawFlags, scale:(scale,scale*0.8));
		MWDrawer.DrawImage("Compass", (compassPos - (720,0)) - compassOffs, drawFlags, scale:(scale,scale*0.8));	
		MWDrawer.ClearClipRect();
	}
}



/*
			string prefix = "";
			if(weap.parent is "MechArm") armSlot++;
			if(weap.parent is "MechTorso" || weap.parent is "MechSideTorso") torsoSlot++;
			bool destroyed = weap.checkDestroyed();
			
			if(armSlot == 1) 
			{
				prefix = "\c[Red]O";
				//if(i > 0) offs.y += yoff;
			}
			if(torsoSlot == 1) 
			{
				prefix = "\c[Red]X";
				if(i > 0) offs.y += yoff;
			}
			
			MWDrawer.DrawImage("Graphics/HUD/weaponBar.png", drawPos+offs + (75,12), flags, 0.85, scale:(0.9,1.0));

			uint tint = Font.CR_WHITE;
			if(weap.cooldown > 0) tint = Font.CR_RED;
			
			if(destroyed) 
				tint = Font.CR_DarkRed;
			
			if((i+1) == mech.selectedWeapon)
				MWDrawer.Fill(selColor, drawPos.x - 120, drawPos.y+(offs.y), 320, 20, 0.20);
			
			vector2 groupOffs = (0,0);
			for(int g = 0; g < 5; g++)
			{	
				double alpha = 0.5;
				uint tint = Font.CR_Blue;
				uint gBit = (2**g);
				let wgroup = mech.weaponGroups[g];
				bool chainfire = wgroup.chainfire;
				
				if( !!(weap.group & gBit) ) 
				{
					alpha = 1.0;
					tint = Font.CR_WHITE;
					if( chainfire && chainGroup == i )
						tint = Font.CR_TEAL;
						
					if( weap.cooldown > (weap.fireTime*0.8) && wgroup.weapCycle > 0 )
					{
						tint = Font.CR_Red;
						chainGroup = i;
					}
				}
				
				if(destroyed) 
					tint = Font.CR_DarkRed;
				
				if(g == mech.selectedGroup)
				{
					double selAlpha = ((i+1) == mech.selectedWeapon) ? 0.5 : 0.25; 
					MWDrawer.Fill(selColor, drawPos.x+groupOffs.x-120, drawPos.y + offs.y, 20, 22, selAlpha, flags);
				}
				
				MWDrawer.DrawString("ConsoleFont", String.Format("%d",g+1), drawPos+offs+groupOffs-(115,0), flags, translation:tint, alpha:alpha);
				groupOffs.x += xoff;
			}
			
			string ammoCount = "***";
			if(weap.ammoType) ammoCount = String.Format("\c[Gray]%d", mech.countAllAmmo(weap.ammoType));
			
			string weapRange = String.Format("%dm", weap.range);
			if(weap.projType) 
			{
				let defs = GetDefaultByType(weap.projType);
				weapRange = String.Format("%dm", defs.maxrange);
			}
		
			if(destroyed) 
				tint = Font.CR_DarkRed;
			
			string weapName = String.Format("%-13s", weap.DisplayName);
			weapName = weapName.MakeUpper();
			
			if(prefix) MWDrawer.DrawString("ConsoleFont", prefix, drawPos+offs - (140,0), flags, translation:tint, scale:(infoScale,infoScale));
			MWDrawer.DrawString("ConsoleFont", weapName, drawPos+offs+(0,3), flags, translation:tint, scale:(infoScale,infoScale));
			MWDrawer.DrawString("ConsoleFont", ammoCount, drawPos+offs + (285,3), flags | MWDrawer.SS_TEXT_RIGHT, translation:tint, scale:(infoScale,infoScale));
			MWDrawer.DrawString("ConsoleFont", weapRange, drawPos+offs + (235,3), flags | MWDrawer.SS_TEXT_RIGHT, translation:tint, scale:(infoScale*0.65,infoScale));
			offs.y += yoff;
*/