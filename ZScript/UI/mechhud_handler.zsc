class MechHUD_Handler : EventHandler
{
	ui bool hidingHUD;
	
	ui void HideHUD()
	{
		if(hidingHUD) return;
		
		Screen.EnableStencil(true);
		Screen.SetStencil(0, SOP_Increment, SF_ColorMaskOff);
		MWDrawer.DrawImage("Graphics/HUD/BLKPXL.png", (0,0), flags:0, alpha:1.0);
		Screen.SetStencil(1, SOP_Keep, SF_AllOn);
		hidingHUD = true;
	}
	ui void ShowHUD()
	{
		if(!hidingHUD) return;
		
		Screen.EnableStencil(false);
		Screen.ClearStencil();
		hidingHUD = false;
	}
	
	ui DrivableMech getPilotingMech(RenderEvent e)
	{
		let viewer = e.Camera;
		let drvObj = DrivableObjectPart(viewer);
		if( !drvObj) return NULL;
		
		let mech = DrivableMech(drvObj.base);
		return mech;
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		let mech = getPilotingMech(e);
		if(mech && mech.HUDType && !mech.shutdown) 
			HideHUD();
		else
			ShowHUD();
	}
	
	override void RenderOverlay(RenderEvent e)
	{		
		// Get pilot
		let mech = getPilotingMech(e);
		if(!mech) return;
		
		if(!mech.activeHUD)
		{
			mech.activeHUD = VehicleHUD(new(mech.HUDType));
			mech.activeHUD.mech = mech;
		}
		else
		{
			ShowHUD();
			mech.activeHUD.Update(mech);
			mech.activeHUD.Draw(e);
		}
		
		DrawOverlays(e);
	}
	
	override void InterfaceProcess(ConsoleEvent e)
	{
		let src = players[consoleplayer];
		let drvObj = DrivableObjectPart(src.Camera);
		if(!drvObj) return;
		
		let mech = DrivableMech(drvObj.base);
		if(!mech) return;
		
		Array<String> args;
		string cmds = e.Name;
		cmds.Split(args, ">");
		
		if(args[0] ~== "hud")
		{
			if(mech.activeHUD) 
				mech.activeHUD.NotifyHUD(args, e.Args[0]);
		}
	}
	
	play static void FlashScreen(int plrnum, string hexColor, double intensity, int tics)
	{
		SendInterfaceEvent(plrnum, String.Format("hud>flash>%s>%f", hexColor, intensity), tics);
	}
}

class VehicleHUDMessage : Object ui
{
	string msgID;
	double keepon;
	double duration;
	double lifetime;
	double alpha;
	string text;
	
	static VehicleHUDMessage Create(string txt, double lifetime, string msgID, class<VehicleHUDMessage> msgClass = "VehicleHUDMessage")
	{
		let msg = VehicleHUDMessage(new(msgClass));
		msg.keepon = 30;
		msg.lifetime = lifetime;
		msg.duration = lifetime;
		msg.text = txt;
		msg.alpha = 1.0;
		msg.msgID = msgID;
		
		return msg;
	}
	
	virtual void Draw(double deltaTime)
	{
		Font strFont = "ConsoleFont";
		int strFlags = MWDrawer.SS_NOASPECTCORRECTION | MWDrawer.SS_TEXT_CENTER | MWDrawer.SS_SCREEN_TOP_CENTER;
		vector2 strPos = (0,260);
		
		if(alpha <= 0) return;
		
		if(keepon <= 0)
		{
			lifetime -= deltaTime;
			alpha = lifetime / duration;
		}
		else keepon -= deltaTime;
		
		// Background
		let bgTex = TexMan.CheckForTexture("Graphics/HUD/MSGBAR.png");
		double height = strFont.getHeight();
		double strWidth = strFont.StringWidth(text) * 2.0;
		vector2 bgSize; 
		vector2 bgScale = (1,1);
		[bgSize.x, bgSize.y] = TexMan.GetSize(bgTex);
		bgSize = (bgSize.x * bgScale.x, bgSize.y * bgScale.y);
		double bgScaled = (strWidth + 25) / bgSize.x;
		
		MWDrawer.DrawTexture(bgTex, strPos + (0,height + 3), flags:strFlags, alpha:alpha, scale:(bgScaled,1.5));
		
		// Shadow
			//MWDrawer.DrawString("ConsoleFont", text, strPos+(2,2), flags:strFlags, alpha:alpha, tint:0xFF000000);
			
		// Original Text
		MWDrawer.DrawString("ConsoleFont", text, strPos, flags:strFlags, alpha:alpha);
	}
	
	virtual bool ShouldCleanup()
	{
		return (alpha <= 0);
	}
}

// HUD Base 
class VehicleHUD : Object ui
{
	const ANIM_FPS = 60.0;
	const POWERANIM = ANIM_FPS * 2.0; 

	double desiredFlashFade, flashFade, flashTimer;
	Color flashColor;	

	DrivableMech mech;
	double uiTics;
	double prevMS, deltatime;
	
	transient Shape2D radarCircle;
	
	Array<VehicleHUDMessage> messages;

	virtual void NotifyHUD(out Array<String> args, int duration)
	{		
		Name type = args[1];
		switch(type)
		{
			case 'notify':
				string strArg = args[2];
				string msgID = args[3];
				
				AppendMessage(CreateMessage(strArg, duration, msgID));
			break;
			
			case 'flash':
				Color col = args[2].ToInt(16);
				double intensity = args[3].ToDouble();
				SetupScreenFlash(col, duration, intensity);
			break;
			
			default: break;
		}
	}
		
	void SetupScreenFlash(Color col, double time, double intensity)
	{
		flashColor = col;
		flashTimer = time;
		desiredFlashFade = intensity;
	}
	
	// Overridable for easy switching to a custom HUD message class.
	virtual VehicleHUDMessage CreateMessage(string txt, double duration, string msgID)
	{
		return VehicleHUDMessage.Create(txt, duration, msgID);
	}
	
	virtual bool AppendMessage(VehicleHUDMessage msg)
	{
		// Do not add multiple, duplicate messages.
		for(int i = messages.Size()-1; i >= 0; i--)
		{
			let hudmsg = messages[i];
			if( (hudmsg.text == msg.text) || (msg.msgID != "" && hudmsg.msgID == msg.msgID) ) 
			{
				// Reset text for messages that need to be modified.
				hudmsg.text = msg.text;
			
				// Reset duration
				hudmsg.lifetime = msg.duration;
				
				// Shuffle message to front.
				messages.delete(i);
				messages.Insert(0, hudmsg);
				return false;
			}
		}
		
		// Add message
		messages.Push(msg);
		return true;
	}
	
	// Here for custom HUDs which might handle drawing these differenty.
	virtual void DrawHUDMessage(VehicleHUDMessage msg)
	{
		msg.Draw(deltaTime);
	}

	void drawAngledLine(double x, double y, int distance, double angle, double fov, double thickness, Color c)
	{
		vector2 toPos = (
			x + (cos(angle+fov)*distance),
			y - (sin(angle+fov)*distance)
		);
		MWDrawer.DrawThickLine(x,y,toPos.x,toPos.y, thickness, c, 1.0, MWDrawer.SS_NOASPECTCORRECTION);
	}
	
	void FillCircle(vector2 pos, double radius, Color col=Color(0xFF,0,0,0), double alpha=1.0, double points=60)
	{
		int angfrac = ceil(360/points);
		if(!radarCircle)
		{
			Shape2D circle = new("Shape2D");
			circle.PushCoord((0,0)); // Middle
			for(double i = 0; i <= points; i++) circle.PushCoord((cos(angfrac*i),sin(angfrac*i)));
			for(double i = 1; i <= points; i++) circle.PushTriangle(i,i+1,0);
			radarCircle = circle;
		}
		
		vector2 sc_res = (
			Screen.getWidth()/1920.0,
			Screen.getHeight()/1080.0
		);
		
		radarCircle.Clear(Shape2D.C_Verts);
		radarCircle.PushVertex((
			pos.x * sc_res.x,
			pos.y * sc_res.y
		)); // Middle
		
		for(double i = 0; i <= points; i++) 
		{
			radarCircle.PushVertex((
				(pos.x+cos(angfrac*i)*radius) * sc_res.x, 
				(pos.y+sin(angfrac*i)*radius) * sc_res.y
			));
		}
		Screen.DrawShape(TexMan.CheckForTexture("BLKPXL", TexMan.Type_Any), false, radarCircle, DTA_ColorOverlay, col, DTA_Alpha, alpha);
	}
	
	void DrawCircle(Color col = 0xFFAAAAAA, vector2 pos=(0,0), double radius=500, uint flags = MWDrawer.SS_NOASPECTCORRECTION)
	{
		double step = 1.0 / (radius/100);
		for(double i = 0; i < 360; i+=step)
		{
			double xpos = pos.x + (cos(i)*radius);
			double ypos = pos.y + (sin(i)*radius);
			MWDrawer.DrawImage("GRYPXL", (xpos,ypos), flags, tint:col);
		}
	}
	
	void drawRadarLine( double x0, double y0, double x1, double y1, Color col, vector2 origin = (0,0), double alpha = 1.0, double maxdist = 128)
	{	
		double scrw = Screen.getWidth();
		double scrh = Screen.getHeight();
		double xres = scrw/1920.;
		double yres = scrh/1080.;

		double fromdist = DrivablesMath.Distance2D((x0,y0), origin);
		double todist = DrivablesMath.Distance2D((x1,y1), origin);
		if(fromdist > maxdist*1.2 && todist > maxdist*1.2) return;
		
		if( (fromdist > maxdist || todist > maxdist) ) 
		{
			double lineangle = atan2(y1-y0, x1-x0);
			double dist = DrivablesMath.Distance2D((x0,y0),(x1,y1));
			vector2 linedir = (cos(lineangle), sin(lineangle));
			double step = 1;
			
			double maxdist_fast = maxdist*maxdist;
			for(int i = 0; i < dist; i+=step)
			{
				vector2 pixpos = (x0 + (linedir.x*i), y0 + (linedir.y*i) );
				double fulldist = DrivablesMath.Distance2D(pixpos, origin);
				if(fulldist > maxdist) continue;
				MWDrawer.DrawImage("BLKPXL", pixpos, MWDrawer.SS_NOASPECTCORRECTION, 1.0, (1.0,1.0), tint:col);
			}
			return;
		}

		Screen.DrawThickLine(x0*xres,y0*yres,x1*xres,y1*yres,2,col,alpha*255);
	}	
	
	clearscope vector2 SwapVector(vector2 vec)
	{
		double oldx = vec.x;
		vec.x = vec.y;
		vec.y = oldx;
		return vec;
	}
		
	static void DrawRect(Color col, vector2 pos, vector2 size, uint flags = 0)
	{
		MWDrawer.Fill(col, pos.x,pos.y, size.x, size.y, flags:flags); 
	}
	
	string GetHeatString(Name unit = 'K')
	{
		double baseTemp = 273.0 + 20.0;
		double maxTemp = mech.maxKelvin;
		double heatPerc = mech.curHeat / mech.maxHeat;
		
		switch(unit)
		{
			case 'P':
				maxTemp = 100.0;
				unit = "%";
			break;
			case 'C':
				baseTemp -= 273.0;
				maxTemp -= 273.0;
			break;
			case 'F':
				baseTemp -= 273.0;
				maxTemp -= 273.0;
				
				baseTemp = (baseTemp * 1.8) + 32.0;
				maxTemp  = (maxTemp  * 1.8) + 32.0;
			break;
		}
			
		return String.Format("[%4d %s]", round((heatPerc*maxTemp)), unit);
	}
	
	virtual void Update(DrivableMech mech)
	{
		self.mech = mech;
	
		// Keep track of time, always.
		if(!prevMS)
		{
			prevMS = MSTimeF();
			return;
		}
		double ftime = MSTimeF()-prevMS;
		prevMS = MSTimeF();
		double dtime = 1000.0 / ANIM_FPS;
		deltatime = (ftime/dtime);
		uiTics += deltaTime;
		
		// Render HUD messages
		foreach(msg : messages)
			DrawHUDMessage(msg);
		
		// Clean messages
		for(int i = messages.Size()-1; i >= 0; i--)
		{
			if(messages[i].ShouldCleanup())
				messages.delete(i);
		}
	}
	
	virtual void DrawDebugInv(vector2 pos, MechHardpoint hp, string title)
	{
		vector2 inv = pos;
		vector2 invOffs = (0,80);
		double infoOffs = 20;
		double spacing = 20;
		
		MWDrawer.DrawString("ConsoleFont", title, inv);
		Array<HardpointMount> energyPoints, ballisticPoints, missilePoints;
		hp.getMountPoints(energyPoints, "Energy");
		hp.getMountPoints(ballisticPoints, "Ballistic");
		hp.getMountPoints(missilePoints, "Missile");
		
		string mountsText = String.Format("E: %d, B: %d, M: %d", energyPoints.Size(), ballisticPoints.Size(), missilePoints.Size());
		MWDrawer.DrawString("ConsoleFont", mountsText, inv + (0,infoOffs));
		infoOffs += 20;
		
		MWDrawer.DrawString("ConsoleFont", String.Format("Armor: %d / %d", hp.armorPoints, hp.maxArmor-hp.maxRearArmor), inv + (0,infoOffs));
		infoOffs += 20;
		
		if(hp.hasRearArmor)
		{
			MWDrawer.DrawString("ConsoleFont", String.Format("Rear: %d / %d", hp.rearArmor, hp.maxRearArmor), inv + (0,infoOffs));
			infoOffs += 20;
		}
		MWDrawer.DrawString("ConsoleFont", String.Format("Slots: %d / %d", hp.slots, hp.maxSlots), inv + (0,infoOffs));

		// Background slots
		inv.y += infoOffs-60;
		int maxSlots = hp.maxslots;
		MWDrawer.Fill(0xFF000000, inv.x, inv.y+invOffs.y, 210, (maxSlots+1)*spacing);
		for(int i = 0; i < maxSlots+1; i++)
		{
			uint txtTint = Font.CR_Black;
			MWDrawer.DrawString("ConsoleFont", "_____________", inv+invOffs+(0,spacing*0.25), translation:txtTint);
			invOffs.y += spacing;
		}
		invOffs.y -= (maxSlots*spacing);
	
		// Draw items
		for(int i = 0; i < hp.items.Size(); i++)
		{
			let item = i < hp.items.Size() ? hp.items[i] : NULL;
			if( item && (item is "MechDynamicStructure") ) continue;
			
			uint txtTint = Font.CR_Black;
			if(item)
			{
				txtTint = Font.CR_White;
				if(!item.movable) txtTint = Font.CR_Red;
				if(item.checkDestroyed()) txtTint = Font.CR_Black;
				
				MWDrawer.DrawString("ConsoleFont", item.displayName, inv+invOffs, translation:txtTint); 
				invOffs.y += spacing;
				
				for(int x = 0; x < item.size-1; x++)
				{
					MWDrawer.DrawString("ConsoleFont", "=============", inv+invOffs, translation:txtTint);
					invOffs.y += spacing;
				}
			}
		}
		
		// Draw structural slots
		for(int i = 0; i < hp.items.Size(); i++)
		{
			let item = i < hp.items.Size() ? hp.items[i] : NULL;
			uint txtTint = Font.CR_Brown;
			if(item.checkDestroyed()) txtTint = Font.CR_Black;
			
			if(item && (item is "MechDynamicStructure") )
			{
				if(item.size > 0) txtTint = Font.CR_Red;
				MWDrawer.DrawString("ConsoleFont", item.displayName, inv+invOffs, translation:txtTint); 
				invOffs.y += spacing;
			}
		}
	}
	
	// Draw HUD
	virtual void Draw(RenderEvent e) {}
}