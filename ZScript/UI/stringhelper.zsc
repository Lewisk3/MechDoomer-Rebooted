class MWStringHelper Abstract
{
	static bool IsUpper(uint ch)
	{
		return ch != 0 ? ch == String.CharUpper(ch) : false;
	}
	
	static void SplitByUppercase(String src, out Array<String> tokens)
	{
		tokens.Clear();
		int foundat = -1;
		for(int i = 0; i <= src.Length(); i++)
		{
			if(MWStringHelper.IsUpper(src.ByteAt(i)))
			{
				if(foundat >= 0) tokens.Push(src.Mid(foundat, i-foundat));
				foundat = i;
			}
			else if(i >= src.Length() && foundat >= 0) 
			{
				tokens.Push(src.Mid(foundat, src.Length()));
				break;
			}
		}
	}
	
	static int countLnBreaks(string str)
	{
		int lnBreaks = 0;
		string newln = "\n";
		for(int i = 0; i < str.Length(); i++)
			if(str.byteAt(i) == newln.byteAt(0)) lnBreaks++;
		return lnBreaks;
	}
	
	// Attempt to automatically insert linebreaks in string.
	static string formatLnBreaks(String str, int lineLen)
	{
		// Split string into words.
		Array<string> words;
		string newline = "\n";
		str.Split(words, " ");
		
		string outStr;
		int carriage = 0;
		for(int i = 0; i < words.Size(); i++)
		{
			string word = words[i];
			bool manualNewLine = word.IndexOf(newline, 0) != -1;
			
			int len = word.Length() + 1; // Add " " space at start of new word.
			carriage += len;
			
			if(manualNewLine) carriage = len-1;
			if(carriage > lineLen) 
			{
				outStr = outStr .. "\n";
				carriage = len-1;
			}

			outStr = String.Format("%s %s", outStr, word);
		}
		
		return outStr;
	}
	 
	static bool, string parseStrElement(String type, String ln)
	{
		string lnLower = ln.MakeLower();
		type = type.MakeLower();
				
		int element_S = lnLower.IndexOf(type);
		int element_E = lnLower.IndexOf("\n", element_S);
		if(element_S < 0 || element_E < 0) return false, "";
		
		string output = ln.Mid(element_S, element_E-element_S);
		int strBegin = output.IndexOf("\"");
		int strEnd = output.IndexOf("\"", strBegin+1);
		
		return true, output.Mid(strBegin+1, (strEnd-strBegin)-1);
	}
}