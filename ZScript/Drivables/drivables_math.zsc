// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class DrivablesMath Abstract
{	
	const PI = 3.14159265358;
	const RAD = 180.0/PI;
	const TWOPI = 2*PI;

	play static void AlignToPlane(Actor a, double pitchAdjust = 0, double rollAdjust = 0, bool ceiling = false, double adjustSpeed = 2, bool ignorepitch = false, bool ignoreroll = false)
	{
		//Original code by ZZYZX & Nash Muhandes
		if (!a) return;
		double ceilingAdjust = 0;
		Vector3 fnormal;
		if (!ceiling)
		{
			fnormal = a.CurSector.FloorPlane.Normal;
		}
		else
		{
			fnormal = a.CurSector.CeilingPlane.Normal;
			ceilingAdjust = 180.0;
		}
		Vector2 fnormalp1 = (fnormal.x != 0 || fnormal.y != 0) ? (fnormal.x, fnormal.y).Unit() : (0, 0);
		Vector2 fnormalp2 = ((fnormal.x, fnormal.y).Length(), fnormal.z);
		double dang = a.Angle;
		double fang = atan2(fnormalp1.y, fnormalp1.x);
		double fpitch = atan2(fnormalp2.x, fnormalp2.y);
		double ddiff1 = sin(fang - (dang - pitchAdjust));
		double ddiff2 = cos(fang - (dang - rollAdjust));
		
		double pitchTarget = (fpitch * ddiff2 - pitchAdjust) + ceilingAdjust;
		double rollTarget = (-fpitch * ddiff1 - rollAdjust) + ceilingAdjust;
		double angleTarget = dang + ceilingAdjust;
		
		if(adjustSpeed == 0)
		{
			adjustSpeed = 180;
		}
		
		if(!ignorepitch)
		{
			if(a.Pitch < pitchTarget)
			{
				a.A_SetPitch(Clamp(a.pitch + adjustSpeed, a.pitch, pitchTarget));
			}
			else if(a.Pitch > pitchTarget)
			{
				a.A_SetPitch(Clamp(a.pitch - adjustSpeed, pitchTarget, a.pitch));
			}
		}
		
		if(!ignoreroll)
		{
			if(a.Roll < rollTarget)
			{
				a.A_SetRoll(Clamp(a.roll + adjustSpeed, a.roll, rollTarget));
			}
			else if(a.Roll > rollTarget)
			{
				a.A_SetRoll(Clamp(a.roll - adjustSpeed, rollTarget, a.roll));
			}
		}

		if(a.Angle < angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle + adjustSpeed, a.angle, angleTarget));
		}
		else if(a.Angle > angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle - adjustSpeed, angleTarget, a.angle));
		}
	}
	
	// Generate forward facing vector from angle/pitch.
	static vector3 VecFromAngles(double angle, double pitch, double mag = 1.)
	{
		double cosp = cos(pitch);
		return (cos(angle)*cosp, sin(angle)*cosp, -sin(pitch)) * mag;
	}
	
	static double sign(double num)
	{
		if(!num) return 0;
		return num > 0 ? 1 : -1;
	}

	// Linear interpolate
	static double Lerp(double a, double b, double lerpFactor)
	{
		double result = ((1.f - lerpFactor) * a) + (lerpFactor * b);
		return result;
	}
	
	// Linear interpolate 3D vectors
	static vector3 Lerp3D(vector3 a, vector3 b, double lerpfactor)
	{
		vector3 result = a;
		result.x = Lerp(result.x,b.x,lerpfactor);
		result.y = Lerp(result.y,b.y,lerpfactor);
		result.z = Lerp(result.z,b.z,lerpfactor);
		return result;
	}
	
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpDegrees(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	
	static void AngleSlerp(out double a, double b, double speed)
	{
		double angDiff = DrivablesMath.AngleDiff(a, b);
		if(abs(angDiff) < speed) 
		{
			a += angDiff;
			return;
		}
		a += speed * DrivablesMath.Sign(angDiff);
	}
	
	static void ClampAngles(out double a, double baseAngle, double range)
	{
		if(range < 360)
		{
			double angDiff = DrivablesMath.AngleDiff(a, baseAngle);
			if(angDiff >  range) a = baseAngle - range;
			if(angDiff < -range) a = baseAngle + range;
		}	
	}
	
	// Pitch between 2 vectors.
	static double getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	
	// Distance 3D on vectors, not actors.
	static double Distance3D(vector3 one, vector3 two)
	{
		return (one-two).Length();
	}
	
	// Distance 2D on vectors, not actors.
	static double Distance2D(Vector2 one, Vector2 two)
	{
		return (one-two).Length();
	}
	
	// Distance 2D on vectors, not actors.
	static double Distance2DSquared(Vector2 one, Vector2 two)
	{
		return ( ((two.x-one.x)**2) + ((two.y-one.y)**2) ); 
	}

	// Thanks to: Boondorl for the math here! 
	static vector3 DiffToLocal(vector3 one, vector3 two, vector2 angles)
	{
		vector3 forward = (Actor.AngleToVector(angles.x, cos(angles.y)), -sin(angles.y));
		vector3 right   = (Actor.AngleToVector(angles.x-90),0);
		vector3 up      = (Actor.AngleToVector(angles.x, cos(angles.y-90)), -sin(angles.y-90));
		
		vector3 diff = level.Vec3Diff(two, one);
		vector3 rel  = (diff dot forward, diff dot right, diff dot up);
	
		return rel;
	}
	
	static vector3 getAxes(double angle, double pitch, double roll)
	{
		return V3Offset(angle, pitch, roll, 1.0,0,0);
	}
	
	// 3D Vector offset.
	static vector3 V3Offset(double fromangle, double frompitch, double fromroll, double forward, double leftright, double updown, double distance = 1.0)
    {	
		Quat dir = Quat.FromAngles(fromangle, frompitch, fromroll);
		return dir * ((forward, -leftright, updown) * distance);
    }
	
	static vector3 RelativeV3Offset(Actor source, double angleoffs, double pitchoffs, double rolloffs, double forward, double leftright, double updown, double distance = 1.0)
    {
		double a = source.angle + angleoffs;
		double p = source.pitch + pitchoffs;
		double r = source.roll  + rolloffs;
		vector3 vec = V3Offset(a, p, r, forward, leftright, updown, distance);
		
		vector3 frompos = (source.pos.xy, source.pos.z + source.height * 0.5);
		if(source.player) frompos.z = source.player.viewz;
		
		return level.vec3offset(frompos, vec);
    }
	
	// Intertial calculations for thrust on monsters.
	static double GetInertia(double emass, double smallmass = 200)
	{
		// Deviation from small weight, 0 means no deviation.
		double m = smallmass; // Base mass
		double d = 0.15; // Mass dropoff
		double x = (1. - (emass/m));
		double y = -d*(x**2) + 1;
		return clamp(y*0.75,0.1,1.0);
	}
	
	// Credits: https://www.arduino.cc/reference/en/language/functions/math/map/
	static double fmap(double x, double in_min, double in_max, double out_min, double out_max) 
	{
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
	
	// Credits: https://stackoverflow.com/a/28037434
	static double AngleDiff( double angle1, double angle2 )
	{
		double diff = ( angle2 - angle1 + 180 ) % 360 - 180;
		return diff < -180 ? diff + 360 : diff;
	}

	play static vector3, Actor getActorAim(Actor source, bool absolute = false, double absAngle = 0, double absPitch = 0)
	{
		double toAngle = source.angle;
		double toPitch = source.pitch;
		if(absolute) 
		{	
			toAngle = absAngle;
			toPitch = absPitch;
		}
	
		FLineTraceData lt;
		double aimZ = source.player ? source.player.viewz-source.pos.z : source.height * 0.5;
		source.LineTrace(toAngle, 1024*1024, toPitch, 0, aimZ, 64, data:lt);
		return lt.HitLocation, lt.HitActor;
	}
	
	play static vector3, Actor aimFrom(Actor src, vector3 pos, double angle, double pitch)
	{
		FLineTraceData lt;
		src.LineTrace(angle, 1024*1024, pitch, TRF_ABSPOSITION, pos.z, pos.x, pos.y, data:lt);
		return lt.HitLocation, lt.HitActor;
	}
	
	clearscope static vector3 SphereBetween(vector3 one, vector3 two, bool getDist = true)
	{
		vector3 diff = level.Vec3Diff(one, two);
		return (
			atan2(diff.y, diff.x),
			atan2(diff.z, sqrt((diff.x*diff.x) + (diff.y*diff.y))),
			getDist ? diff.Length() : 0 // Saves on performance.
		);
	}
	
	/* Summary:
    **  Simulates a damped spring.
    **
    ** Arguments:
    **  p: Current position
    **  r: Rest position
    **  v: Current velocity
    **  k: Spring coefficient
    **  d: Damping coefficient
    **
    ** Returns:
    **  The new velocity.
    */
    static double DampedSpring (double p, double r, double v, double k, double d) 
	{
        return -(d * v) - (k * (p - r));
    }
}