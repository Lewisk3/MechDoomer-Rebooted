class MechExplosion : EffectsActor
{
	DrivableMech mech;

	Sound explosionSound;
	Property ExplodeSound : explosionSound;
	
	Default
	{
		RenderStyle "Add";
		+BRIGHT;
		+ROLLSPRITE;
	}
	
	override void postBeginPlay()
	{
		super.postBeginPlay();
		if(!target) return;
		A_SetScale(scale.X * frandom[EXPLSRNG](0.5,1.25));
		A_SetRoll(roll + frandom[EXPLSRNG](0,360));
		
		mech = DrivableMech(target);
	}
	
	virtual void DoDebris()
	{
		// Debris spawn here
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 
			{
				A_SetScale(target ? Scale.X * target.scale.X : Scale.X);
				A_StartSound(explosionSound, CHAN_AUTO, CHANF_OVERLAP);
				return ResolveState("Explosion");
			}
		stop;
		
		Explosion:
			TNT1 A 1; // Explosion stuff here
		stop;
	}
}


class HardpointExplosion : MechExplosion
{
	Default
	{
		MechExplosion.ExplodeSound "Mech/Explosion/Hardpoint";
	}

	override void DoDebris()
	{
		EffectsHelper.SpawnFX("AutocannonExplosion", 10, pos, (angle+180, -pitch, roll), 4, (20,20,20), (20,20,20), 6, scale.X);
		EffectsHelper.SpawnFX("MissileEmber", 20, pos, (angle+180, -pitch, roll), 10, (5,5,5), (60,30,0), 4, scale.X);
	}

	States
	{
		Explosion:
			TNT1 A 0 DoDebris();
			FX58 ABCDEFGHIJKLMNOP 2;
			FX58 Q 1 A_Fadeout(0.1);
		wait;
	}
}

class ReactorExplosion : MechExplosion
{
	Default
	{
		MechExplosion.ExplodeSound "Mech/Explosion/Reactor";
	}

	override void DoDebris()
	{
		EffectsHelper.SpawnFX("AutocannonExplosion", 10, pos, (angle+180, -pitch, roll), 4, (20,20,20), (20,20,20), 6, scale.X);
		EffectsHelper.SpawnFX("MissileEmber", 20, pos, (angle+180, -pitch, roll), 10, (5,5,5), (60,30,0), 4, scale.X);
	}

	States
	{
		Explosion:
			TNT1 A 0 DoDebris();
			FX58 ABCDEFGHIJKLMNOP 2;
			FX58 Q 1 A_Fadeout(0.1);
		wait;
	}
}

// Hardpoint damage effects
class HardpointSmoke : EffectsActor
{
	Default
	{
		RenderStyle "Add";
		Scale 0.03;
		+ROLLSPRITE;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		alpha = frandom(0.5, 0.8);
		roll = random(0, 360);
	}
	
	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		vel.z += 0.01;
		A_SetScale(Scale.X * 1.1);
		alpha -= 0.02;
		SetOrigin(level.vec3offset(pos, vel), true);
	
		if(alpha <= 0.01) Destroy();
	}
	
	States
	{
		Spawn:
			MSMK A -1;
		stop;
	}
}
