// Lasers
class MechLaserWeapon : MechWeapon
{
	MechLaser laser;
	double laserHeat;
	double laserRange;
	bool continuous;
	int contLaserTime, maxLaserTime; // Applicable to continuous lasers, if the laser is continuously fired longer than this, it stops firing.
	bool firingLaser;
	class<MechLaser> laserType;
	Color laserColor;
	double pulseSpeed;
	Sound pulseSound;
	
	override void Defaults()
	{
		template = true;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		
		statName.Push("DAMAGE");
		statValue.Push(String.Format("%.2f", (damage * fireTime * MechHardpoint.DMGSCALE) ));
		statName.Push("HEAT");
		statValue.Push(String.Format("%.2f", (laserHeat/6.5) * fireTime) );
		statName.Push("COOLDOWN");
		statValue.Push(String.Format("%.2fs", cooldownTime / double(TICRATE) ));
		
		statName.Push(" ");
		statValue.Push(" ");
		statName.Push("MAX RANGE");
		statValue.Push(String.Format("%d", laserRange));
		statName.Push("OPTIMAL RANGE");
		statValue.Push(String.Format("%d", range));
		
		statName.Push(" ");
		statValue.Push(" ");
		statName.Push("DPS");
		statValue.Push(String.Format("%.2f", damage*TICRATE));
		statName.Push("HPS");
		statValue.Push(String.Format("%.2f", laserHeat*TICRATE));
		statName.Push("DPH");
		statValue.Push(String.Format("%d", damage / laserHeat));
	}
	
	override string GetShopDescription()
	{
		return "Generic Laser";
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{
		stats.Push("Range");
		values.Push(String.Format("%dm", laserRange));
		stats.Push("Raw Damage");
		double dmgPerSec = damage * (TICRATE / double(fireTime));
		values.Push(String.Format("%.2f/s", dmgPerSec));
		stats.Push("Heat");
		values.Push(String.Format("%.2f H/s", (laserHeat/6.5) * fireTime) );
		stats.Push("Cooldown");
		values.Push(String.Format("%.2fs", cooldownTime / double(TICRATE) ));
	}
	
	override double getCooldownTime()
	{
		return continuous ? fireTime : super.getCooldownTime();
	}
	
	// Called so long as the weapon's fire button is held.
	override void preFire()
	{
		if(!continuous || !laser) return;
		
		// Continuous laser firing
		if(canFire() && laser.time <= 1)
		{
			laser.time = fireTime;
			if(maxLaserTime) contLaserTime += fireTime;
		}
		
		if(maxLaserTime > 0 && contLaserTime > 0)
			cooldown = cooldownTime * (contLaserTime / double(maxLaserTime));
		
		// If we've been firing continuously for too long.
		if(contLaserTime >= maxLaserTime)
		{
			// Destroy laser
			laser.Destroy();
			cooldown = cooldownTime;
			contLaserTime = 0;
		}
	}
		
	override bool Fire(vector3 firePos)
	{
		if(laser) return true;
		
		WeapSound(fireSound);
		laser = MechLaser.FireLaser(parent, firePos, damage, fireTime, range, laserRange, laserType);
		laser.shade = laserColor;
		contLaserTime = fireTime;
		return true;
	}
	
	override double, double, double GetRanges()
	{
		return minrange, laserRange, 0;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		if(laser) 
		{
			modifyHeat(laserHeat);
			modifyEnergy(energyUse);
		
			if(pulseSpeed > 0)
			{
				laser.alpha = (cos(laser.getAge()*pulseSpeed));
				bool prevInvisible = laser.bInvisible;
				laser.bInvisible = laser.alpha <= 0;
				if(laser.bInvisible != prevInvisible) 
				{
					// Would be nice if the ternary operator supported Sound types...
					Sound sndpulse = "Laser/Pulse";
					if(pulseSound) sndpulse = pulseSound;
					WeapSound(sndpulse);
				}
			}
		
			if(mech.engine && mech.engine.energy < energyUse)
			{
				// Disable laser if low energy
				laser.Destroy();
			}
		}
	}
}

// Missiles
class MechMissileWeapon : MechWeapon
{
	bool doConverge;
	double spread;
	bool requiresTarget; // Weapon will not fire unless a target is locked in.
	bool perMissileFireSound;
	
	override void Defaults()
	{	
		template = true;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		readonly<MechProjectile> projDefs = NULL;
		
		double projRawDamage = 0;
		if(projType) projDefs = GetDefaultByType(projType);
		double cooldownSeconds = (fireTime+cooldownTime) / double(TICRATE);
		
		if(projDefs)
		{
			projDefs.trueDamage * projDefs.GetDamageModifier(null);
			
			statName.Push("DAMAGE");
			statValue.Push(String.Format("%.2f", (projRawDamage) * refireCount ));
		}
		else
		{
			statName.Push("\c[Orange]VARIABLE MUNITIONS");
			statValue.Push(" ");
		}
		
		statName.Push("HEAT");
		statValue.Push(String.Format("%.2f", heat * refireCount));
		statName.Push("FIRE RATE");
		statValue.Push(String.Format("%.1f/s", 1.0 / (refireDelay / double(TICRATE))));
		statName.Push("COOLDOWN");
		statValue.Push(String.Format("%.2fs", cooldownTime / double(TICRATE) ));
		
		if(projDefs)
		{
			statName.Push(" ");
			statValue.Push(" ");
			if(projDefs.minRange > 0)
			{
				statName.Push("MIN RANGE");
				statValue.Push(String.Format("%d", projDefs.minRange));
			}
			statName.Push("MAX RANGE");
			statValue.Push(String.Format("%d", projDefs.maxRange));
			
			statName.Push(" ");
			statValue.Push(" ");
			statName.Push("DPS");
			statValue.Push(
				String.Format(
					"%.2f", 
					(projRawDamage*refireCount) * ( 1.0/( (refireDelay+cooldownTime)/double(TICRATE) ) ) 
				) 
			);
		}
		
		statName.Push("HPS");
		statValue.Push(String.Format("%.2f", (heat*refireCount) / cooldownSeconds) );
		
		if(projDefs)
		{
			statName.Push("DPH");
			statValue.Push(String.Format("%d", (projRawDamage*refireCount) / (heat*refireCount)) );
		}
	}
	
	override string GetShopDescription()
	{
		return "Generic Missile Weapon";
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{				
		readonly<MechProjectile> projDefs = NULL;
		if(projType) projDefs = GetDefaultByType(projType);
		double cooldownSeconds = (fireTime+cooldownTime) / double(TICRATE);
		
		double minRange = -1;
		double maxRange = -1;
		double dmg = -1;

		if(projDefs)
		{
			minRange = projDefs.minRange;
			maxRange = projDefs.maxRange;
			double projRawDamage = projDefs.trueDamage * projDefs.GetDamageModifier(null);
			dmg = (projRawDamage*refireCount) * ( 1.0/( (refireDelay+cooldownTime)/double(TICRATE)) );
		}
		
		stats.Push("Range");
		if(minRange >= 0 && maxRange >= 0)
		{
			string rangeStr = String.Format("%dm", maxRange);
			if(minRange > 0) rangeStr = String.Format("%dm to %s", minRange, rangeStr);
			
			values.Push(rangeStr);
		}
		else
			values.Push("From Ammo");
		
		stats.Push("Raw Damage");
		if(dmg >= 0)
			values.Push(String.Format("%d", dmg));
		else
			values.Push("From Ammo");
	
		stats.Push("Heat");
		values.Push(String.Format("%.2f H/s", (heat*refireCount) / cooldownSeconds) );
		stats.Push("Cooldown");
		values.Push(String.Format("%.2fs", cooldownTime / double(TICRATE) ));
	}
	
	override vector3 getFirePos()
	{
		int missileSlot = !refire ? 0 : (refireCount - refire);
		return mount.getPos(index:missileSlot);
	}
	
	override MechMountDeco OnMount()
	{
		// Setup mount deco if defined.
		if(!mountDeco) return NULL;
		
		for(int i = 0; i < min(mount.countOffsets(), refireCount); i++)
			mountDecoObject = MechMountDeco.Attach(self, mountDeco, i);
		
		return mountDecoObject;
	}
	
	override bool Fire(vector3 firePos)
	{
		// Setup weapon refire on the first Fire call.
		if(!refire) return DoRefire();
		
		/*
		double slotNum = refireCount - refire;
		double row = floor(slotNum / 3.0);
		
		double xoffs = 4 * (slotNum - (row*3.0));
		double yoffs = 4 * row;
		
		xoffs *= parent.Scale.X;
		yoffs *= parent.Scale.X;
		*/
		
		// Adjust to scale. Y Scale is unsupported.
		vector2 mslSpread = (
			frandom[MissileSpread](-spread, spread),
			frandom[MissileSpread](-spread, spread)
		) * parent.scale.X;

		// Only play weapon Fire sound on the first true Fire call.
		if(refire == refireCount || perMissileFireSound) WeapSound(fireSound, randomPitch:perMissileFireSound);
		
		// Shoot projectile.
		let proj = MechProjectile(EffectsHelper.Fire3DProjectile(parent, parent.lookingPos, projType, firePos.x, firePos.y, firePos.z, doConverge, mslSpread.x, mslSpread.y));
		proj.master = mech.driver;
		proj.homingTarget = homingTarget;
		
		modifyHeat(heat);
		depleteAmmo(ammoUse);
		return true;
	}
	
	override bool CanFire()
	{
		return super.canFire() && (homingTarget || !requiresTarget);
	}
}

// Ballistics
class MechBallisticWeapon : MechWeapon
{
	bool justFired;
	Sound reloadSound;
	double spread;
	double fireCount;
	bool disableMountRecoil;
	Actor firedProjectile;

	override void Defaults()
	{	
		template = true;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		
		let projDefs = GetDefaultByType(projType);
		double cooldownSeconds = (fireTime+cooldownTime) / double(TICRATE);
		double projSpeedKPH = projDefs.speedKPH ? projDefs.speedKPH : MechEngine.speedToKPH(projDefs.Speed);
		int metersPerSeconds = (projSpeedKPH / 3600.0) * 1000;
		double projRawDamage = projDefs.trueDamage * projDefs.GetDamageModifier(null);
	
		statName.Push("DAMAGE");
		statValue.Push(String.Format("%.2f", projRawDamage));
		statName.Push("HEAT");
		statValue.Push(String.Format("%.2f", heat));
		statName.Push("FIRE RATE");
		statValue.Push(String.Format("%.1f/s", 1.0 / cooldownSeconds));
		statName.Push("COOLDOWN");
		statValue.Push(String.Format("%.2fs", cooldownTime / double(TICRATE) ));
		
		statName.Push(" ");
		statValue.Push(" ");
		if(projDefs.minRange > 0)
		{
			statName.Push("MIN RANGE");
			statValue.Push(String.Format("%d", projDefs.minRange));
		}
		statName.Push("MAX RANGE");
		statValue.Push(String.Format("%d", projDefs.maxRange));
		statName.Push("OPTIMAL RANGE");
		statValue.Push(String.Format("%d", projDefs.maxRange * 0.5));
		statName.Push("PROJ SPEED");
		statValue.Push( String.Format("%d m/s", metersPerSeconds) );
		
		statName.Push(" ");
		statValue.Push(" ");
		statName.Push("DPS");
		statValue.Push(String.Format("%.2f", projRawDamage * (1.0 / cooldownSeconds) ));
		
		if(heat > 0)
		{
			statName.Push("HPS");
			statValue.Push(String.Format("%.2f", heat / cooldownSeconds));
			statName.Push("DPH");
			statValue.Push(String.Format("%d", projRawDamage / heat));
		}
	}
	
	override string GetShopDescription()
	{
		return "Generic Ballistic Weapon";
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{
		let projDefs = GetDefaultByType(projType);
		
		double cooldownSeconds = (fireTime+cooldownTime) / double(TICRATE);
		double minRange = projDefs.minRange;
		double maxRange = projDefs.maxRange;
		double projRawDamage = projDefs.trueDamage * projDefs.GetDamageModifier(null);
		

		stats.Push("Range");
		string rangeStr = String.Format("%dm", maxRange);
		if(minRange > 0) rangeStr = String.Format("%dm to %s", minRange, rangeStr);
		
		values.Push(rangeStr);
		
		stats.Push("Raw Damage");
		values.Push(String.Format("%.2f", projRawDamage));
		stats.Push("Heat");
		values.Push(String.Format("%.2f Heat/Shot", heat));
		stats.Push("Cooldown");
		values.Push(String.Format("%.2fs", cooldownSeconds));
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if( justFired && (cooldown <= S_GetLength(reloadSound) * 36.0) && checkAmmo() >= ammoUse )
		{
			// If we've just fired and fireTime has ended, play reload sound.
			parent.A_StartSound(reloadSound, CHAN_BODY, CHANF_OVERLAP);
			justFired = false;
		}
	}
	
	override void A_Recoil(double pitchAmt, double pushBack)
	{
		super.A_Recoil(pitchAmt, pushBack);
		
		// Push mount back, if present.
		if(mountDecoObject && !disableMountRecoil) 
		{
			double mountRecoil = (pitchAmt * 12.0);
			mountDecoObject.animOffs.x += mountRecoil;
		}
	}
	
	override bool Fire(vector3 firePos)
	{
		// Setup weapon refire on the first Fire call.
		if(!refire && refireCount > 0) DoRefire();
	
		for(int i = 0; i < max(1, fireCount); i++)
		{
			vector2 projSpread = (
				frandom[BallisticSpread](-spread, spread),
				frandom[BallisticSpread](-spread, spread)
			) * parent.scale.X;
		
			firedProjectile = EffectsHelper.Fire3DProjectile(parent, parent.lookingPos, projType, firePos.x, firePos.y, firePos.z, true, projSpread.x, projSpread.y);
			firedProjectile.master = mech.driver;
		}
		
		WeapSound(fireSound);
		modifyHeat(heat);
		depleteAmmo(ammoUse);
		justFired = true;
		
		return true;
	}
}

// UAC
class UltraAC : MechBallisticWeapon
{
	string baseName;
	int jamChance;
	int jamNotifyWait; // Wait this many tics before playing the jammed SFX.
	bool jammed;
	
	virtual void SetupUAC(double jamperc = 10)
	{
		baseName = displayName;
		refireCount = 1;
		refireDelay = fireTime*4;
		ammoUse = 1;
		jamChance = jamperc;
	}

	override void Defaults()
	{	
		template = true;
	}
	
	virtual void SetJammed(bool onoff)
	{
		jammed = onoff;
		if( jammed) displayName = "\c[Red]" .. baseName .. " - JAMMED\c[White]";
		if(!jammed) displayName = baseName;
	}
	
	override void preFire()
	{
		// Play weapon jammed sound.
		if(jammed && jamNotifyWait <= 0) 
		{
			parent.A_StartSound("Ballistic/Jammed", CHAN_BODY, CHANF_OVERLAP);
			jamNotifyWait = 10;
		}
	}
	
	override bool Fire(vector3 firePos)
	{
		if(random[UACRNG](0,100) <= jamChance && refire >= refireCount)
		{
			// Weapon jammed
			cooldown = 3.0 * TICRATE;
			parent.A_StartSound("Ballistic/Jammed", CHAN_BODY, CHANF_OVERLAP);
			SetJammed(true);
			return true;
		}
		
		return super.Fire(firepos);
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		if(jammed && jamNotifyWait)
			jamNotifyWait--;
		
		if( jammed && cooldown <= 0)
		{
			SetJammed(false);
			parent.A_StartSound("Ballistic/Autocannon/Reload", CHAN_BODY, CHANF_OVERLAP);
		}
	}
}