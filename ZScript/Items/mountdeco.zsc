class MechMountDeco : EffectsActor
{
	vector3 offs;
	int mountIndex;
	MechWeapon src;
	vector3 animOffs;
	
	Property MountOffset : offs;
	
	Default
	{
		Scale 1.5;
		MechMountDeco.MountOffset (0, 0, 0);
		+INTERPOLATEANGLES;
	}
	
	static MechMountDeco Attach(MechWeapon src, class<MechMountDeco> type, int mountIndex = 0)
	{
		let mountDeco = MechMountDeco(Spawn(type));
		if(mountDeco)
		{
			mountDeco.src = src;
			mountDeco.mountIndex = mountIndex;
		}
		
		return mountDeco;
	}
	
	virtual void followMountPos()
	{
		if(!src.parent || !src.mount) return;
		
		double itemMountScale = src.mountDecoScale;
		if(!itemMountScale) itemMountScale = 1.0;
		itemMountScale *= src.mount.decoScale;
		
		vector3 mountPos = src.mount.getOffset(mountIndex) + (offs*itemMountScale) + src.mountDecoOffs + animOffs;

		double sc = src.parent.Scale.X;
		mountPos = src.parent.OffsetPos(mountPos.x * sc, mountPos.y * sc, mountPos.z * sc);
		
		SetOrigin(mountPos, true);
		A_SetAngle(src.parent.angle, SPF_INTERPOLATE);
		A_SetPitch(src.parent.pitch, SPF_INTERPOLATE);
		A_SetRoll(src.parent.roll, SPF_INTERPOLATE);
		
		A_SetScale(default.scale.X * src.parent.scale.X * itemMountScale);
	}
	
	override void Tick()
	{
		super.Tick();
			
		// Determine when this mount needs to go away.
		// We don't need to pass mech to weapons to check if they're equipped.	
		if(!src || !src.isEquipped(null) || src.checkDestroyed())
		{
			Destroy();
			return;
		}
	
		followMountPos();
		animOffs *= 0.95;
	}

	States
	{
		Spawn:
			MODL A -1;
		stop;
	}
}

class AMSMountDeco : MechMountDeco {}

class LaserMountDeco : MechMountDeco {}
class PPCMountDeco : MechMountDeco 
{
	Default
	{
		MechMountDeco.MountOffset (-5,0,0);
	}
}

class ERPPCMountDeco : PPCMountDeco {}

class ACMountDeco : MechMountDeco 
{
	double maxFWOffs;
	
	Property MaxRecoil : maxFWOffs;

	Default
	{
		MechMountDeco.MountOffset (-15,0,0);
		ACMountDeco.MaxRecoil 10;
	}
	
	override void Tick()
	{
		// Setup maximum recoil offset(s)
		animOffs.x = max(-maxFWOffs, animOffs.x);
		
		super.Tick();
	}
}

class GaussMountDeco : ACMountDeco
{
	Default
	{
		MechMountDeco.MountOffset (-10,0,0);
		ACMountDeco.MaxRecoil 10;
	}
}

class MissileMountDeco : MechMountDeco 
{
	override void Tick()
	{	
		super.Tick();
		if(!src || !src.mount) return;
		
		int curAmmo = src.countAmmo();
		bool noAmmo = (curAmmo < (mountIndex+1));
		bInvisible = noAmmo;
		
		if(noAmmo) animOffs.x = -4;
	
		if(!src.refire) return;
		
		int fireIndex = (src.refireCount - src.refire) % src.mount.countOffsets();
		
		if(fireIndex == mountIndex)
			animOffs.x -= 2;
	}
}

class MGunMountDeco : MechMountDeco 
{
	double spin, spinAccel;
	int prevAmmo;
	
	override void followMountPos()
	{
		super.followMountPos();
		int curAmmo = src.checkAmmo();
		if(curAmmo != prevAmmo)
		{
			prevAmmo = curAmmo;
			spinAccel += 5;
		}
	}
	
	override void Tick()
	{
		super.Tick();
		
		spin += min(50, spinAccel);
		roll += spin;
		
		spinAccel *= 0.98;
	}	
}