class PortableMunitions : Inventory
{
	Default
	{
		Inventory.MaxAmount 10;
		
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.INVBAR;
		
		Inventory.Icon "AMSTA0";
	}
	
	override bool Use(bool pickup)
	{
		// Ensure munition stations don't stack on eachother.
		bool canUse = true;
		let it = ThinkerIterator.Create("MunitionsStation");
		MunitionsStation st;
		while(st = MunitionsStation(it.Next()))
		{
			if(st.carrier == Owner) 
			{
				canUse = false;
				break;
			}
		}
		
		if(!canUse) return false;
		
		let mst = Spawn("MunitionsStation", Owner.pos);
		if(mst) mst.Used(Owner);
		
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A -1;
		stop;
	}
}

class MunitionsStation : Actor
{
	// Ammo station can be relocated by pressing E while not in a mech.
	Actor carrier;
	int useWait;

	double munitions;
	double uses;
	double partialAmmoCounter;
	
	Property MunitionPoints : munitions;
	Property RefillUses : uses;

	Default
	{
		Radius 32;
		Height 8;
		
		+SOLID;
		-SHOOTABLE;
		+INTERPOLATEANGLES;
		
		MunitionsStation.MunitionPoints 100;
		MunitionsStation.RefillUses 20;
	}
	
	virtual void RearmMech(DrivableMech mech)
	{
		// Find depleted ammo
		Array<MechItem> ammoStructs;
		mech.FindAllItems("MechAmmo", true, ammoStructs);

		double fullAmmo; double curAmmo; double ammoPerc;
		foreach(itm : ammoStructs)
		{
			let am = MechAmmo(itm);
			fullAmmo += am.MaxAmmo;
			curAmmo += am.CurAmmo;
		}
		ammoPerc = (curAmmo == 0 || fullAmmo == 0) ? 0 : (curAmmo / fullAmmo);
		
		if(ammoPerc >= 1.0)
		{
			mech.SendHUDMessage("\c[Orange]Mech munitions are nominal.", msgID:"MunitionSTInfo");
			return;
		}
		else if(!mech.shutdown)
		{
			mech.SendHUDMessage("\c[Orange]Shutdown to initiate reloading process.", msgID:"MunitionSTInfo");
			return;
		}
		
		double restorePerc = 0.01;
		foreach(itm : ammoStructs)
		{
			let am = MechAmmo(itm);
			double curAmmoPerc = am.CurAmmo / am.MaxAmmo;
			if(curAmmoPerc >= 1.0) continue;
			
			partialAmmoCounter += am.MaxAmmo * restorePerc;
			if(partialAmmoCounter >= 1) 
			{
				am.CurAmmo += partialAmmoCounter;
				munitions -= (default.munitions / default.uses) * (partialAmmoCounter / am.MaxAmmo);
				
				partialAmmoCounter = 0;
			}
			am.CurAmmo = min(am.CurAmmo, am.MaxAmmo);
		}

		string reloadStatus = String.Format("\c[Orange]Reloading %d\%%", ammoPerc * 100);
		mech.SendHUDMessage(reloadStatus, msgID:"MunitionSTInfo");
	}

	override void Tick()
	{
		super.Tick();
		
		if(carrier)
		{
			A_SetRenderStyle(0.5, STYLE_Translucent);
			let carryDir = Quat.FromAngles(carrier.angle, carrier.pitch, carrier.roll);
			vector3 carryPos = (carrier.pos.xy, carrier.player.viewz);
			carryPos = level.vec3offset(carryPos, carryDir * (100,0,0)); 
			SetOrigin(carryPos, true);
			A_SetAngle(carrier.angle + 180);
			carrier.vel.xy *= 0.8;
			carrier.player.cheats |= CF_INTERPVIEW;
			
			bool pressedUse = (carrier.player.cmd.buttons & BT_USE) && !(carrier.player.oldbuttons & BT_USE);
			if(--useWait <= 0 && pressedUse) carrier = NULL;
			useWait = max(0, useWait);
			
			return;
		}
		
		A_SetRenderStyle(1.0, STYLE_Normal);
		
		let mechIt = ThinkerIterator.Create("DrivableMech");
		DrivableMech mech;
		
		while(mech = DrivableMech(mechIt.Next()))
		{
			let dist = Distance3D(mech);
			if(dist >= 32) continue;
			
			RearmMech(mech);
			break;
		}
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == carrier) return false;
		return super.CanCollideWith(other, passive);
	}
	
	override bool Used(Actor user)
	{
		if(!user.player) return false;
		
		// Cannot pick up while driving a vehicle.
		let drvObj = I_DrivingObject.Get(user);
		if(drvObj) return false;
		
		carrier = carrier ? NULL : user;
		useWait = 5;
		return false;
	}

	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}