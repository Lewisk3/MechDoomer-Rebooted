class MechRepairKit : MechItem 
{
	double armorRepairAmount;
	double internalRepairAmount;
	double itemRepairAmount;
	int repairTier;

	override void Defaults()
	{
		template = true;
	}
	
	override void GetUIColors(out int fontColor, out int bgColor)
	{		
		bgColor = 0xFF00C0C0;
	}
	
	override void GetDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		flavorText = itemDescription;
	
		if(armorRepairAmount)
		{
			statName.Push("Armor Repair: ");
			statValue.Push(String.Format("%d", armorRepairAmount));
		}
		if(internalRepairAmount)
		{
			statName.Push("Internals Repair: ");
			statValue.Push(String.Format("%d", internalRepairAmount));
		}
		if(itemRepairAmount)
		{
			statName.Push("Item Repair: ");
			statValue.Push(String.Format("%d", itemRepairAmount));
		}
	}
	
	override int TryAttach(MechHardpoint part)
	{
		if(armorRepairAmount)
		{
			if(part.totalArmorDamage <= 0) 
				return IAE_INVALID;
		
			let curArmor = part.mech.armorType;
			if(!curArmor) return IAE_NOTFOUND;
			
			if(curArmor.armorTier > repairTier) 
				return IAE_FAIL;
		}
		
		if(internalRepairAmount)
		{
			if(part.healthPoints >= part.maxHP) 
				return IAE_INVALID;
		
			let curStructure = part.mech.chassisStructure;
			if(!curStructure) return IAE_NOTFOUND;
			
			if(curStructure.structureTier > repairTier) 
				return IAE_FAIL;
		}
		
		if(!armorRepairAmount && !internalRepairAmount)
			return IAE_INVALID;
		
		parent = part;
		OnAttach();
		parent = NULL;
		
		return IAE_SUCCESS;
	}
	
	// Repair items
	override void OnAddon(MechItem destItem)
	{
		if(!itemRepairAmount) return;
		
		if(destItem.hp <= 10 && destItem.parent && destItem.parent.healthPoints > 0)
		{
			Deplete();
			if(destItem.hp <= 0)
			{
				destItem.hp = 0;
				destItem.Repair(1);
			}
			else destItem.Repair(itemRepairAmount);
		}
	}
	
	override void OnAttach()
	{
		parent.Repair(armorRepairAmount, internalRepairAmount);	
	}
}

class MechItemRepairKit : MechRepairKit
{
	override void Defaults()
	{
		displayName = "Item Repair Kit";		 
		itemRepairAmount = 5;
		repairTier = 0;
		addonCapable = true;
		itemDescription = (
			"\c[Yellow]Repairs items. Drag and drop on a damaged item to activate.\n"
			"If an item has been destroyed, using this item will repair it up to 1 HP."
		);
	}
	
	override string GetItemErrorMessage(int ERR_TYPE)	
	{
		switch(ERR_TYPE)
		{
			case IAE_INVALID: return "Repair kit cannot be used on hardpoints.";
			case IAE_FAIL: return "Failed to repair item.";
			default: return super.GetItemErrorMessage(ERR_TYPE);
		}
	}
}

// Armor Repair
class MechArmorRepairKit : MechRepairKit
{
	override void Defaults()
	{
		displayName = "Basic Armor Repair Kit";		 
		armorRepairAmount = 12; // 12 points of armor per kit.
		repairTier = 0;
		itemDescription = "\c[Yellow]Repairs Standard Armor. Drag and drop on a damaged hardpoint to activate.";
	}

	override string GetItemErrorMessage(int ERR_TYPE)	
	{
		switch(ERR_TYPE)
		{
			case IAE_INVALID: return "Hardpoint Armor is nominal.";
			case IAE_FAIL: return "Armor is too advanced to be repaired by this kit.";
			default: return super.GetItemErrorMessage(ERR_TYPE);
		}
	}
}

class AdvArmorRepairKit : MechArmorRepairKit 
{
	override void Defaults()
	{
		displayName = "Advanced Armor Repair Kit";		 
		armorRepairAmount = 10; // 10 points of armor per kit.
		repairTier = 3;
		itemDescription = "\c[Yellow]Repairs Standard or Advanced Armor. Drag and drop on a damaged hardpoint to activate.";
	}
}

// Internals Repair
class MechInternalsRepairKit : MechRepairKit
{
	override void Defaults()
	{
		displayName = "Basic Internal Repair Kit";		 
		internalRepairAmount = 10;
		repairTier = 0;
		itemDescription = (
			"\c[Yellow]Repairs standard internal structures." 
			"Drag and drop on a damaged hardpoint to activate.\n"
			"If a hardpoint has been destroyed, using this item will repair it up to 1 internal HP."
		);
	}

	override string GetItemErrorMessage(int ERR_TYPE)	
	{
		switch(ERR_TYPE)
		{
			case IAE_INVALID: return "Internals are nominal.";
			case IAE_FAIL: return "Mech internal structure is too advanced to be repaired by this kit.";
			default: return super.GetItemErrorMessage(ERR_TYPE);
		}
	}
	
	override void OnAttach()
	{
		if(parent.healthPoints <= 0)
		{
			parent.Repair(0, 1);
			return;
		}
		
		super.onAttach();
	}
}

class AdvInternalsRepairKit : MechInternalsRepairKit 
{
	override void Defaults()
	{
		displayName = "Advanced Internal Repair Kit";		 
		internalRepairAmount = 8;
		repairTier = 3;
		itemDescription = (
			"\c[Yellow]Repairs standard or advanced internal structures." 
			"Drag and drop on a damaged hardpoint to activate.\n"
			"If a hardpoint has been destroyed, using this item will repair it up to 1 internal HP."
		);
	}
}
