
class RepairDrone : DeployableDrone
{
	DrivableMech mech;
	double minRepairAmt;

	Property RepairPercent : minRepairAmt;

	Default
	{
		DeployableDrone.DroneClass "FieldRepairDrone";
		DeployableDrone.EnergyUse 0; //0.84;
		DeployableDrone.PowerOutput 3;
		RepairDrone.RepairPercent 60;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		// Get active mech.
		let drvObj = I_DrivingObject.Get(Owner);
		if(drvObj && drvObj.source) mech = DrivableMech(drvObj.source);
		
		if(!mech) return;
		
		bool repairBtn = mech.GetExtBtn(DrivableMech.BT_DRONEREPAIR, DriverBtns.BTS_DOWN);
		
		if(repairBtn && !dmo && mech.shutdown)
		{
			DeployDrone(DRM_MECHREPAIR);
			let repDrone = FieldRepairDrone(dmo);
			mech.activeDronePtr = dmo;
			repDrone.mech = mech;
			repDrone.minRepairAmt = minRepairAmt;
			repDrone.SetupHPList();
		} 
		else if(repairBtn && !mech.shutdown)
		{
			mech.SendHUDMessage("\c[Orange]Mech must be shutdown for repairs", 180, "RepairDroneMSG");	
		}
	}
}

class FieldRepairDrone : MechFieldDrone 
{
	int curHP;
	Array<MechHardpoint> hpList;
	double minRepairAmt;
	DrivableMech mech;
	DroneLaserGun droneLaser;

	override bool CheckTargetReachable(Actor act)
	{
		/*
		if(!droneLaser) return super.CheckTargetReachable(act);
		if(!act) return true;
		
		double dist = droneLaser.Distance3D(act);
		vector3 firePos = (act.pos.xy, act.pos.z + (act.height * 0.5));
		vector3 angles = level.sphericalCoords(droneLaser.pos, firePos, (0,0));
		
		LookExParams look;
		look.FOV = 120;
		if(!droneLaser.IsVisible(act, false, look)) return false; // Actor is behind wall.  
			
		FLineTraceData hitData;
		vector3 ltPos = level.vec3offset(droneLaser.pos, droneLaser.rotation * ((30,0,0)*Scale.X));
		droneLaser.LineTrace(-angles.x, dist, -angles.y, TRF_ABSPOSITION, ltPos.z, ltPos.x, ltPos.y, data:hitData);
		if(hitData.HitType == TRACE_HitActor && hitData.hitActor == act) return true;
		*/
		
		return true;
	}

	void SetupHPList()
	{
		hpList.Push(mech.head);
		hpList.Push(mech.leftarm);	
		hpList.Push(mech.rightArm);
		hpList.Push(mech.leftTorso);
		hpList.Push(mech.rightTorso);
		hpList.Push(mech.torso);
		hpList.Push(mech.leftLeg);
		hpList.Push(mech.rightLeg);
	}

	override void OnDeploy()
	{
		super.OnDeploy();
		droneLaser = DroneLaserGun.Setup(self, (8.8,0,-5.5));
		droneLaser.disabled = true;
		curHP = 0;
		
		if(!mech) return;
	} 
	
	bool A_TrackTarget(double minDist = 256, vector3 offs = (-20,0,20))
	{
		A_LookTowards(engagingTarget, 0.3);
		return A_FollowActor(engagingTarget, 0.1, minDist, offs);
	}
		
	States
	{
		MechRepair:
			DRON A 1 
			{
				bool repairBtn = mech.GetExtBtn(DrivableMech.BT_DRONEREPAIR, DriverBtns.BTS_DOWN);
			
				// Go through damaged mech hardpoints.
				MechHardpoint hp = hpList[curHP];
				
				// Armor must not be damaged to less than 60% 
				// drone cannot repair extensive damage.
				double minRepair = hp.maxArmor * (minRepairAmt/100.0); 
				bool canRepair = hp.totalArmorDamage > 0 && hp.totalArmorDamage < minRepair;
				if(!canRepair || hp.healthPoints <= 0)
				{
					// Cycle to next target
					return ResolveState("DroneCycle");
				}
				
				engagingTarget = hp;
				mech.SetDroneCamera();
				
				if(A_TrackTarget())
				{
					// Repair damage and restore armor points.
					droneLaser.disabled = false;
					hp.Repair(0.025, 0);
				}
					
				return SetDroneState(!repairBtn || !mech.shutdown, "DroneReturn");
			}
		loop;
		
		DroneCycle:
			DRON A 1
			{
				curHP++;
				if(curHP >= hpList.Size()-1) 
					return ResolveState("DroneReturn");
					
				return ResolveState(null);
			}
		goto MechRepair;
		
		DroneReturn:
			DRON A 1
			{			
				droneLaser.disabled = true;
				engagingTarget = mech.torso;
				return SetDroneState(A_TrackTarget(8, (0,0,0)), "GoAway"); 
			}
		loop;
		
		GoAway:
			DRON A 1 
			{
				mech.SetPilotCamera();
				A_FadeOut(0.1);
				if(alpha <= 0.01) data.UndeployDrone();
			}
		wait;
	}
}