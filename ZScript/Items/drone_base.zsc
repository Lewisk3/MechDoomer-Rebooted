class MechFieldDrone : Actor
{
	DeployableDrone data;
	Actor source; // Actor who deployed this drone.
	Actor engagingTarget; // Drone's target.
	int mode;

	vector3 animAngles; // Animated angles for inertial flight
	Quat rotation;
	
	vector3 cacheAngles; // Used to cache whatever angles needed. Used mostly for DRM_MANUAL.
	bool flyingManual;
		
	Default
	{
		Health 1000;
		Radius 5;
		Height 5;
		Scale 0.4;
		+SOLID;
		+INTERPOLATEANGLES;
		+NOGRAVITY;
		+CANPASS;
		+DROPOFF;
		+SLIDESONWALLS;
		+NOBLOCKMONST;
	}
		
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == source) return false;
		return super.CanCollideWith(other, passive);
	}
	
	static MechFieldDrone Deploy(DeployableDrone base, class<MechFieldDrone> drone, Actor source)
	{	
		let fieldDrone = MechFieldDrone(Actor.Spawn(drone, source.pos));
		if(fieldDrone)
		{
			fieldDrone.source = source;		
			fieldDrone.data = base;
			fieldDrone.OnDeploy();
		}
		return fieldDrone;
	}
	
	virtual void OnDeploy()
	{
		rotation = Quat.FromAngles(angle, pitch, roll);
		
		// If this isn't set the actor will disappear from this world, where does it go?
		// I'm willing to bet not even God knows. GZDoom is a perfect engine with no flaws.
		SetOrigin(source.pos, true);
		
		console.printf("Drone successfully deployed.");
	}
	
	virtual void A_LookSourceDirection(double interp = 0.3)
	{
		if(!source) return;
		Quat toRotation = Quat.FromAngles(source.angle, source.pitch, source.roll);
		
		rotation = Quat.SLerp(rotation, toRotation, interp);
	}
	
	virtual void A_FollowSource(double lookSpeed = 0.1, bool setPos = false)
	{
		if(!data || !source || !data.battery) return;

		double moveSpeed = data.battery.power;
		vector3 offs = data.mount.mountPos * Scale.X;

		Quat sourceDir = Quat.FromAngles(angle, pitch, roll);
		
		double bobz = 0;
		if(source.player)
		{
			double viewz = source.player.viewz;
			bobz = source.pos.z - (viewz - source.player.viewheight);
		}
		
		vector3 sourcePos = (source.pos.xy, (source.pos.z + source.height) - bobz);
		vector3 targetPos = level.vec3offset(sourcePos, sourceDir * offs);
		double dist = DrivablesMath.Distance3D(pos, targetPos);
		
		if( setPos || dist >= 512) 
		{
			SetOrigin(targetPos, true);
			return;
		}
		
		if(dist <= 128)
			A_LookSourceDirection(lookSpeed);
		
		let diff = level.vec3diff(pos, targetPos).Unit();
		vel += diff * (min(1.0, DrivablesMath.fmap(dist, 0, 256, 0, 1.0)) * moveSpeed);
	}
	
	virtual void A_ProcessPilot()
	{
		// Source is the pilot of this drone.
		if(!source.player || !data) return;
		
		UserCmd cmd = source.player.cmd;
		bool hasPower = data.battery && data.battery.charge > 0;
		
		if(!flyingManual)
		{
			cacheAngles = (source.angle, source.pitch, source.roll);
			flyingManual = true;
		}
		
		// Keep pilot
		source.SetCamera(self);
		source.vel *= 0;
		source.player.vel = source.vel.xy;
		if(source.player.ReadyWeapon)
		{
			let psp = source.player.FindPSprite(PSP_WEAPON);
			if(psp) psp.tics = -1;
			source.player.weaponstate &= ~WF_WEAPONREADY;
		}
		
		// Movement
		double fw = cmd.forwardmove;
		double lr = cmd.sidemove;
		
		// Update view
		double scalar = (360 / 65536.0);

		double cmdYaw   =  cmd.yaw   * scalar;
		double cmdPitch = -cmd.pitch * scalar;
		double cmdRoll  =  cmd.roll  * scalar;
		
		// Create quaternion based on look delta
		Quat input = Quat.FromAngles(cmdYaw, cmdPitch, cmdRoll);
		
		// Offset our current rotation quaternion with look delta.
		if(hasPower) rotation *= input;
		
		// Create quaternion based off our current facing direction
		// interpolate it to our new rotation based off our input delta.
		Quat r = Quat.FromAngles(angle, pitch, roll);
		r = Quat.SLerp(r, rotation, 0.4);
		
		// Movement
		vector3 dir;
		dir.z = (cmd.buttons & BT_JUMP) ? 1 : (cmd.buttons & BT_CROUCH) ? -1 : 0; 
		
		if(fw || lr) dir.xy = (fw, lr).Unit();
		
		vector3 wishDir = Quat.FromAngles(angle, pitch, roll) * (dir.x, -dir.y, dir.z);
		if(hasPower) vel += wishDir * (data.battery.power * 0.2);
		
		if(cmd.buttons & BT_USE) 
			data.SetMode(DeployableDrone.DRM_FOLLOW_ACTIVE);
		
		// Reset source to cached angles.
		source.A_SetAngle(cacheAngles.z);
		source.A_SetPitch(cacheAngles.y);
		source.A_SetRoll(cacheAngles.z);
		source.player.cheats |= CF_INTERPVIEW;
		
		if(data.droneMode != DeployableDrone.DRM_MANUAL)
		{
			// Release pilot
			source.SetCamera(source);
			source.player.cheats &= ~CF_TOTALLYFROZEN;
			flyingManual = false;
			
			if(source.player.ReadyWeapon)
			{
				let psp = source.player.FindPSprite(PSP_WEAPON);
				if(psp) psp.tics = 1;
				source.player.weaponstate &= ~WF_WEAPONREADY;
			}
		}
	}
	
	override void Tick()
	{
		super.Tick();
		if(pos.z <= floorz+3) SetOrigin((pos.xy, floorz+3), true);
		
		bNOGRAVITY = data && data.battery && data.battery.charge > 0;
		
		vel *= 0.8;
		animAngles *= 0.92;
		
		// Tilt in direction of movement
		double inertia = 0.75;
		
		double UD = vel dot (rotation * (0,0,1));
		double LR = vel dot (rotation * (0,1,0));
		double FB = vel dot (rotation * (1,0,0));
		
		animAngles.x += LR * inertia; // roll
		animAngles.y += FB * inertia; // pitch
		
		animAngles.x = clamp(animAngles.x, -70,70);
		animAngles.y = clamp(animAngles.y, -30,30);
		
		vector3 euler = DrivablesMath.getEuler(rotation);
		A_SetAngle(euler.x, SPF_INTERPOLATE);
		A_SetPitch(euler.y + animAngles.y, SPF_INTERPOLATE);
		A_SetRoll(euler.z - animAngles.x, SPF_INTERPOLATE);
		
		// Drone bob
		vel += (rotation * (0,0,1)) * (cos(level.maptime * 10) * 0.05); 
		
		// Update drone mode
		if(data) mode = data.droneMode;
	}	
	
	// This enables state sequences to be overwritten in child classes.
	virtual state SetDroneState(bool condition, StateLabel stateName)
	{
		if(!condition) return ResolveState(null);
		return ResolveState(stateName);
	}
	
	States
	{
		Spawn:
			DRON A 1;
		goto Think;
		
		NoBattery:
			DRON A 1
			{
				vel.xy *= 0.92;
			}
		goto Think;
		
		Think:
			TNT1 A 0 SetDroneState(data && (!data.battery || data.battery.charge <= 0), "NoBattery");
			TNT1 A 0 SetDroneState(mode == DeployableDrone.DRM_FOLLOW_PASSIVE || mode == DeployableDrone.DRM_FOLLOW_ACTIVE, "Follow");
			TNT1 A 0 SetDroneState(mode == DeployableDrone.DRM_IDLE, "Idle.Passive");
			TNT1 A 0 SetDroneState(mode == DeployableDrone.DRM_TURRET, "Idle.Active");
			TNT1 A 0 SetDroneState(mode == DeployableDrone.DRM_MECHUTILITY, "Mechutil");
			TNT1 A 0 SetDroneState(mode == DeployableDrone.DRM_MANUAL, "PilotMode");
		loop;
		
		Follow:
			DRON A 1 
			{
				A_FollowSource(0.1);
			}
		goto Think;
		
		Idle.Active:
			DRON A 1
			{
				if(!engagingTarget)
					rotation *= Quat.FromAngles(-2,0,0);
			}
		goto Think;
		
		Idle.Passive:
			DRON A 1;
		goto Think;
				
		PilotMode:
			DRON A 1 A_ProcessPilot();
			DRON A 0 A_JumpIf(mode != DeployableDrone.DRM_MANUAL, "Think");
		loop;
		
		Mechutil:
			DRON A 1; // Do mech stuff here.
		goto Think;
	}
}

class DroneLaserBase : Actor
{
	Default 
	{
		+NOINTERACTION;
		+INTERPOLATEANGLES;
	}
	
	States
	{
		Spawn:
			MODL A -1;
		stop;
	}
}
class DroneLaserGun : Actor
{
	MechFieldDrone parent;
	Actor laserTarget;
	vector3 targetOffs;
	vector3 laserOffs;
	vector3 parentOffs;
	DroneLaserBeam laser;
	class<DroneLaserBeam> laserType;
	Quat rotation;	
	Quat desiredRotation;
	Actor base;
	double baseHeight;
	
	class<Actor> baseType;
	
	Property BaseDeco : baseType, baseHeight;

	Default
	{
		Height 0;
		Radius 0;
		+NOINTERACTION;
		+INTERPOLATEANGLES;
		
		DroneLaserGun.BaseDeco "DroneLaserBase", 2; 
	}
	
	static DroneLaserGun Setup(MechFieldDrone parent, vector3 mountOffs, class<DroneLaserGun> mountType = "DroneLaserGun", class<DroneLaserBeam> laserType = "DroneLaserBeam")
	{
		let lasermount = DroneLaserGun(Spawn(mountType));
		if(lasermount)
		{	
			lasermount.parent = parent;
			lasermount.parentOffs = mountOffs;
			lasermount.A_SetScale(parent.Scale.X);
			lasermount.rotation = Quat.FromAngles(parent.angle, parent.pitch, parent.roll);
			lasermount.desiredRotation = lasermount.rotation;
			lasermount.laserType = laserType;
			if(lasermount.baseType)
			{
				lasermount.base = Spawn(lasermount.baseType, lasermount.pos);
				lasermount.base.master = lasermount;
			}
		}
		return lasermount;
	}
	
	void FindTarget()
	{			
		laserTarget = NULL;
		let it = ThinkerIterator.Create();
		Actor act;
		double closest = laserTarget ? Distance3D(laserTarget) : double.infinity;
		double sq_mindist = 64;
		double sq_maxdist = 2048;
		while (act = Actor(it.Next()))
		{
			double dist = Distance3D(act);
			if(dist > closest || dist < sq_mindist || dist > sq_maxdist) continue;
			if(act == parent || act == parent.source) continue;
			
			if(act == self || act == target) continue;
			if(!act.bSHOOTABLE || (target && target.player && !act.bISMONSTER) || act.bKILLED) continue;   
			if(!CheckTargetReachable(act)) continue;
			
			laserTarget = act;
			closest = dist;
		}
		
		if(parent) parent.engagingTarget = laserTarget;
	}
	
	virtual bool CheckTargetReachable(Actor act)
	{
		if(!act) return true;
		
		double dist = Distance3D(act);
		vector3 firePos = (act.pos.xy, act.pos.z + (act.height * 0.5));
		vector3 angles = level.sphericalCoords(pos, firePos, (0,0));
		
		LookExParams look;
		look.FOV = 360;
		if(!IsVisible(act, true, look)) return false; // Actor is behind wall.  
			
		FLineTraceData hitData;
		vector3 ltPos = level.vec3offset(pos, rotation * ((30,0,0)*Scale.X));
		LineTrace(-angles.x, dist, -angles.y, TRF_ABSPOSITION, ltPos.z, ltPos.x, ltPos.y, data:hitData);
		if(hitData.HitType == TRACE_HitActor && hitData.hitActor == act) return true;
		
		return false;
	}
	
	virtual void FollowParent()
	{
		Quat followDir = Quat.FromAngles(parent.angle, parent.pitch, parent.roll);
		vector3 desiredEuler = DrivablesMath.getEuler(desiredRotation);
		double rotDiff = abs(angle - desiredEuler.x) + abs(pitch - desiredEuler.y);
		bool inCombatMode = !parent.data ? true : parent.data.CheckCombatMode();
		
		if(parent.mode != DeployableDrone.DRM_MANUAL)
		{
			laser.SetEnabled(!!laserTarget && rotDiff <= 10 && inCombatMode); 
		}
	
		vector3 followPos = level.vec3offset(parent.pos, followDir * (parentOffs * scale.X));
		SetOrigin(followPos, true);
		
		rotation = Quat.SLerp(rotation, desiredRotation, 0.2);
		vector3 euler = DrivablesMath.getEuler(rotation);
		A_SetAngle(euler.x, SPF_INTERPOLATE);
		A_SetPitch(euler.y, SPF_INTERPOLATE);
		A_SetRoll(euler.z, SPF_INTERPOLATE);
		if(base) 
		{
			base.A_SetAngle(euler.x, SPF_INTERPOLATE);
			base.A_SetPitch(parent.pitch, SPF_INTERPOLATE);
			base.A_SetRoll(parent.roll, SPF_INTERPOLATE);
			base.SetOrigin(level.vec3offset(pos, rotation * ((0,0,baseHeight) * Scale.X)), true);
			base.A_SetScale(Scale.X);
		}
		
		// Update rotation based on target or mode.
		desiredRotation = followDir; 
		
		if(laserTarget)
		{	
			if(laserTarget.bCORPSE || laserTarget.health <= 0) 
			{
				laserTarget = NULL;
				return;
			}
			
			vector3 firePos = (laserTarget.pos.xy, laserTarget.pos.z + (laserTarget.height * 0.5));
			vector3 angles = level.sphericalCoords(pos, firePos, (0,0));
			
			desiredRotation = Quat.FromAngles(-angles.x, -angles.y, parent.roll);
		}	
		
		if(!inCombatMode)
			desiredRotation = Quat.FromAngles(parent.angle, parent.pitch - 20, parent.roll);
	}
	
	override void Tick()
	{
		super.Tick();
		if(!parent) return;
		
		// Setup Laser		
		if(!laser) 
		{
			laserOffs = (10,0,0) * Scale.X;
			laser = DroneLaserBeam(DroneLaserBeam.Create(
				self, 
				laserOffs.x, laserOffs.y, laserOffs.z, 
				0,0, 
				type:laserType
			));
			laser.A_SetScale(laser.Scale.X * Scale.X);
		}
		
		if(!laserTarget && parent.mode != DeployableDrone.DRM_MECHUTILITY) 
			FindTarget();
			
		if(!CheckTargetReachable(laserTarget)) laserTarget = NULL;
		
		FollowParent();
		
		// Fix aim on crosshair if in manual mode.
		if(parent.mode == DeployableDrone.DRM_MANUAL && parent.source.player)
		{
			// Aim towards screen crosshair
			FLineTraceData hitData;
			vector3 ltPos = level.vec3offset(parent.pos, Quat.FromAngles(parent.angle, parent.pitch, parent.roll) * (30,0,0));
			parent.LineTrace(parent.angle, 1024, parent.pitch, TRF_ABSPOSITION, ltPos.z, ltPos.x, ltPos.y, data:hitData);
			
			vector3 angles = level.sphericalCoords(pos, hitData.hitLocation, (0,0));
			desiredRotation = Quat.FromAngles(-angles.x, -angles.y, parent.roll);
			
			laser.SetEnabled(parent.source.player.cmd.buttons & BT_ATTACK);
		}
	}
	
	States
	{	
		Spawn:
			LASR A -1;
		stop;
	}
}

class DroneLaserBeam : MechLaserBeam
{
	double trueDamage;
	Property LaserDamage : trueDamage;

	Default
	{
		Scale 1.0;
		RenderStyle "AddShaded";
		DroneLaserBeam.LaserDamage 1;
		
		MechLaserBeam.LaserColor "Red";
	}
	
	override void BeamTick()
	{
		if( hitData.hitType != TRACE_HitNone && trueDamage > 0 ) 
			OnImpact(hitData.HitLocation, hitData.hitActor);
	}
	
	override void OnImpact(vector3 hitPos, Actor hitActor)
	{
		let droneSource = DroneLaserGun(source);
		if(droneSource && hitActor == droneSource.parent.source) 
		{
			SetEnabled(false);
			return;
		}
	
		let lasdec = Spawn("MWLaserDecal", hitPos);
		lasdec.angle = angle;
		lasdec.pitch = pitch;
		lasdec.target = self;
	
		if(hitActor) 
		{
			if(hitActor is "MechHardpoint") return; // Skip
			
			hitActor.DamageMobJ(self, source, trueDamage, "Fire");
			if(alpha >= 0.7) A_StartSound("Laser/Impact", CHAN_WEAPON, flags:CHANF_NOSTOP);
		}
	}
	
	override void Tick()
	{
		super.Tick();
		alpha = cos(level.maptime * 20);
		
		if(enabled)
		{
			A_StartSound("Laser/Loop", flags:CHANF_LOOPING|CHANF_NOSTOP);
		}
		else
		{
			A_StopSound(CHAN_BODY);
		}	
	}
}

// Drone Inventory Presence
class DroneBattery : I_DontStack
{
	DeployableDrone drone;
	double charge; // Current battery from 0 to 100.
	double energyUse; // Determines how long battery will last - percent degraded per second.
	double energyUseMultiplier;
	double power; // Power output, determines how fast a drone moves.
	
	Property EnergyUse : energyUse;
	Property PowerOutput : power;
	
	Default
	{
		Tag "Basic Drone Battery";
		-INVENTORY.INVBAR;
		
		DroneBattery.EnergyUse 0.84;
		DroneBattery.PowerOutput 8;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		Init();
	}
	
	virtual void Init()
	{
		charge = 100;
		energyUseMultiplier = 1.0;
	}
	
	override void Tick()
	{
		super.Tick();
		if(drone) DroneThink();
	}
	
	virtual void DroneThink()
	{
		// Do stuff while equipped on a drone.

		// Drain battery over time
		charge -= (energyUse / TICRATE) * energyUseMultiplier;
		charge = clamp(charge, 0, 100);
	}
	
	virtual bool Equip(DeployableDrone drone)
	{
		if(drone.battery && !drone.battery.Dequip()) 
			return false;
			
		self.drone = drone;			
		self.drone.battery = self;
		return true;
	}
	
	virtual bool Dequip()
	{
		if(!drone) return true;
		
		self.drone.battery = NULL;
		self.drone = NULL;
		return true;
	}
}

class DroneMount : Object
{
	vector3 mountPos;
	DeployableDrone drone;
	
	static DroneMount Create(double fw, double lr, double ud)
	{	
		let dData = new("DroneMount");
		if(dData) dData.mountPos = (fw, lr, ud);
		return dData;
	}
}

class I_DroneData : Inventory
{
	Array<DroneMount> droneMounts;

	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
	}
	
	virtual DroneMount MountDrone(DeployableDrone drone)
	{
		foreach(mnt : droneMounts)
		{
			if(!mnt.drone) 
			{
				mnt.drone = drone;
				return mnt;
			}
		}
		return NULL;
	}
	
	virtual void UnmountDrone(DeployableDrone drone)
	{
		foreach(mnt : droneMounts)
		{
			if(mnt.drone == drone)  
			{
				mnt.drone = NULL;
				break;
			}
		}
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		
		droneMounts.Clear();
		droneMounts.Push(DroneMount.Create(85, -50, -25));
		droneMounts.Push(DroneMount.Create(85,  50, -25));
	}

	static I_DroneData Get(Actor from, bool give = true)
	{
		let droneData = I_DroneData(from.FindInventory("I_DroneData"));
		if(!droneData && give) 
		{
			from.GiveInventory("I_DroneData", 1);
			droneData = I_DroneData(from.FindInventory("I_DroneData"));
		}
		return droneData;
	}
}

class DeployableDrone : I_DontStack
{
	MechFieldDrone dmo; // Drone Map Object
	DroneBattery battery; // Battery information
	DroneMount mount; // Mount info

	int droneMode;
	
	enum DroneModes 
	{
		DRM_FOLLOW_PASSIVE = 0,
		DRM_FOLLOW_ACTIVE = 1,
		DRM_IDLE = 2,
		DRM_MANUAL = 3,
		DRM_MECHUTILITY = 4,
		DRM_TURRET = 5
	};
	
	class<MechFieldDrone> droneCls;
	class<DroneBattery> defaultBatteryCls;
	
	Property DroneClass : droneCls;
	Property OEMBattery : defaultBatteryCls;

	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		
		DeployableDrone.DroneClass "MechFieldDrone";
		DeployableDrone.OEMBattery "DroneBattery";
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		
		if(!battery && defaultBatteryCls)
		{
			let dbat = DroneBattery(Spawn(defaultBatteryCls));
			dbat.Equip(self);
			other.AddInventory(dbat);
		}
	}
	
	virtual bool DeployDrone(int mode = DRM_FOLLOW_ACTIVE)
	{
		if(dmo) return true;
			
		let droneData = I_DroneData.Get(owner);
		if(!droneData) return false;
		
		if(!mount) mount = droneData.MountDrone(self);
		if(mount) 
		{
			dmo = MechFieldDrone.Deploy(self, droneCls, Owner);
			SetMode(mode);
			return true;
		}
		
		return false;
	}
	
	virtual void SetMode(int mode)
	{
		self.droneMode = mode;
	}
	
	virtual bool CheckCombatMode()
	{
		return droneMode == DRM_FOLLOW_ACTIVE || droneMode == DRM_TURRET;
	}
}