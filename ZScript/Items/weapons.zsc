// Lasers
class SmallLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "SMALLLASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 0.5;
				
		fireTime     = floor(0.4 * TICRATE);
		cooldownTime = 1 * TICRATE;
		
		range = 150; // Meters
		laserRange = 300; // Maximum laser range.
		damage = convertDMG(3.25, fireTime);
		laserHeat = convertHeat(1.10, fireTime); // Laserbeam heat.
		energyUse = 0.2 / double(fireTime);
		
		fireSound = "Laser/Small";
		laserType = "MechLaser";
		laserColor = "Red";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		value = 10000;
		
		damagable = true;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[Gray]The Small Laser is a free-electron laser which focuses a beam"
			" of light on targets to cause damage. The compact size of the "
			"Small Laser allows it to be equipped and used efficiently on practically"
			" anything; however the reduced firepower means that Small Lasers are "
			"not usually used on heavier combat devices such as 'Mechs or tanks."
			"\n(Source: https://www.sarna.net/wiki/Small_Laser)"
		);
	}
}
class ERSmallLaser : SmallLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERSMALLLASER";
		mountType = "Energy";
				
		range = 200; // Damage dropoff
		laserRange = 400; // Maximum laser range.
		laserHeat = convertHeat(1.90, fireTime); // Laserbeam heat.
		energyUse = 0.3 / double(fireTime);
		
		laserColor = "Yellow";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
		
		value = 15000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Extended-Range Small Laser (ER Small Laser) focuses a powerful beam of light on targets."
			" As the name suggests, the ER variant of the Small Laser increases the power of the beam to project it "
			"to much farther ranges. The power necessary to facilitate the production of such generates an increased "
			"quantity of waste heat."
			"\n(Source: https://www.sarna.net/wiki/Extended-Range_Small_Laser)"
		);
	}
}
class SmallPulseLaser : SmallLaser
{
	override void Defaults()
	{	
		DisplayName = "SMLPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight =1.0;
				
		fireTime     = 5 + floor(0.1 * TICRATE);
		cooldownTime = floor(0.75 * TICRATE);
		maxLaserTime = floor(1.75 * TICRATE);
		
		laserRange = 220; // Meters
		range = 110;
		damage = convertDMG(4.55, maxLaserTime);
		laserHeat = convertHeat(2.70, maxLaserTime); // Laserbeam heat.
		pulseSpeed = 90;
		energyUse = 0.02 / double(fireTime);
		
		fireSound = "Laser/Small";
		laserType = "MechPulseLaser";
		laserColor = "Red";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
		
		value = 30000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Small Pulse Lasers, being the smallest pulse laser variant, have a very limited range. "
			"However, inside that range they are a lethal weapon, having a much smaller heat buildup compared "
			"to other pulse lasers, making them an excellent short-range support weapon."
			"\n(Source: https://www.sarna.net/wiki/Small_Pulse_Laser)"
		);
	}
}

class MediumLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "MEDIUMLASER";
		mountType = "Energy";
		weight = 1;
		
		fireTime     = floor(0.4 * TICRATE);
		cooldownTime = 2 * TICRATE;
		
		laserRange = 540; // Meters
		range = 270;
		damage = convertDMG(5.0, fireTime);
		laserHeat = convertHeat(3.25, fireTime); // Laserbeam heat.
		energyUse = 0.4 / double(fireTime);
		
		fireSound = "Laser/Medium";
		laserType = "MechLaser";
		laserColor = "Green";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		
		value = 30000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Medium Laser is a midrange weapon of the standard type from the laser class of weaponry. "
			"The medium laser uses an intensified beam of light to damage targets by heating them to melting temperatures."
			" The relatively compact size and effectiveness of the Medium Laser attributes its widespread use over many types of combat units."
			" (Source: https://www.sarna.net/wiki/Medium_laser)"
		);
	}
}
class ERMediumLaser : MediumLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERMEDIUMLASER";

		laserRange = 720; // Meters
		range = 360; 
	
		laserHeat = convertHeat(3.80, fireTime); // Laserbeam heat.
		energyUse = 0.5 / double(fireTime);
		
		laserColor = "Cyan";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
		
		value = 35000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Extended-Range variant of the medium laser improves the focusing "
			"system of the laser to project it to much farther ranges. The optics are less "
			"efficient, though, necessitating more input power for the same armor ablation "
			"and thus more waste heat in the weapon."
			"\n(Source: https://www.sarna.net/wiki/Extended-Range_Medium_Laser)"
		);
	}
}
class MediumPulseLaser : MediumLaser
{
	override void Defaults()
	{	
		DisplayName = "MEDPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 2.0;
				
		fireTime     = 5 + floor(0.1 * TICRATE);
		cooldownTime = floor(1.50 * TICRATE);
		maxLaserTime = floor(3.0 * TICRATE);
		
		laserRange = 440; // Meters
		range = 220;
		damage = convertDMG(7.0, maxLaserTime);
		laserHeat = convertHeat(7.60, maxLaserTime); // Laserbeam heat.
		pulseSpeed = 70;
		energyUse = 0.04 / double(fireTime);
		
		fireSound = "Laser/Medium";
		laserType = "MechPulseLaser";
		laserColor = "Green";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
		
		value = 70000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Medium Pulse Lasers are a mix of range and damage, making them "
			"useful in most situations. The heat buildup is moderate and the weapon "
			"causes good damage, although the Medium Pulse Laser still cannot be constantly "
			"discharged for extended periods of time."
			"\n(Source: https://www.sarna.net/wiki/Medium_Pulse_Laser)"
		);
	}
}

class LargeLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "LARGELASER";
		mountType = "Energy";
		weight = 5.0;
		size = 2;
		
		fireTime     = floor(0.5 * TICRATE);
		cooldownTime = 3 * TICRATE;
		
		laserRange = 900; // Meters
		range = 450;
		damage = convertDMG(9.0, fireTime);
		laserHeat = convertHeat(6.0, fireTime); // Laserbeam heat.
		energyUse = 0.6 / double(fireTime);
		
		fireSound = "Laser/Large";
		laserType = "MechLaser";
		laserColor = "Blue";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		
		value = 70000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Large Laser differs from its smaller cousins by being a gamma-ray "
			"laser firing a much more powerful beam, allowing it to reach to further "
			"ranges and cause more damage. However, the increased bulk and heat "
			"generation limits the weapon to ground vehicles, aircraft, and BattleMechs. "
			"\n(Source: https://www.sarna.net/wiki/Large_Laser)"
		);
	}
}
class ERLargeLaser : LargeLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERLARGELASER";
	
		laserRange = 1480; // Meters
		range = 740;
		laserHeat = convertHeat(7.0, fireTime); // Laserbeam heat.
		energyUse = 0.7 / double(fireTime);
		
		laserColor = "Purple";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
		
		value = 85000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Extended-Range variant of the Large Laser increases the power "
			"of the beam to project it to much farther ranges. The power necessary to "
			"facilitate the production of such generates a greatly increased quantity "
			"of waste heat."
			"\n(Source: https://www.sarna.net/wiki/Extended-Range_Large_Laser)"
		);
	}
}
class LargePulseLaser : LargeLaser
{
	override void Defaults()
	{	
		DisplayName = "LRGPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 7.0;
		size = 2;
				
		fireTime     = 5 + floor(0.1 * TICRATE);
		cooldownTime = floor(3.0 * TICRATE);
		maxLaserTime = floor(4.25 * TICRATE);
		
		laserRange = 740; // Meters
		range = 370;
		damage = convertDMG(13.0, maxLaserTime);
		laserHeat = convertHeat(12.0, maxLaserTime); // Laserbeam heat.
		energyUse = 0.06 / double(fireTime);
		pulseSpeed = 50;
		
		fireSound = "Laser/Large";
		laserType = "MechPulseLaser";
		laserColor = "Blue";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
		
		value = 140000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Large Pulse Lasers are the largest pulse lasers, with a "
			"both destructive and far-reaching pulse beam. While even assault "
			"'Mechs can be devastated by a short barrage of Large Pulse Laser fire, "
			"the heat buildup is tremendous and will quickly overheat 'Mechs if "
			"used for prolonged periods."
			"\n(Source: https://www.sarna.net/wiki/Large_Pulse_Laser)"
		);
	}
}

// Missiles
class SRM2 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM2";
		mountType = "Missile";
		heat = 2;
		weight = 1.0;
		refireCount = 2;
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		refireDelay = 4;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = 1 * TICRATE;
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM2";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		
		value = 10000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Short-Range Missiles (SRM) pack more power into the missile "
			"than almost any other kind. They lack sophisticated guidance systems, "
			"so they must deliver their punch at short range. The SRM-2-launcher "
			"fires two such missiles at a time."
			"\n(Source: https://www.sarna.net/wiki/SRM-2)"
		);
	}
}

class SRM4 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM4";
		mountType = "Missile";
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		
		heat = 3.50;
		weight = 2.0;
		refireCount = 4;
		refireDelay = 4;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(1.50 * TICRATE);
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM4";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		
		value = 30000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Short-Range Missiles (SRM) pack more power into the missile "
			"than almost any other kind. They lack sophisticated guidance systems, "
			"so they must deliver their punch at short range. The SRM-4-launcher "
			"fires four such missiles at a time."
			"\n(Source: https://www.sarna.net/wiki/SRM-4)"
		);
	}
}
class SRM6 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM6";
		mountType = "Missile";
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		
		heat = 5;
		weight = 3.0;
		refireCount = 6;
		refireDelay = 4;
		size = 2;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = 2.0 * TICRATE;
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM6";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		
		value = 45000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]Short-Range Missiles (SRM) pack more power into the missile "
			"than almost any other kind. They lack sophisticated guidance systems, "
			"so they must deliver their punch at short range. The SRM-6-launcher "
			"fires six such missiles at a time."
			"\n(Source: https://www.sarna.net/wiki/SRM-6)"
		);
	}
}

// ATMs
class ATM3 : MechMissileWeapon
{
	string defName;
	Array<String> ammoTypes;
	int ammoSelector;

	override void Defaults()
	{	
		DisplayName = "ATM3";
		defName = displayName;
		mountType = "Missile";
		
		// Has built-in artemis-like control system.
		spread = 1.0;
		doConverge = true;
		ammoUse = 1;
		
		heat = 2.2;
		weight = 1.5;
		refireCount = 3;
		refireDelay = 2;
		size = 2;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = 3.0 * TICRATE;
		
		projType = "";
		ammoType = "STDATMAmmo";
		fireSound = "Missile/ATM";
		sndItemName = "Betty/Item/ATM";
		mountDeco = "MissileMountDeco";
		perMissileFireSound = true;
		
		ammoTypes.Push("STDATMAmmo");
		ammoTypes.Push("ERATMAmmo");
		ammoTypes.Push("HEATMAmmo");
		
		damagable = true;
		
		value = 20000;
	}
	
	play virtual void LoadNextAmmo()
	{
		ammoSelector = (ammoSelector + 1) % (ammoTypes.Size());
		ammoType = (class<MechAmmo>)(ammoTypes[ammoSelector]);
		reloadAmmo();
		
		// Switch to ammo-defined properties.
		let curAmmo = MechSwitchableAmmo(loadedAmmo);
		if(curAmmo)
		{
			displayName = String.Format("%s %s", defName, curAmmo.loadedName);
			projType = curAmmo.ammoProj;
		}
	}
	
	override void ToggleState()
	{
		LoadNextAmmo();
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		// Search for available ammo
		if(CheckAmmo() <= 0)
		{
			for(int i = 0; i < ammoTypes.Size(); i++) 
			{
				LoadNextAmmo();
				if(CheckAmmo() > 0) break;
			}
		}
	}

	override string getShopDescription()
	{
		return (
			"\c[White]The Advanced Tactical Missile system (ATM) allows its users to "
			"choose between three different types of ammunition. ATMs also include "
			"an integral Artemis IV Fire Control System."
			"\n(Source: https://www.sarna.net/wiki/ATM_3)"
		);
	}
}
class ATM6 : ATM3
{
	override void Defaults()
	{
		super.Defaults();
		DisplayName = "ATM6";
		defName = displayName;
		
		heat = 4.1;
		weight = 3.5;
		refireCount = 6;
		size = 3;
		cooldownTime = 4.0 * TICRATE;
		
		value = 60000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Advanced Tactical Missile system (ATM) allows its users to "
			"choose between three different types of ammunition. ATMs also include "
			"an integral Artemis IV Fire Control System."
			"The ATM 6 is the second smallest and second lightest of the ATMs."
			"\n(Source: https://www.sarna.net/wiki/ATM_6)"
		);
	}
}
class ATM9 : ATM3
{
	override void Defaults()
	{
		super.Defaults();
		DisplayName = "ATM9";
		defName = displayName;
		
		heat = 5.8;
		weight = 5;
		refireCount = 9;
		size = 4;
		cooldownTime = 5.0 * TICRATE;
		
		value = 90000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Advanced Tactical Missile system (ATM) allows its users to "
			"choose between three different types of ammunition. ATMs also include "
			"an integral Artemis IV Fire Control System."
			"The ATM 9 is the second heaviest and bulkiest of the ATMs"
			"\n(Source: https://www.sarna.net/wiki/ATM_9)"
		);
	}
}
class ATM12 : ATM3
{
	override void Defaults()
	{
		super.Defaults();
		DisplayName = "ATM12";
		defName = displayName;
		
		heat = 7.5;
		weight = 7;
		refireCount = 12;
		size = 5;
		cooldownTime = 5.0 * TICRATE;
		
		value = 120000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Advanced Tactical Missile system (ATM) allows its users to "
			"choose between three different types of ammunition. ATMs also include "
			"an integral Artemis IV Fire Control System."
			"The ATM 12 is the largest and bulkiest of the ATMs, capable of firing twelve missiles."
			"\n(Source: https://www.sarna.net/wiki/ATM_12)"
		);
	}
}

class SSRM2 : SRM2
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM2";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 1.0;
		requiresTarget = true;
		
		value = 15000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Streak SRM-2 is the lightest and smallest of the Streak missile launchers."
			" Streak Missile Launcher technology ensures that all missile "
			"tubes acquire a target lock before its missiles fire. This improvement "
			"upon standard Short-Range Missiles conserves ammunition and eliminates "
			"unnecessary heat buildup. "
			"\n(Source: https://www.sarna.net/wiki/Streak_SRM-2)"
		);
	}
}
class SSRM4 : SRM4
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM4";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 2.0;
		requiresTarget = true;
		
		value = 40000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Streak SRM-4 is the middle-weight launcher."
			" Streak Missile Launcher technology ensures that all missile "
			"tubes acquire a target lock before its missiles fire. This improvement "
			"upon standard Short-Range Missiles conserves ammunition and eliminates "
			"unnecessary heat buildup. "
			"\n(Source: https://www.sarna.net/wiki/Streak_SRM-4)"
		);
	}
}
class SSRM6 : SRM6
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM6";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 3.0;
		size = 2.0;
		requiresTarget = true;
		
		value = 60000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Streak SRM-6 is the largest and heaviest of the Streak launchers."
			" Streak Missile Launcher technology ensures that all missile "
			"tubes acquire a target lock before its missiles fire. This improvement "
			"upon standard Short-Range Missiles conserves ammunition and eliminates "
			"unnecessary heat buildup. "
			"\n(Source: https://www.sarna.net/wiki/Streak_SRM-6)"
		);
	}
}

// LRM 5,10,15,20
class LRM5 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM5";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 2.0;
		refireCount = 5;
		refireDelay = 2;
		heat = 2.20;
		size = 1;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(2.0 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM5";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
		
		value = 40000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] Long Range Missiles have provided military units with a decent "
			"far-reaching punch for centuries. The LRM-5 fires five such missiles."
			"\n(Source: https://www.sarna.net/wiki/LRM-5)"
		);
	}
}
class LRM10 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM10";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 5.0;
		refireCount = 10;
		refireDelay = 2;
		heat = 3.60;
		size = 2;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(3.70 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM10";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
		
		value = 75000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.1, 0);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] Long Range Missiles have provided military units with a decent "
			"far-reaching punch for centuries. The LRM-10 fires ten such missiles."
			"\n(Source: https://www.sarna.net/wiki/LRM-10)"
		);
	}
}
class LRM15 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM15";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 7.0;
		refireCount = 15;
		refireDelay = 2;
		heat = 4.50;
		size = 3;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(3.70 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM15";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
		
		value = 110000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.15, 0);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] Long Range Missiles have provided military units with a decent "
			"far-reaching punch for centuries. The LRM-15 fires fifteen such missiles."
			"\n(Source: https://www.sarna.net/wiki/LRM-15)"
		);
	}
}
class LRM20 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM20";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 10.0;
		refireCount = 20;
		refireDelay = 2;
		heat = 5.60;
		size = 5;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(4.0 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM20";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
		
		value = 150000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.25, 0);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] Long Range Missiles have provided military units with a decent "
			"far-reaching punch for centuries. The LRM-20 fires twenty such missiles."
			"\n(Source: https://www.sarna.net/wiki/LRM-20)"
		);
	}
}

// MRM 10,20,30,40
class MRM10 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "MRM10";
		mountType = "Missile";
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		
		refireCount = 10;
		weight = 3.0;
		heat = 3.0;
		size = 2;
		refireDelay = 2;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(3.5 * TICRATE);
		
		projType = "MechMRM";
		ammoType = "MRMAmmo";
		fireSound = "Missile/LRM20";
		sndItemName = "Betty/Item/MRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		
		value = 90000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]MRMs are dead-fire missiles that are fired more like lasers than missiles. "
			"In order to pack as many missiles as possible into one salvo, scientists "
			"removed guidance systems and made the whole package smaller."
			"The MRM-10 is the lightest and smallest MRM launcher. It was designed to easily be swapped in for an SRM-6."
			"\n(Source: https://www.sarna.net/wiki/MRM-10)"
		);
	}
}
class MRM20 : MRM10
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "MRM20";
		
		refireCount = 20;
		weight = 7.0;
		heat = 4.0;
		size = 3;
		cooldownTime = ceil(3.8 * TICRATE);
		
		fireSound = "Missile/LRM20";
		
		value = 130000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]MRMs are dead-fire missiles that are fired more like lasers than missiles. "
			"In order to pack as many missiles as possible into one salvo, scientists "
			"removed guidance systems and made the whole package smaller."
			"The MRM-20 was designed to be easily swapped in for an LRM-15."
			"\n(Source: https://www.sarna.net/wiki/MRM-20)"
		);
	}
}
class MRM30 : MRM10
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "MRM30";
		
		refireCount = 30;
		weight = 10.0 / double(refireCount);
		heat = 5.0;
		size = 5;
		cooldownTime = ceil(4.2 * TICRATE);
		
		fireSound = "Missile/LRM20";
		
		value = 210000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]MRMs are dead-fire missiles that are fired more like lasers than missiles. "
			"In order to pack as many missiles as possible into one salvo, scientists "
			"removed guidance systems and made the whole package smaller."
			"The MRM-30 was designed to be easily swapped in for an LRM-20."
			"\n(Source: https://www.sarna.net/wiki/MRM-30)"
		);
	}
}
class MRM40 : MRM10
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "MRM40";
		
		refireCount = 40;
		weight = 12.0;
		heat = 6.0;
		size = 7;
		cooldownTime = ceil(4.6 * TICRATE);
		
		fireSound = "Missile/LRM20";
		
		value = 300000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]MRMs are dead-fire missiles that are fired more like lasers than missiles. "
			"In order to pack as many missiles as possible into one salvo, scientists "
			"removed guidance systems and made the whole package smaller."
			"The MRM-40 is the largest and bulkiest of the MRMs."
			"\n(Source: https://www.sarna.net/wiki/MRM-40)"
		);
	}
}

// Ballistics
class AC2 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/2";
		mountType = "Ballistic";
		heat = 0.50;
		weight = 6.0;
		size = 1.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.25 * TICRATE);
		
		projType = "Autocannon2";
		ammoType = "AC2Ammo";
		fireSound = "Ballistic/Autocannon2";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 0.6;
		mountDeco = "ACMountDeco";
		
		spread = 0;
		damagable = true;
		
		value = 25000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The autocannon/2 is a direct-fire ballistic weapon, "
			"firing HEAP (High-Explosive Armor-Piercing) rounds at targets "
			"either singly or in bursts."
			"While the autocannon/2s has an extremely long range, it comes at "
			"the cost of a very small damage output."
			"\n(Source: https://www.sarna.net/wiki/Autocannon/2)"
		);
	}
}
class UltraAC2 : UltraAC
{
	override void Defaults()
	{
		displayName = "UAC/2";
		mountType = "Ballistic";
	
		heat = 1.0;
		weight = 7.0;
		size = 3.0;
		energyUse = 0.05; // Magnetic loading system uses reactor power.
		ammoType = "UAC2Ammo";

		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.1 * TICRATE);
		
		projType = "Autocannon2";
		ammoType = "UAC2Ammo";
		fireSound = "Ballistic/Autocannon2";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 0.6;
		mountDeco = "ACMountDeco";
		
		spread = 0;
		damagable = true;
		
		SetupUAC();
		
		value = 50000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Ultra AC2 is the smallest bore autocannon of the Ultra series. "
			"Ultra autocannons are capable of firing two projectiles back-to-back, "
			"doubling heat and-potentially-damage, however this also makes them prone to jamming"
			"The Ultra AC2 also had the longest range and most ammo per ton of any Ultra autocannon;" 
			"however, it also deals the least amount of damage."
			"\n(Source: https://www.sarna.net/wiki/Ultra_AC/2)"
		);
	}
}
class LBXAC2 : AC2
{
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "LB 2-X AC";
		mountType = "Ballistic";
		heat = 0.40;
		weight = 6.0;
		size = 3.0;
		
		fireTime  = 2;
		cooldownTime = ceil(0.72 * TICRATE);
		fireCount = 2;
		
		projType = "LBXAutocannon";
		ammoType = "LBX2Ammo";
		fireSound = "Ballistic/Autocannon2";
		mountDecoScale = 0.75;
		
		spread = 4.0;
		
		value = 30000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The LB 2-X AC brings technology from "
			"the LB 10-X AC to the lightest class of autocannon. "
			"The LB 2-X fires in cluster rounds; a shotgun-like "
			"ammunition that more effectively damages weakened points in an enemy's armor."
			"The LB 2-X AC has the distinction of being the longest-range weapon on the ground, though its limited "
			"damage means that it is often outclassed by higher-tier LBX Autocannons."
			"(Inspired by: https://www.sarna.net/wiki/LB_2-X_AC)"
		);
	}
}

class AC5 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/5";
		mountType = "Ballistic";
		heat = 1.40;
		weight = 8.0;
		size = 4.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.5 * TICRATE);
		
		projType = "Autocannon5";
		ammoType = "AC5Ammo";
		fireSound = "Ballistic/Autocannon5";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.0;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		value = 50000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.4, 0);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The autocannon/2 is a direct-fire ballistic weapon, "
			"firing HEAP (High-Explosive Armor-Piercing) rounds at targets "
			"either singly or in bursts."
			"The Autocannon/5 can be fired from long ranges with a small to moderate damage level."
			"\n(Source: https://www.sarna.net/wiki/Autocannon/5)"
		);
	}
}
class UltraAC5 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/5";
		mountType = "Ballistic";
		heat = 3.0;
		weight = 9.0;
		size = 5.0;
		energyUse = 0.08;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.25 * TICRATE);
		
		projType = "Autocannon5";
		ammoType = "UAC5Ammo";
		fireSound = "Ballistic/Autocannon5";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.0;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		SetupUAC(20); // UAC known to be more jam-prone.
		
		value = 100000;
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.25, 0);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] the Ultra AC/5 is an upgraded version of the standard autocannon/5. "
			"Utilizing a different loading mechanism, Ultra autocannons are capable of firing two"
			"projectiles back-to-back, at the cost of higher heat and the risk of jamming."
			"Being of a lower caliber, the Ultra autocannon/5 has an increased "
			"range, at the cost of reduced damage over higher-caliber versions."
			"\n(Source: https://www.sarna.net/wiki/Ultra_AC/5)"
		);
	}
}
class LBXAC5 : AC5
{
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "LB 5-X AC";
		mountType = "Ballistic";
		heat = 1.0;
		weight = 8.0;
		size = 4.0;
		
		fireTime  = 2;
		cooldownTime = ceil(1.4 * TICRATE);
		fireCount = 5;
		
		projType = "LBXAutocannon";
		ammoType = "LBX5Ammo";
		fireSound = "Ballistic/Autocannon5";
		mountDecoScale = 1.1;
		
		spread = 4.0;
		
		value = 60000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The LB 5-X fires in cluster rounds; a shotgun-like "
			"ammunition that more effectively damages weakened points in an enemy's armor."
			"This effect creates flak that is useful against VTOLs."
			"\n(Source: https://www.sarna.net/wiki/LB_5-X_AC)"
		);
	}
}

class AC10 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/10";
		mountType = "Ballistic";
		heat = 2.5;
		weight = 12.0;
		size = 7.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(1.25 * TICRATE);
		
		projType = "Autocannon10";
		ammoType = "AC10Ammo";
		fireSound = "Ballistic/Autocannon10";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.3;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		value = 80000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.8, 0.8);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The autocannon/10 is a direct-fire ballistic weapon, "
			"firing HEAP (High-Explosive Armor-Piercing) rounds at targets either "
			"singly or in bursts. "
			"Can be extremely dangerous to face against if a MechWarrior"
			" is well-versed with the its optimal ranges; "
			"the AC/10 is capable of stripping all the armor off the head of a 'Mech in a "
			"single shot, and inflict internal damage in the same shot."
			" (Source: https://www.sarna.net/wiki/Autocannon/10)"
		);
	}
}
class UltraAC10 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/10";
		mountType = "Ballistic";
		heat = 5.0;
		weight = 9.0;
		size = 7.0;
		energyUse = 0.12;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.6 * TICRATE);
		
		projType = "Autocannon10";
		ammoType = "UAC10Ammo";
		fireSound = "Ballistic/Autocannon10";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.3;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		SetupUAC();		
		
		value = 160000;
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.6, 0.6);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Ultra AC/10 is the second largest of the Ultra autocannons."
			" Capable of firing two shots per turn, like all Ultra autocannons, resulting in doubled heat "
			"and-potentially-damage."
			"\n(Source: https://www.sarna.net/wiki/Ultra_AC/10)"
		);
	}
}
class LBXAC10 : AC10
{
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "LB 10-X AC";
		mountType = "Ballistic";
		heat = 2.0;
		weight = 11.0;
		size = 6.0;
		
		fireTime  = 2;
		cooldownTime = ceil(2.25 * TICRATE);
		fireCount = 10;
		
		projType = "LBXAutocannon";
		ammoType = "LBX10Ammo";
		fireSound = "Ballistic/LBXAutocannon10";
		mountDecoScale = 1.4;
		
		spread = 4.0;
		
		value = 100000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The LB 10-X AC is essentially a 'Mech-mounted shotgun, capable"
			" of firing special \"cluster rounds\" that fragment after being fired, "
			"allowing the weapon to either spread damage out or focus damage on "
			"a small area, depending on the range."
			"\n(Source: https://www.sarna.net/wiki/LB_10-X_AC)"
		);
	}
}

class AC20 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/20";
		mountType = "Ballistic";
		heat = 5.0;
		weight = 14.0;
		size = 10.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(2.0 * TICRATE);
		
		projType = "Autocannon20";
		ammoType = "AC20Ammo";
		fireSound = "Ballistic/Autocannon20";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.5;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		value = 120000;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-2, 4);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] This autocannon class can decapitate any 'Mech with one good hit to the head,"
			" regardless of the weight class, as that location can only mount around half a ton's worth of standard armor."
			" The AC/20 is capable of ripping nearly a ton and a quarter of armor off a 'Mech in a single shot. "
			"This is enough damage to take down even the heaviest of 'Mechs, if aimed well."
			"\n(Source: https://www.sarna.net/wiki/Autocannon/20)"
		);
	}
}
class UltraAC20 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/20";
		mountType = "Ballistic";
		heat = 10.0;
		weight = 15.0;
		size = 10.0;
		energyUse = 0.2;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(1.0 * TICRATE);
		
		projType = "Autocannon20";
		ammoType = "UAC20Ammo";
		fireSound = "Ballistic/Autocannon20";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		fireOffs = (15,0,0);
		mountDecoScale = 1.5;
		mountDeco = "ACMountDeco";
		
		damagable = true;
		
		SetupUAC(20); // This needs to jam more often for balance, because holy shit are UAC20s scary.	
		
		value = 240000;
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-2, 4);
		return super.Fire(firePos);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White] The Ultra AC/20 is the largest bore Ultra autocannon."
			"Like all Ultra autocannons, it is capable of twice the rate of fire of a standard autocannon, "
			"doubling its heat output and-potentially-its damage. "
			"Only the Clan HAG 40 can match the sheer damage output of the Ultra AC/20. "
			"\n(Source: https://www.sarna.net/wiki/Ultra_AC/20)"
		);
	}
}
class LBXAC20 : AC20
{
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "LB 20-X AC";
		mountType = "Ballistic";
		heat = 4.0;
		weight = 14.0;
		size = 11.0;
		
		fireTime  = 2;
		cooldownTime = ceil(4 * TICRATE);
		fireCount = 20;
		
		projType = "LBXAutocannon";
		ammoType = "LBX20Ammo";
		fireSound = "Ballistic/LBXAutocannon20";
		mountDecoScale = 1.6;
		
		spread = 4.0;
		
		value = 150000;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The LB 20-X AC is the autocannon with the largest bore "
			"capable of firing LB-X cluster rounds. Its shotgun-like cluster munitions "
			"delivers 20 different projectiles to the target, an effect that is "
			"described as similar to a sandblasting. "
			"Can deal devastating amounts of damage in the right hands."
			"\n(Source: https://www.sarna.net/wiki/LB_20-X_AC)"
		);
	}
}

class MachineGun : MechBallisticWeapon
{
	Sound mgunFire;
	int fireCounter;

	override void Defaults()
	{	
		DisplayName = "MACHINEGUN";
		mountType = "Ballistic";
		heat = 0;
		weight = 0.5;
		size = 1.0;
		
		ammoUse = 1;
		fireTime     = 1;
		cooldownTime = 1;
		
		projType = "MGBullet";
		ammoType = "MGAmmo";
		fireSound = "";
		mgunFire = "Ballistic/MachineGun";
		sndItemName = "Betty/Item/Machinegun";
		mountDeco = "MGunMountDeco";
		fireOffs = (10,0,0);
		
		spread = 1.2;
		damagable = true;
		
		value = 5000;
	}
	
	override bool Fire(vector3 firePos)
	{
		if(fireCounter++ >= 1)
		{
			WeapSound(mgunFire, 0.5, randomPitch:true);
			fireCounter = 0;
		}
		
		return super.Fire(firePos);
	} 
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Machine Gun is the quintessential anti-infantry weapon, "
			"issuing a stream of bullets at a high rate of fire to cut down opposing "
			"soldiers, while still being effective at damaging BattleMechs."
			"\n(Source: https://www.sarna.net/wiki/Machine_Gun)"
		);
	}
}

class GaussRifle : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "GAUSS RIFLE";
		mountType = "Ballistic";
		heat = 1.0;
		weight = 15.0;
		size = 7.0;
		
		ammoUse 	 = 1;
		fireTime	 = 8;
		cooldownTime = ceil(4.25 * TICRATE);
		energyUse = 1.0;
		
		projType = "GaussCannon";
		ammoType = "GaussAmmo";
		fireSound = "Ballistic/GaussRifle";
		reloadSound = "Ballistic/GaussRifle/Reload";
		sndItemName = "Betty/Item/GaussRifle";
		mountDeco = "GaussMountDeco";
		
		damagable = true;
		
		value = 130000;
	}
	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-5, 6);
		return super.Fire(firePos);
	}
	
	override void OnDestroyed()
	{
		if(!parent) return;
		super.OnDestroyed();
		
		// Yeah, pretty bad idea to get one of these guys crit...
		// Massive capacitor banks plus a hole, turns out, don't mix too well.
		parent.DoExplosionDamage(20.0);
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]the Gauss rifle utilizes a series of electromagnets to propel "
			"slugs of nickel-iron at very high velocities, making "
			"it a devastating and lethal long-range weapon."
			"One hit from a Gauss rifle is capable of killing nearly any Light 'Mech. "
			"However, due to it's \"railgun\"-like propellant solution, the Gauss rifle "
			"also has fairly heavy power requirements."
			"\n(Source: https://www.sarna.net/wiki/Gauss_rifle)"
		);
	}
}

// PPC
class PPC : MechBallisticWeapon
{	
	bool unsafeMode;
	
	override void Defaults()
	{	
		DisplayName = "PPC";
		mountType = "Energy";
		heat = 15.0;
		weight = 7.0;
		size = 3.0;
		
		ammoUse = 0;
		fireTime = 10;
		cooldownTime = ceil(3 * TICRATE);
		energyUse = 0.30;
		
		projType = "ParticleCannon";
		ammoType = "";
		fireSound = "Energy/PPC";
		sndItemName = "Betty/Item/PPC";
		mountDeco = "PPCMountDeco";
		disableMountRecoil = true;
		itemDescription = (
			"\c[Orange]Comes equipped with a built-in Field Inhibitor, which results in a minimum range of 90m."
			"This can be disabled by pressing the Weapon State button, however doing so will render "
			"this weapon unsafe and cause damage to the user's mech when fired at close range."
		);
		
		damagable = true;
		
		value = 60000;
	}
	
	
	// Toggles the field inhibitor.
	override void ToggleState()
	{
		unsafeMode = !unsafeMode;
		if(unsafeMode) 
		{
			displayName = "\c[Orange][ER] PPC";
			energyUse = 1.0;
		}
		if(!unsafeMode) 
		{
			// Restore default behavior.
			Defaults();
		}
	}
	
	override bool Fire(vector3 firePos)
	{
		int ret = super.Fire(firePos);
		let firedPPC = ParticleCannon(firedProjectile);
		if(unsafeMode && firedPPC)
		{
			// Can potentially scramble a mech's systems, also causes self-damage at close range.
			firedPPC.disableFieldInhibitor = true;
		}
	
		A_Recoil(-3);
		return ret;
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Particle Projector Cannon is an energy weapon, firing "
			"a concentrated stream of protons at a target dealing both "
			"thermal and kinetic damage. Despite being an energy weapon, it does "
			"produce recoil. The lethality of the weapon rivals that of higher-caliber autocannons; "
			"just three shots from a PPC will vaporize nearly two tons of standard armor."
			"\n(Source: https://www.sarna.net/wiki/Particle_Projector_Cannon)"
		);
	}
}
class ERPPC : PPC
{	
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "ER PPC";
		heat = 20.0;
		energyUse = 0.40;
				
		projType = "RangedParticleCannon";
		fireSound = "Energy/PPC";
		sndItemName = "Betty/Item/ERPPC";
		mountDeco = "ERPPCMountDeco";
		mountDecoScale = 1.25;
		mountDecoOffs = (0,0,-1);
		itemDescription = "\c[Orange]Unlike the regular PPC, this has no minimum range and is completely safe to fire at close ranges.";
		
		damagable = true;
		
		value = 120000;
	}
	
	// ER-PPCs don't need this behavior
	override void ToggleState() {}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The Extended-Range Particle Projector Cannon, "
			"or ER PPC for short, has a greatly increased range compared to "
			"a standard PPC. Capable of extreme damage at long range, "
			"unfortunately generates a tremendous amount of heat, and thus can "
			"be difficult to use effectively. The ER PPC is also noteworthy "
			"for having no minimal range."
			"\n(Source: www.sarna.net/wiki/Extended-Range_Particle_Projector_Cannon)"
		);
	}
}

class Flamer : MechWeapon
{
	Sound beginFireSound;
	const CHAN_FLMR = 20;

	Actor activeFlame;
	override void Defaults()
	{
		displayName = "FLAMER";
		mountType = "Energy";
		weight = 1;
		size = 1;
		heat = 0.5;
		energyUse = 0.02;
		
		fireTime = 1;
		cooldownTime = 1;
		range = 90;
		
		projType = "MechFlamer";
		sndItemName = "Betty/Item/Flamer";
		fireSound = "Energy/Flamer/Loop";
		beginFireSound = "Energy/Flamer/Start";
		mountDeco = "ACMountDeco";
		mountDecoScale = 0.5;
		
		damagable = true;
		
		value = 10000;
	}
		
	override bool Fire(vector3 firePos)
	{
		if(!activeFlame)
			parent.A_StartSound(beginFireSound, CHAN_FLMR+1, CHANF_OVERLAP);
	
		vector3 absFirePos = parent.OffsetPos(firePos.x, firePos.y, firePos.z);
		let flame = MechFlamer.Fire(parent, (class<MechFlamer>)(projType), absFirePos, parent.lookingPos, damaging:true);
		if(flame) 
		{
			flame.master = mech.driver;
			flame.vel += mech.vel;
			activeFlame = flame;
		}
		return true;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		if(activeFlame && activeFlame.getAge() > 4) 
			activeFlame = NULL;
		
		// Sound Effect
		if(activeFlame) 
			parent.A_StartSound(fireSound, CHAN_FLMR, CHANF_OVERLAP|CHANF_LOOPING|CHANF_NOSTOP);
		else
			parent.A_StopSound(CHAN_FLMR);
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{
		let projDefs = GetDefaultByType(projType);
	
		stats.Push("Range");
		values.Push(String.Format("%dm", projDefs.maxRange));
		
		stats.Push("Raw Damage");
		values.Push(String.Format("%.2f", projDefs.trueDamage));
		stats.Push("Heat");
		values.Push(String.Format("%.2f H/s", heat));
		stats.Push("Cooldown");
		values.Push("N/A");
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The standard Flamer taps into a BattleMech's reactor to produce "
			"heat in the form of a plasma release. An extremely short-ranged weapon, the "
			"flamer is devastating against infantry, however damage done against other 'Mechs "
			"and vehicles is negligible, though it can raise the enemy unit's heat levels "
			"and potentially cause the target mech to shutdown from overheating."
			"\n(Source: https://www.sarna.net/wiki/Flamer)"
		);
	}
}

class AMS : MechWeapon
{
	Actor curTarget;

	override void Defaults()
	{
		displayName = "AMS";
		ammoType = "AMSAmmo";
		mountType = "PDS";
		weight = 0.5;
		
		fireTime = 2;
		cooldownTime = 16;
		range = 120;
		ammoUse = 1;
		
		refireCount = 8;
		refireDelay = 4;
		
		projType = "MechAAM";
		sndItemName = "Betty/Item/AMS";
		fireSound = "Missile/AMS";
		mountDeco = "AMSMountDeco";
		fireOffs = (0,0,3);
		itemDescription = "\c[Orange]Destroys missiles before they hit you.";
		
		damagable = true;
		
		value = 12500;
	}
	
	override void GetUIColors(out int fontColor, out int bgColor)
	{
		fontColor = Font.CR_White;
		bgColor = 0xA0e68115;
	}
	
	override bool isGroupable()
	{
		return false;
	}
	override bool checkSelectable()
	{
		return false;
	}
	

	override double, double, double getRanges()
	{
		return 0, range, 0;
	}

	
	override bool Fire(vector3 firePos)
	{
		if(!refire && refireCount > 0) DoRefire();
		if(!curTarget) return false;
		
		// Only play weapon Fire sound on the first true Fire call.
		if(refire == refireCount) WeapSound(fireSound);
		
		let proj = MechProjectile(EffectsHelper.Fire3DProjectile(parent, parent.lookingPos, projType, firePos.x, firePos.y, firePos.z, false, 0,0));
		proj.master = mech.driver;
		proj.homingTarget = curTarget;
		
		modifyHeat(heat);
		modifyEnergy(energyUse);
		depleteAmmo(ammoUse);
		cooldown = fireTime + cooldownTime;
		
		return true;
	}
		
	override void DoEffect()
	{
		super.DoEffect();
		
		// Don't run if mech is shutdown.
		if(mech.shutdown || !canFire()) return;
		
		// Firing is handled manually by the AMS computer
		// Manually because I am the AMS computer, lazy bastard...
		
		vector3 localFirePos = getFirePos();
		vector3 globalFirePos = parent.OffsetPos(localFirePos.x, localFirePos.y, localFirePos.z);
		
		let it = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(it.Next()))
		{
			// Out of range
			double dist = DrivableMech.unitsToKM(DrivablesMath.Distance3D(globalFirePos,act.pos)) * 1000.0;
			if(dist > range) continue;
		
			// Don't fire at our own projectiles stoopid
			let hardpointSource = MechHardpoint(act.target);
			let mechProj = MechProjectile(act);
			double projDmg = mechProj ? mechProj.trueDamage : act.damage;
			if( projDmg <= 0 || !act.bMISSILE || (hardpointSource && hardpointSource.mech == mech) ) continue;
			
			// If we're dealing with a mech projectile, only target missiles
			if( mechProj && !(mechProj is "MechMissile") ) continue;
			
			// In range and an enemy projectile, engage
			curTarget = act;
			if(!cooldown) Fire(localFirePos);
		}
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{
		let projAAM = (class<MechAAM> )(projType);
		let projDefs = GetDefaultByType(projAAM);
		double cooldownSeconds = (fireTime+cooldownTime) / double(TICRATE);
	
		stats.Push("Range");
		values.Push(String.Format("%dm", range));
		
		stats.Push("Accuracy");
		values.Push(String.Format("%d\%%", projDefs.toHit));
		stats.Push("Heat");
		values.Push(String.Format("%.2f H/s", heat));
		
		stats.Push("Cooldown");
		values.Push(String.Format("%0.2f s", cooldownSeconds));
	}
	
	override string getShopDescription()
	{
		return (
			"\c[White]The anti-missile system is used to destroy missiles before they struck their target. "
			"This is accomplished by using a short-ranged rapid firing weapon which shoots at the missiles. "
			"Because missiles are fired in salvos of up to forty at a time, anti-missile systems are rarely capable of "
			"destroying all incoming missiles."
			"\n(Source: https://www.sarna.net/wiki/Anti-missile_system)"
		);
	}
}