// Lasers
class SmallLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "SMALLLASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 0.5;
				
		fireTime     = floor(0.4 * TICRATE);
		cooldownTime = 1 * TICRATE;
		
		range = 150; // Meters
		laserRange = 300; // Maximum laser range.
		damage = convertDMG(3.25, fireTime);
		laserHeat = convertHeat(1.10, fireTime); // Laserbeam heat.
		energyUse = 0.3 / double(fireTime);
		
		fireSound = "Laser/Small";
		laserType = "MechLaser";
		laserColor = "Red";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
	}
	
}
class ERSmallLaser : SmallLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERSMALLLASER";
		mountType = "Energy";
				
		range = 200; // Damage dropoff
		laserRange = 400; // Maximum laser range.
		laserHeat = convertHeat(1.90, fireTime); // Laserbeam heat.
		energyUse = 0.4 / double(fireTime);
		
		laserColor = "Yellow";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
	}
}
class SmallPulseLaser : SmallLaser
{
	override void Defaults()
	{	
		DisplayName = "SMLPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight =1.0;
				
		fireTime     = floor(0.1 * TICRATE);
		cooldownTime = floor(0.75 * TICRATE);
		maxLaserTime = floor(1.75 * TICRATE);
		
		laserRange = 220; // Meters
		range = 110;
		damage = convertDMG(3.50, maxLaserTime);
		laserHeat = convertHeat(2.70, maxLaserTime); // Laserbeam heat.
		pulseSpeed = 90;
		energyUse = 0.02 / double(fireTime);
		
		fireSound = "Laser/Small";
		laserType = "MechPulseLaser";
		laserColor = "Red";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
	}
}

class MediumLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "MEDIUMLASER";
		mountType = "Energy";
		weight = 1;
		
		fireTime     = floor(0.4 * TICRATE);
		cooldownTime = 2 * TICRATE;
		
		laserRange = 540; // Meters
		range = 270;
		damage = convertDMG(5.0, fireTime);
		laserHeat = convertHeat(3.25, fireTime); // Laserbeam heat.
		energyUse = 0.5 / double(fireTime);
		
		fireSound = "Laser/Medium";
		laserType = "MechLaser";
		laserColor = "Green";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
	}
}
class ERMediumLaser : MediumLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERMEDIUMLASER";

		laserRange = 720; // Meters
		range = 360; 
	
		laserHeat = convertHeat(3.80, fireTime); // Laserbeam heat.
		energyUse = 0.6 / double(fireTime);
		
		laserColor = "Cyan";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
	}
}
class MediumPulseLaser : MediumLaser
{
	override void Defaults()
	{	
		DisplayName = "MEDPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 2.0;
				
		fireTime     = floor(0.1 * TICRATE);
		cooldownTime = floor(1.50 * TICRATE);
		maxLaserTime = floor(3.0 * TICRATE);
		
		laserRange = 440; // Meters
		range = 220;
		damage = convertDMG(6.0, maxLaserTime);
		laserHeat = convertHeat(7.60, maxLaserTime); // Laserbeam heat.
		pulseSpeed = 70;
		energyUse = 0.04 / double(fireTime);
		
		fireSound = "Laser/Medium";
		laserType = "MechPulseLaser";
		laserColor = "Green";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
	}
}

class LargeLaser : MechLaserWeapon
{
	override void Defaults()
	{	
		DisplayName = "LARGELASER";
		mountType = "Energy";
		weight = 5.0;
		size = 2;
		
		fireTime     = floor(0.5 * TICRATE);
		cooldownTime = 3 * TICRATE;
		
		laserRange = 900; // Meters
		range = 450;
		damage = convertDMG(9.0, fireTime);
		laserHeat = convertHeat(7.0, fireTime); // Laserbeam heat.
		energyUse = 0.7 / double(fireTime);
		
		fireSound = "Laser/Large";
		laserType = "MechLaser";
		laserColor = "Blue";
		sndItemName = "Betty/Item/Laser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
	}
}
class ERLargeLaser : LargeLaser
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "ERLARGELASER";
	
		laserRange = 1480; // Meters
		range = 740;
		laserHeat = convertHeat(7.5, fireTime); // Laserbeam heat.
		energyUse = 0.8 / double(fireTime);
		
		laserColor = "Purple";
		sndItemName = "Betty/Item/ERLaser";
		mountDeco = "LaserMountDeco";
	}
}
class LargePulseLaser : LargeLaser
{
	override void Defaults()
	{	
		DisplayName = "LRGPULSELASER";
		mountType = "Energy";
		heat = 0; // Initial heat.
		weight = 7.0;
		size = 2;
				
		fireTime     = floor(0.1 * TICRATE);
		cooldownTime = floor(3.0 * TICRATE);
		maxLaserTime = floor(4.25 * TICRATE);
		
		laserRange = 740; // Meters
		range = 370;
		damage = convertDMG(10.0, maxLaserTime);
		laserHeat = convertHeat(14.5, maxLaserTime); // Laserbeam heat.
		energyUse = 0.06 / double(fireTime);
		pulseSpeed = 50;
		
		fireSound = "Laser/Large";
		laserType = "MechPulseLaser";
		laserColor = "Blue";
		sndItemName = "Betty/Item/PulseLaser";
		mountDeco = "LaserMountDeco";
		
		damagable = true;
		continuous = true; 
	}
}

// Missiles
class SRM2 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM2";
		mountType = "Missile";
		heat = 2;
		weight = 1.0;
		refireCount = 2;
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		refireDelay = 4;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = 1 * TICRATE;
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM2";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
	}
}

class SRM4 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM4";
		mountType = "Missile";
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		
		heat = 3.50;
		weight = 2.0;
		refireCount = 4;
		refireDelay = 4;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(1.50 * TICRATE);
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM4";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
	}
}
class SRM6 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "SRM6";
		mountType = "Missile";
		spread = 2.0;
		doConverge = false;
		ammoUse = 1;
		
		heat = 5;
		weight = 3.0;
		refireCount = 6;
		refireDelay = 4;
		size = 2;
				
		fireTime     = refireDelay * refireCount;
		cooldownTime = 2.0 * TICRATE;
		
		projType = "MechSRM";
		ammoType = "SRMAmmo";
		fireSound = "Missile/SRM6";
		sndItemName = "Betty/Item/SRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
	}
}

class SSRM2 : SRM2
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM2";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 1.0;
		requiresTarget = true;
	}
}
class SSRM4 : SRM4
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM4";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 2.0;
		requiresTarget = true;
	}
}
class SSRM6 : SRM6
{
	override void Defaults()
	{	
		super.Defaults();
		DisplayName = "SSRM6";
		projType = "MechSSRM";
		ammoType = "SSRMAmmo";
		cooldownTime += TICRATE;
		weight = 3.0;
		size = 2.0;
		requiresTarget = true;
	}
}

// LRM 5,10,15,20
class LRM5 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM5";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 2.0;
		refireCount = 5;
		refireDelay = 2;
		heat = 2.20;
		size = 1;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(2.0 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM5";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
	}
}
class LRM10 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM10";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 5.0;
		refireCount = 10;
		refireDelay = 2;
		heat = 3.60;
		size = 2;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(3.70 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM10";
		sndItemName = "Betty/Item/LRM";
		damagable = true;
		requiresTarget = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.1, 0);
		return super.Fire(firePos);
	}
}
class LRM15 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM15";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 7.0;
		refireCount = 15;
		refireDelay = 2;
		heat = 4.50;
		size = 3;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(3.70 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM15";
		sndItemName = "Betty/Item/LRM";
		damagable = true;
		requiresTarget = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.15, 0);
		return super.Fire(firePos);
	}
}
class LRM20 : MechMissileWeapon
{
	override void Defaults()
	{	
		DisplayName = "LRM20";
		mountType = "Missile";
		spread = 1.0;
		doConverge = false;
		ammoUse = 1;
		
		weight = 10.0;
		refireCount = 20;
		refireDelay = 2;
		heat = 5.60;
		size = 5;
		
		fireTime     = refireDelay * refireCount;
		cooldownTime = ceil(4.0 * TICRATE);
		
		projType = "MechLRM";
		ammoType = "LRMAmmo";
		fireSound = "Missile/LRM20";
		sndItemName = "Betty/Item/LRM";
		mountDeco = "MissileMountDeco";
		
		damagable = true;
		requiresTarget = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.25, 0);
		return super.Fire(firePos);
	}
}

// Ballistics
class AC2 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/2";
		mountType = "Ballistic";
		heat = 0.50;
		weight = 6.0;
		size = 1.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.25 * TICRATE);
		
		projType = "Autocannon2";
		ammoType = "AC2Ammo";
		fireSound = "Ballistic/Autocannon2";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		spread = 0;
		damagable = true;
	}
}
class UltraAC2 : UltraAC
{
	override void Defaults()
	{
		displayName = "UAC/2";
		mountType = "Ballistic";
	
		heat = 1.0;
		weight = 7.0;
		size = 3.0;
		energyUse = 0.05; // Magnetic loading system uses reactor power.
		ammoType = "UAC2Ammo";

		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.1 * TICRATE);
		
		projType = "Autocannon2";
		ammoType = "UAC2Ammo";
		fireSound = "Ballistic/Autocannon2";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		
		spread = 0;
		damagable = true;
		
		SetupUAC();
	}
}

class AC5 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/5";
		mountType = "Ballistic";
		heat = 1.40;
		weight = 8.0;
		size = 4.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.5 * TICRATE);
		
		projType = "Autocannon5";
		ammoType = "AC5Ammo";
		fireSound = "Ballistic/Autocannon5";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.4, 0);
		return super.Fire(firePos);
	}
}
class UltraAC5 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/5";
		mountType = "Ballistic";
		heat = 3.0;
		weight = 9.0;
		size = 5.0;
		energyUse = 0.08;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.25 * TICRATE);
		
		projType = "Autocannon5";
		ammoType = "UAC5Ammo";
		fireSound = "Ballistic/Autocannon5";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
		
		SetupUAC(20); // UAC known to be more jam-prone.
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.25, 0);
		return super.Fire(firePos);
	}
}

class AC10 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/10";
		mountType = "Ballistic";
		heat = 2.5;
		weight = 12.0;
		size = 7.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(1.25 * TICRATE);
		
		projType = "Autocannon10";
		ammoType = "AC10Ammo";
		fireSound = "Ballistic/Autocannon10";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.8, 0.8);
		return super.Fire(firePos);
	}
}
class UltraAC10 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/10";
		mountType = "Ballistic";
		heat = 5.0;
		weight = 9.0;
		size = 5.0;
		energyUse = 0.12;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(0.6 * TICRATE);
		
		projType = "Autocannon10";
		ammoType = "UAC10Ammo";
		fireSound = "Ballistic/Autocannon10";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
		
		SetupUAC();		
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-0.6, 0.6);
		return super.Fire(firePos);
	}
}

class AC20 : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "AC/20";
		mountType = "Ballistic";
		heat = 5.0;
		weight = 14.0;
		size = 10.0;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(2.0 * TICRATE);
		
		projType = "Autocannon20";
		ammoType = "AC20Ammo";
		fireSound = "Ballistic/Autocannon20";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
	}
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-2, 4);
		return super.Fire(firePos);
	}
}
class UltraAC20 : UltraAC
{
	override void Defaults()
	{	
		DisplayName = "UAC/20";
		mountType = "Ballistic";
		heat = 10.0;
		weight = 15.0;
		size = 10.0;
		energyUse = 0.2;
		
		ammoUse = 1;
		fireTime     = 4;
		cooldownTime = ceil(1.0 * TICRATE);
		
		projType = "Autocannon20";
		ammoType = "UAC20Ammo";
		fireSound = "Ballistic/Autocannon20";
		reloadSound = "Ballistic/Autocannon/Reload";
		sndItemName = "Betty/Item/Autocannon";
		damagable = true;
		
		SetupUAC(20); // This needs to jam more often for balance, because holy shit are UAC20s scary.	
	}	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-2, 4);
		return super.Fire(firePos);
	}
}

class MachineGun : MechBallisticWeapon
{
	Sound mgunFire;
	int fireCounter;

	override void Defaults()
	{	
		DisplayName = "MACHINEGUN";
		mountType = "Ballistic";
		heat = 0;
		weight = 0.5;
		size = 1.0;
		
		ammoUse = 1;
		fireTime     = 1;
		cooldownTime = 1;
		
		projType = "MGBullet";
		ammoType = "MGAmmo";
		fireSound = "";
		mgunFire = "Ballistic/MachineGun";
		sndItemName = "Betty/Item/Machinegun";
		mountDeco = "MGunMountDeco";
		mountDecoOffs = (-10,0,0);
		
		spread = 1.2;
		damagable = true;
	}
	
	override bool Fire(vector3 firePos)
	{
		if(fireCounter++ >= 1)
		{
			WeapSound(mgunFire, 0.5, randomPitch:true);
			fireCounter = 0;
		}
		
		return super.Fire(firePos);
	} 
}

class GaussRifle : MechBallisticWeapon
{
	override void Defaults()
	{	
		DisplayName = "GAUSS RIFLE";
		mountType = "Ballistic";
		heat = 1.0;
		weight = 15.0;
		size = 7.0;
		
		ammoUse 	 = 1;
		fireTime	 = 8;
		cooldownTime = ceil(4.25 * TICRATE);
		energyUse = 1.0;
		
		projType = "GaussCannon";
		ammoType = "GaussAmmo";
		fireSound = "Ballistic/GaussRifle";
		reloadSound = "Ballistic/GaussRifle/Reload";
		sndItemName = "Betty/Item/GaussRifle";
		damagable = true;
	}
	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-5, 6);
		return super.Fire(firePos);
	}
	
	override void OnDestroyed()
	{
		if(!parent) return;
		super.OnDestroyed();
		
		// Yeah, pretty bad idea to get one of these guys crit...
		// Massive capacitor banks plus a hole, turns out, don't mix too well.
		parent.DoExplosionDamage(20.0);
	}
}

// PPC
class PPC : MechBallisticWeapon
{	
	override void Defaults()
	{	
		DisplayName = "PPC";
		mountType = "Energy";
		heat = 15.0;
		weight = 7.0;
		size = 3.0;
		
		ammoUse = 0;
		fireTime = 10;
		cooldownTime = ceil(3 * TICRATE);
		energyUse = 0.30;
		
		projType = "ParticleCannon";
		ammoType = "";
		fireSound = "Energy/PPC";
		sndItemName = "Betty/Item/PPC";
		mountDeco = "PPCMountDeco";
		
		damagable = true;
	}
	
	override bool Fire(vector3 firePos)
	{
		A_Recoil(-3);
		return super.Fire(firePos);
	}
}
class ERPPC : PPC
{	
	override void Defaults()
	{	
		super.Defaults();
		
		DisplayName = "ER PPC";
		heat = 20.0;
		energyUse = 0.40;
				
		projType = "RangedParticleCannon";
		fireSound = "Energy/PPC";
		sndItemName = "Betty/Item/ERPPC";
		
		damagable = true;
	}
}

class AMS : MechWeapon
{
	Actor curTarget;

	override void Defaults()
	{
		displayName = "AMS";
		ammoType = "AMSAmmo";
		mountType = "NONE"; // Doesn't take a mount position.
		weight = 0.5;
		
		fireTime = 2;
		cooldownTime = 16;
		range = 270;
		ammoUse = 1;
		
		refireCount = 8;
		refireDelay = 4;
		
		projType = "MechAAM";
		sndItemName = "Betty/Item/AMS";
		fireSound = "Missile/AMS";
		damagable = true;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue, mechInfo);
		string infoText = "\c[Orange]Destroys missiles before they hit you.";
		
		flavorText = flavorText == "" ? infoText : String.Format("%s\n%s", flavorText,infoText);
	}
	
	override void GetUIColors(out int fontColor, out int bgColor)
	{
		fontColor = Font.CR_White;
		bgColor = 0xA0e68115;
	}
	
	override bool isGroupable()
	{
		return false;
	}
	override bool checkSelectable()
	{
		return false;
	}
	
	override bool Fire(vector3 firePos)
	{
		if(!refire && refireCount > 0) DoRefire();
		if(!curTarget) return false;
		
		// Only play weapon Fire sound on the first true Fire call.
		if(refire == refireCount) WeapSound(fireSound);
		
		let proj = MechProjectile(EffectsHelper.Fire3DProjectile(parent, parent.lookingPos, projType, firePos.x, firePos.y, firePos.z, false, 0,0));
		proj.master = mech.driver;
		proj.homingTarget = curTarget;
		
		modifyHeat(heat);
		modifyEnergy(energyUse);
		depleteAmmo(ammoUse);
		cooldown = fireTime + cooldownTime;
		
		return true;
	}
	
	override vector3 getFirePos()
	{
		return (0,0,parent.getHeight());
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		// Don't run if mech is shutdown.
		if(mech.shutdown || !canFire()) return;
		
		// Firing is handled manually by the AMS computer
		// Manually because I am the AMS computer, lazy bastard...
		
		vector3 localFirePos = getFirePos();
		vector3 globalFirePos = parent.OffsetPos(localFirePos.x, localFirePos.y, localFirePos.z);
		
		let it = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(it.Next()))
		{
			// Out of range
			double dist = DrivableMech.unitsToKM(DrivablesMath.Distance3D(globalFirePos,act.pos)) * 1000.0;
			if(dist > range) continue;
		
			// Don't fire at our own projectiles stoopid
			let hardpointSource = MechHardpoint(act.target);
			let mechProj = MechProjectile(act);
			double projDmg = mechProj ? mechProj.trueDamage : act.damage;
			if( projDmg <= 0 || !act.bMISSILE || (hardpointSource && hardpointSource.mech == mech) ) continue;
			
			// If we're dealing with a mech projectile, only target missiles
			if( mechProj && !(mechProj is "MechMissile") ) continue;
			
			// In range and an enemy projectile, engage
			curTarget = act;
			if(!cooldown) Fire(localFirePos);
		}
	}
}