class MechHeatsink : MechUtility
{
	double buffer;
	double heatEff;
	
	override void Defaults()
	{	
		damagable = true;
		weight = 1;
		heatEff = 3.0 / double(TURNTICS);
		buffer = 0;
		displayName = "Heatsink";
		sndItemName = "Betty/Item/Heatsink";
		
		value = 4000;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		
		
		statName.Push("COOLING");
		statValue.Push(String.Format("\c[Green]+%.2f K/s",mechInfo.BHUtoKelvin(heatEff*double(TICRATE))));
	}
	
	override void OnAttach()
	{	
		super.OnAttach();
		mech.maxHeat += buffer;
	}
	
	override void OnDetach()
	{
		super.OnDetach();
		mech.maxHeat -= buffer;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) 
		{
			mech = parent.GetMech();
			return;
		}
		
		// Dissipate heat.
		modifyHeat(-heatEff);
	
		// console.printf("Removing heat -%f  [%d]", heatEff, level.mapTime);
	}
	
	override string GetShopDescription()
	{
		return (
			"\c[White]Heat sinks operate by collecting heat with coolant distributed to "
			"heat sources and delivering that to a radiator."
			"These traditional heat sinks, or \"single strength heat sinks\", utilize "
			"radiators made of very thermally conductive oriented graphite which provides up to five times the "
			"thermal conductivity compared to copper"
			"(Source: https://www.sarna.net/wiki/Heat_Sink)"
		);
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{	
		stats.Push("Heat Gen");
		values.Push(String.Format("-%.2f BHU/s", heatEff*double(TICRATE)));
	}
}

class MechDoubleHeatsink : MechHeatsink
{
	override void Defaults()
	{	
		damagable = true;
		size = 2;
		weight = 1;
		heatEff = 6.0 / TURNTICS;
		buffer = 0;
		displayName = "Double Heatsink";
		
		value = 12000;
	}

	override string GetShopDescription()
	{
		return (
			"\c[White]Double heat sinks dissipate twice as much heat for the same tonnage, "
			"but take up more space to operate effectively because of their use of a "
			"crystalline polymer. This polymer, similar to the engine shielding of XL fusion engines, "
			"is not as thermally conductive as graphite but significantly lighter and more durable, "
			"allowing it to be formed into a larger radiator for the same mass. "
			"(Source: https://www.sarna.net/wiki/Heat_Sink)"
		);
	}
}

class MechHeatBank : MechUtility
{
	double curBuffer, maxBuffer;
	double ventRate;

	// A heat bank provides extra heat buffer so long as it isn't full.
	override void Defaults()
	{	
		damagable = true;
		weight = 1;
		size = 2;
		maxBuffer = 8;
		displayName = "Small Heat Bank";
		// sndItemName = "Betty/Item/Heatsink";
		
		value = 160000;
		SetupHeatBank();
	}
	
	void SetupHeatBank()
	{
		ventRate = maxBuffer / double(TURNTICS);
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		
		
		statName.Push("BUFFER CAPACITY");
		double capacity = mechInfo.BHUtoKelvin(maxBuffer);
		statValue.Push(String.Format("\c[Green]+%.2f K", capacity));
		statName.Push("VENT RATE");
		double ventSpeed = mechInfo.BHUtoKelvin(ventRate * 35.0);
		statValue.Push(String.Format("\c[Green]-%.2f K/s", ventSpeed));
		statName.Push(" ");
		statValue.Push(" ");
		
		statName.Push("STATUS");
		double curBufferKelvin = mechInfo.BHUtoKelvin(curBuffer);
		statValue.Push(String.Format("\c[Green]%.2f K (\c[Green]%.2f K)", curBufferKelvin, capacity));
	}
		
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) 
		{
			mech = parent.GetMech();
			return;
		}
		
		// Collect heat until buffer is full.
		double capacity = maxBuffer - curBuffer;
		double ambient = mech.getAmbient();
		while(capacity > 0)
		{
			
			if(mech.curHeat <= ambient) break; 
			modifyHeat(-1);
			
			curBuffer++;
			capacity = maxBuffer - curBuffer;
		}
		
		// Dissipate buffer.
		curBuffer = max(0, curBuffer - ventRate);
	}
	
	override string GetShopDescription()
	{
		return (
			"\c[White] Where standard heat sinks rely on coolants, heat banks do not. They collect and "
			" expel heat automatically, though only in certain increments. "
			" This item effectively raises a mech's maximum heat capacity for a limited period; once a heat bank is full it must "
			" vent it's heat before it becomes useful again."
			"(Source: https://www.bta3062.com/index.php?title=Cooling#Heat_Bank)"
		);
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values)
	{	
		stats.Push("BUFFER CAPACITY");
		double capacity = maxBuffer;
		values.Push(String.Format("\c[Green]+%.2f BHU", capacity));
		stats.Push("VENT RATE");
		double ventSpeed = (ventRate * 35.0);
		values.Push(String.Format("\c[Green]-%.2f BHU/s", ventSpeed));
		values.Push(" ");
	}
}

class ImprovedHeatBank : MechHeatBank
{
	override void Defaults()
	{
		super.Defaults();
		
		weight = 1.5;
		size = 3;
		maxBuffer = 12;
		displayName = "Medium Heat Bank";
		value = 320000;
		SetupHeatBank();
	}
}

class BulkHeatBank : MechHeatBank
{
	override void Defaults()
	{
		super.Defaults();
		
		weight = 2;
		size = 4;
		maxBuffer = 16;
		displayName = "Large Heat Bank";
		value = 470000;
		SetupHeatBank();
	}
}

class MechCASE : MechUtility
{
	override void Defaults()
	{
		damagable = false;
		displayName = "C.A.S.E";
		size = 1.0;
		weight = 0;
		itemDescription = "If an ammo explosion occurs, C.A.S.E prevents the damage from spreading to adjacent hardpoints.";
		
		value = 15000;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		flavorText = itemDescription;
	}
	
	override string GetShopDescription()
	{
		return (
			"\c[White]Short for Cellular Ammunition Storage Equipment is used "
			"in order to prevent the complete destruction of a unit in the event of "
			"an internal explosion."
			" When CASE is installed in a unit, the location with CASE combines "
			"two safeguards against internal explosions, these work together to "
			"effectively redirect the resulting blast of the explosion out of the unit."
			"\n (Source: https://www.sarna.net/wiki/Cellular_Ammunition_Storage_Equipment)"
		);
	}
	
	override void GetShopProperties(out Array<String> stats, out Array<string> values) {}	
}

// Armor types
class MechArmor_Standard : MechArmor
{
	override void Defaults()
	{
		super.Defaults();
		structureSlots = 0;
		armorWeight = 0.05;
		damageMod = 1.0;
		displayName = "Standard";
		armorTier = 0;
	}
}

class MechFerroStructure : MechDynamicStructure
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Armor";
	}
} 

class MechArmor_Ferro : MechArmor
{
	double efficiency;

	override void Defaults()
	{
		super.Defaults();
		structType = "MechFerroStructure";
		structureSlots = 14;
		efficiency = 0.20; // 20% more effective than Standard Armor.
		
		armorWeight = 0.05 * (1.0 - efficiency);
		damageMod = 1.0;
		displayName = "Ferro-fibrous";
		armorTier = 1; // Advanced armor tier
		costPerTon = 20000;
		
		// Wasn't able to find a source for this price, so I have to make it the fuck up.
		// Maybe one day search engines will work properly again, but that isn't today.
		value = 350000; 
	}
}

class MechArmor_ClanFerro : MechArmor_Ferro
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Clan-Ferro-fibrous";
		structureSlots = 7;
		armorTier = 3;
		costPerTon = 40000;
		
		value = 700000;
	}
}

// Chassis structures
class MechChassis_Standard : MechChassisStructure
{
	override void Defaults()
	{
		super.Defaults();
		structureSlots = 0;
		displayName = "Standard";
		chassisWeightPercent = 1.0;
		structureTier = 0;
	}
}

class MechChassis_EndoSteel : MechChassisStructure
{
	override void Defaults()
	{
		super.Defaults();
		structureSlots = 14;
		displayName = "Endosteel";
		chassisWeightPercent = 0.5;
		structureTier = 1; // Advanced structure tier
		costPerTon = 40000; // Per-ton of structural materials.
		
		value = 150000;
	}
}

class MechChassis_ClanEndoSteel : MechChassis_EndoSteel
{
	override void Defaults()
	{
		super.Defaults();
		structureSlots = 7;
		displayName = "Clan-Endosteel";
		structureTier = 3;
		costPerTon = 80000;
		
		value = 300000;
	}
}

// Arm structures
class MechStructure : MechItem 
{
	override void Defaults()
	{
		template = true;
	}
	
	override void DoEffect()
	{
		super.DoEffect();

		if(hp <= 0 && parent.healthPoints > 0) hp = 10;
	}
}

class MechShoulder : MechStructure
{
	override void Defaults()
	{
		Movable = false;	
		Damagable = false;
		size = 1;
		weight = 0;
		displayName = "Shoulder";
		itemDescription = "\c[Red]Critical Structure Item. \nCannot be moved. \c[White]"; 
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		// Stats are skipped.
		flavorText = itemDescription; 
	}
}
class MechUpperArmActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Upper Arm";
	}
}
class MechLowerArmActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Lower Arm";
	}
}

// Leg structures
class MechHipStructure : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Hip";
	}
}
class MechUpperLegActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Upper Leg";
	}
}
class MechLowerLegActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Lower Leg";
	}
}
class MechFootActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Foot";
	}
}

// Torso structure(s)
class MechGyro : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		size = 4;
		displayName = "Gyro";
	}
}

// Cockpit structures
class MechLifeSupport : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		size = 2;
		displayName = "Life Support";
	}
}
class MechSensors : MechLifeSupport
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Sensors";
	}
}
class MechCockpitStructure : MechLifeSupport
{
	override void Defaults()
	{
		super.Defaults();
		size = 1;
		displayName = "Cockpit";
	}
}