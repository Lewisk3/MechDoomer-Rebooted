class MechHeatsink : MechItem
{
	double buffer;
	double heatEff;
	
	override void Defaults()
	{	
		damagable = true;
		weight = 1;
		heatEff = 0.26 / TICRATE;
		buffer = 2.6;
		displayName = "Heatsink";
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		super.getDescription(flavorText, statName, statValue);
		statName.Push(" ");
		statValue.Push(" ");
		
		
		statName.Push("COOLING");
		statValue.Push(String.Format("\c[Green]+%.2f K/s",mechInfo.BHUtoKelvin(heatEff*double(TICRATE))));
	}
	
	override void OnAttach()
	{	
		super.OnAttach();
		mech.maxHeat += buffer;
	}
	
	override void OnDetach()
	{
		super.OnAttach();
		mech.maxHeat -= buffer;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) 
		{
			mech = parent.GetMech();
			return;
		}
		
		// Dissipate heat.
		modifyHeat(-heatEff*3.0);
	
		// console.printf("Removing heat -%f  [%d]", heatEff, level.mapTime);
	}
}

class MechDoubleHeatsink : MechHeatsink
{
	override void Defaults()
	{	
		damagable = true;
		size = 2;
		weight = 1;
		heatEff = 0.40 / TICRATE;
		buffer = 4;
		displayName = "Double Heatsink";
	}
}

class MechCASE : MechItem
{
	override void Defaults()
	{
		damagable = false;
		displayName = "C.A.S.E";
		size = 1.0;
		weight = 0;
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		flavorText = "If an ammo explosion occurs, C.A.S.E prevents the damage from spreading to adjacent hardpoints.";
	}
}

// Ammo
class SRMAmmo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "SRM Ammo";
		maxAmmo = 120;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}
class SSRMAmmo : SRMAmmo
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "SSRM Ammo";
	}
}

class LRMAmmo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "LRM Ammo";
		maxAmmo = 240;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}

class AC2Ammo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "AC/2 Ammo";
		maxAmmo = 50;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}
class AC5Ammo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "AC/5 Ammo";
		maxAmmo = 25;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}
class AC10Ammo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "AC/10 Ammo";
		maxAmmo = 10;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}
class AC20Ammo : MechAmmo
{
	override void Defaults()
	{
		damagable = true;
		displayName = "AC/20 Ammo";
		maxAmmo = 5;
		weight = 1.0;
		size = 1.0;
		
		SetupAmmo();
	}
}

// Armor types
class MechArmor_Standard : MechArmor
{
	override void Defaults()
	{
		super.Defaults();
		structureSlots = 0;
		armorWeight = 0.05;
		damageMod = 1.0;
		displayName = "Standard";
	}
}

class MechFerroStructure : MechDynamicStructure
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Armor";
	}
} 

class MechArmor_Ferro : MechArmor
{
	override void Defaults()
	{
		super.Defaults();
		structType = "MechFerroStructure";
		structureSlots = 14;
		
		armorWeight = 0.03;
		damageMod = 1.0;
		displayName = "Ferro-fibrous";
	}
}

// Chassis structures

// Arm structures
class MechShoulder : MechItem
{
	override void Defaults()
	{
		Movable = false;	
		Damagable = false;
		size = 1;
		weight = 0;
		displayName = "Shoulder";
	}
	
	override void getDescription(out string flavorText, out Array<String> statName, out Array<String> statValue, DrivableMech mechInfo)
	{
		flavorText = "\c[Red]Critical Structure \c[Red]Item. Cannot be moved. \c[White]"; 
	}
}
class MechUpperArmActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Upper Arm";
	}
}
class MechLowerArmActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Lower Arm";
	}
}

// Leg structures
class MechHipStructure : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Hip";
	}
}
class MechUpperLegActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Upper Leg";
	}
}
class MechLowerLegActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Lower Leg";
	}
}
class MechFootActuator : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Foot";
	}
}

// Torso structure(s)
class MechGyro : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		size = 4;
		displayName = "Gyro";
	}
}

// Cockpit structures
class MechLifeSupport : MechShoulder
{
	override void Defaults()
	{
		super.Defaults();
		size = 2;
		displayName = "Life Support";
	}
}
class MechSensors : MechLifeSupport
{
	override void Defaults()
	{
		super.Defaults();
		displayName = "Sensors";
	}
}
class MechCockpitStructure : MechLifeSupport
{
	override void Defaults()
	{
		super.Defaults();
		size = 1;
		displayName = "Cockpit";
	}
}